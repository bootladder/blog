<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-04-14T22:30:31-07:00</updated><id>/</id><title type="html">Bootladder News</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">udev rule for /dev/ symlink with serial number</title><link href="/2018/04/14/udev-rule-for-dev-symlink-with-serial-number.html" rel="alternate" type="text/html" title="udev rule for /dev/ symlink with serial number" /><published>2018-04-14T00:00:00-07:00</published><updated>2018-04-14T00:00:00-07:00</updated><id>/2018/04/14/udev-rule-for-dev-symlink-with-serial-number</id><content type="html" xml:base="/2018/04/14/udev-rule-for-dev-symlink-with-serial-number.html">&lt;p&gt;I discovered, you can do the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KERNEL==&quot;ttyUSB[0-9]*&quot;, ATTRS{idProduct}==&quot;6001&quot;, ATTRS{idVendor}==&quot;0403&quot;, SYMLINK+=&quot;ttyUSB%s{serial}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The interesting part is the &lt;code class=&quot;highlighter-rouge&quot;&gt;%s{serial}&lt;/code&gt;.&lt;br /&gt;
%s is short for ATTRS{} , so the value of the ATTR is inserted there.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;serial&lt;/code&gt; is the name of an attr, like &lt;code class=&quot;highlighter-rouge&quot;&gt;idProduct&lt;/code&gt;.&lt;br /&gt;
So, now I can mark my FTDI’s with their serial numbers and do cool stuff.&lt;br /&gt;
I discovered this from https://txlab.wordpress.com/2016/06/14/udev-rules-for-ttyusb-devices/ , and then looked at the udev manual&lt;/p&gt;</content><author><name></name></author><summary type="html">I discovered, you can do the following: KERNEL==&quot;ttyUSB[0-9]*&quot;, ATTRS{idProduct}==&quot;6001&quot;, ATTRS{idVendor}==&quot;0403&quot;, SYMLINK+=&quot;ttyUSB%s{serial}&quot; The interesting part is the %s{serial}. %s is short for ATTRS{} , so the value of the ATTR is inserted there. serial is the name of an attr, like idProduct. So, now I can mark my FTDI’s with their serial numbers and do cool stuff. I discovered this from https://txlab.wordpress.com/2016/06/14/udev-rules-for-ttyusb-devices/ , and then looked at the udev manual</summary></entry><entry><title type="html">Configuration Management of my Laptop</title><link href="/2018/04/07/configuration-management-of-my-laptop.html" rel="alternate" type="text/html" title="Configuration Management of my Laptop" /><published>2018-04-07T00:00:00-07:00</published><updated>2018-04-07T00:00:00-07:00</updated><id>/2018/04/07/configuration-management-of-my-laptop</id><content type="html" xml:base="/2018/04/07/configuration-management-of-my-laptop.html">&lt;p&gt;Similar to the contact list in my phone, my main laptop is a single point of failure.&lt;br /&gt;
I take my laptop on the plane, in the car, etc.  Sometimes if I’m taking my car,
I’ll take a spare laptop just in case it gets stolen.  Any time I have my main laptop,
I must have it on my person at all times, even if I’m not going to use it.&lt;br /&gt;
&lt;strong&gt;This is just plain stupid&lt;/strong&gt;.  I can get a Thinkpad T420, which is what I use exclusively now,
for less than $200.  It’s relatively heavy by today’s standards.  Sometimes I feel tied to it
in an unpleasant way.&lt;/p&gt;

&lt;h1 id=&quot;the-only-reason-i-have-a-primary-laptop-is-because-its-configured-to-my-preference&quot;&gt;The only reason I have a primary laptop is because it’s configured to my preference.&lt;/h1&gt;

&lt;p&gt;I have a docking station for my T420 in my home office.  There’s a lot of stuff connected to it,
so having it saves me a lot of time unplugging and plugging.&lt;br /&gt;
But you know what’s funny?   Docking and undocking the laptop itself is starting to take too much time.&lt;br /&gt;
Realizing the laptop is not there on the docking station, and I have to go get it and dock it… is not fun.&lt;/p&gt;

&lt;h1 id=&quot;now-that-i-have-a-supply-of-disposable-thinkpads-the-docking-station-is-obsolete&quot;&gt;Now that I have a supply of disposable Thinkpads, the docking station is obsolete.&lt;/h1&gt;

&lt;p&gt;So, today I went out to the coffee shop, and I took a spare Thinkpad.  Not my main one.
I left my main Thinkpad on the docking station.  I got to the coffee shop, opened up the laptop,
and then it hit me.  The spare Thinkpad wasn’t configured to my liking.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;My i3wm config was default; I could barely use it&lt;/li&gt;
  &lt;li&gt;It didn’t have any of my books on it&lt;/li&gt;
  &lt;li&gt;golang was not installed&lt;/li&gt;
  &lt;li&gt;none of my git repos for work projects were cloned&lt;/li&gt;
  &lt;li&gt;No SSH keys, no ~/.ssh/config, no /etc/hosts, no nothing!&lt;/li&gt;
  &lt;li&gt;blah blah blah, you know the deal&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-do-i-do-about-this&quot;&gt;What do I do about this?&lt;/h1&gt;

&lt;h1 id=&quot;some-of-the-stuff-is-mine-not-for-you--some-of-the-stuff-is-my-customers-not-for-me-in-a-year-from-now&quot;&gt;Some of the stuff is mine, not for you!  Some of the stuff is my customer’s, not for me in a year from now!&lt;/h1&gt;

&lt;h1 id=&quot;solution-run-a-openssh-server-on-the-main-laptop&quot;&gt;Solution: Run a OpenSSH server on the main laptop&lt;/h1&gt;
&lt;p&gt;Using the “fleet laptop”, ssh into the main laptop to grab configuration files.
At the same time, copy them into a git repo for future convenience.
Even better, add a line in a script that copies it to the destination.&lt;br /&gt;
Worked well for &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.&lt;/code&gt; files.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc .vimrc i3config &lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution--ansible-playbooks&quot;&gt;Solution:  Ansible Playbooks&lt;/h1&gt;
&lt;p&gt;Golang is a multi-step install, and for some reason apt-get install golang-go installs version 1.6.  Too old.&lt;br /&gt;
Let’s give it a try.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo apt-add-repository ppa:ansible/ansible
sudo apt-get install ansible
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Maybe I should just keep a ansible binary off hand, to avoid those 3 steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TBD…&lt;/p&gt;

&lt;h1 id=&quot;etchosts-and-sshconfig--bitbucket&quot;&gt;/etc/hosts and ~/.ssh/config … Bitbucket?&lt;/h1&gt;
&lt;p&gt;Bitbucket gives you private repos.  Let’s just do that for now.&lt;br /&gt;
&lt;em&gt;~/.ssh/&lt;/em&gt;&lt;br /&gt;
Copy over my ~/.ssh into the repo, take out unnecessary stuff.&lt;br /&gt;
My &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; contains:  hostnames (IP addresses or domain names), IdentityFile’s (SSH keys).&lt;br /&gt;
Should I include the keys in the repo?  If I do, it’s more convenient, but then it’s more security risk.  If I don’t, I need to generate new keys and then copy them to the hosts.  At best here I have to remember a password to access the remote machine.  At worst, the machine only authenticates with keys, no password login.&lt;br /&gt;
So again, for lack of a better solution, I’ll put my keys in the repo.&lt;br /&gt;
&lt;em&gt;Result&lt;/em&gt;:  &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/&lt;/code&gt; contains key-pairs and the config file.&lt;br /&gt;
Then I attempted to login to a remote host.  Turns out, git does not preserve the 400 permission mode that the keys need to have.  So, in the install script, I change the keys to 400.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/etc/hosts&lt;/em&gt;&lt;br /&gt;
Comparing my “main laptop’s” &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; with the other laptop’s default &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;, I notice 2nd line of the file:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.1.1 my-hostname&lt;/code&gt; .  This obviously is unique to the host.  But it appears that this doesn’t matter.  I should be able to remove that line.&lt;br /&gt;
OK I did that, and I notice that when /etc/hosts is touched or modified,
I get the following message: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo: unable to resolve host my-hostname&lt;/code&gt;.&lt;br /&gt;
Using this answer as a suggestion: https://askubuntu.com/a/524368 , I added the following line to my install script: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 127.0.1.1 $(hostname) | sudo tee -a /etc/hosts&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Similar to the contact list in my phone, my main laptop is a single point of failure. I take my laptop on the plane, in the car, etc. Sometimes if I’m taking my car, I’ll take a spare laptop just in case it gets stolen. Any time I have my main laptop, I must have it on my person at all times, even if I’m not going to use it. This is just plain stupid. I can get a Thinkpad T420, which is what I use exclusively now, for less than $200. It’s relatively heavy by today’s standards. Sometimes I feel tied to it in an unpleasant way. The only reason I have a primary laptop is because it’s configured to my preference. I have a docking station for my T420 in my home office. There’s a lot of stuff connected to it, so having it saves me a lot of time unplugging and plugging. But you know what’s funny? Docking and undocking the laptop itself is starting to take too much time. Realizing the laptop is not there on the docking station, and I have to go get it and dock it… is not fun. Now that I have a supply of disposable Thinkpads, the docking station is obsolete.</summary></entry><entry><title type="html">Cell Phone - Backup and Restore My Contacts!</title><link href="/2018/04/07/backup-and-restore-in-case-of-emergency.html" rel="alternate" type="text/html" title="Cell Phone - Backup and Restore My Contacts!" /><published>2018-04-07T00:00:00-07:00</published><updated>2018-04-07T00:00:00-07:00</updated><id>/2018/04/07/backup-and-restore-in-case-of-emergency</id><content type="html" xml:base="/2018/04/07/backup-and-restore-in-case-of-emergency.html">&lt;p&gt;I dropped my phone and it stopped working.  After a short existential crisis, 
I went to the screen repair place the next day.  It was replaced in an hour,
fully functional.&lt;br /&gt;
I got lucky that time.  Eventually I won’t be so lucky.&lt;br /&gt;
&lt;strong&gt;My contacts were not backed up.  I need to be more careful.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;grabbing-vcfs-off-my-phone&quot;&gt;Grabbing .vcf’s off my phone.&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;First, why the hell are we using this ridiculous format?&lt;/li&gt;
  &lt;li&gt;Second, why is it so confusing to access the filesystem on my Android phone?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I plug my phone into my Ubuntu laptop’s USB.  Figuring out how to mount it was frustrating.&lt;br /&gt;
But fortunately, Nautilus File Manager somehow knew how to mount it.&lt;br /&gt;
Having no idea where it was mounted, I right clicked in Nautilus and selected “Open in a Terminal” or whatever.&lt;br /&gt;
Then I did a &lt;code class=&quot;highlighter-rouge&quot;&gt;find . -name \*.vcf&lt;/code&gt; to find the contacts.  I also exported my contacts in my “Phone App”.&lt;br /&gt;
Shouldn’t the contacts just.. be there?  Instead of having to export them?  Yeah yeah, proprietary format.&lt;/p&gt;

&lt;p&gt;Now let’s look at the .vcf files.&lt;br /&gt;
I open one up in VIM.  Then go to the end of the file.  The person I see there, is the last person I added to my phone.&lt;br /&gt;
Scrolling up, the contacts appear to be in chronological order.&lt;br /&gt;
Scrolling back to the top, I see… totally random contacts.  Some from 10 years ago, some from 5 years ago.
Those defintely aren’t in chronological order.  Perhaps they got mixed up since I’ve changed phones a couple times?&lt;/p&gt;

&lt;p&gt;Well, the reason I’m saying this is I have a problem.  I don’t know if all of my contacts are there, or just some of them.&lt;br /&gt;
For example, there are contacts stored on my SIM card.  Are they in the .vcf file?&lt;br /&gt;
Also, I had a couple other .vcf files on my phone, don’t remember when why or how, but they’re there.
Weirdly, the old ones are larger in size than this last one I just exported!  WHY????&lt;br /&gt;
Oh by the way, there are no dates for when the contacts were added.  I just had to guess by the person’s name and where 
I was living when I met them, when the contact was added.&lt;/p&gt;

&lt;p&gt;Whatever, it appears to be all of the contacts.  I’ll just grab all the .vcf files off the phone.&lt;br /&gt;
Also,  the contacts were exported to the SD card, not the phone flash.&lt;br /&gt;
&lt;strong&gt;So, if I just make a point to export my contacts every X days, then they’ll be in the SD card which means I can grab them in the event that the phone dies for real&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;fortunately-this-is-all-i-need-to-do&quot;&gt;Fortunately, this is all I need to do.&lt;/h1&gt;</content><author><name></name></author><summary type="html">I dropped my phone and it stopped working. After a short existential crisis, I went to the screen repair place the next day. It was replaced in an hour, fully functional. I got lucky that time. Eventually I won’t be so lucky. My contacts were not backed up. I need to be more careful. Grabbing .vcf’s off my phone. First, why the hell are we using this ridiculous format? Second, why is it so confusing to access the filesystem on my Android phone? I plug my phone into my Ubuntu laptop’s USB. Figuring out how to mount it was frustrating. But fortunately, Nautilus File Manager somehow knew how to mount it. Having no idea where it was mounted, I right clicked in Nautilus and selected “Open in a Terminal” or whatever. Then I did a find . -name \*.vcf to find the contacts. I also exported my contacts in my “Phone App”. Shouldn’t the contacts just.. be there? Instead of having to export them? Yeah yeah, proprietary format. Now let’s look at the .vcf files. I open one up in VIM. Then go to the end of the file. The person I see there, is the last person I added to my phone. Scrolling up, the contacts appear to be in chronological order. Scrolling back to the top, I see… totally random contacts. Some from 10 years ago, some from 5 years ago. Those defintely aren’t in chronological order. Perhaps they got mixed up since I’ve changed phones a couple times? Well, the reason I’m saying this is I have a problem. I don’t know if all of my contacts are there, or just some of them. For example, there are contacts stored on my SIM card. Are they in the .vcf file? Also, I had a couple other .vcf files on my phone, don’t remember when why or how, but they’re there. Weirdly, the old ones are larger in size than this last one I just exported! WHY???? Oh by the way, there are no dates for when the contacts were added. I just had to guess by the person’s name and where I was living when I met them, when the contact was added. Whatever, it appears to be all of the contacts. I’ll just grab all the .vcf files off the phone. Also, the contacts were exported to the SD card, not the phone flash. So, if I just make a point to export my contacts every X days, then they’ll be in the SD card which means I can grab them in the event that the phone dies for real Fortunately, this is all I need to do.</summary></entry><entry><title type="html">Clean Javascript means Independent of Framework</title><link href="/2018/03/29/clean-javascript-means-independent-of-framework.html" rel="alternate" type="text/html" title="Clean Javascript means Independent of Framework" /><published>2018-03-29T00:00:00-07:00</published><updated>2018-03-29T00:00:00-07:00</updated><id>/2018/03/29/clean-javascript-means-independent-of-framework</id><content type="html" xml:base="/2018/03/29/clean-javascript-means-independent-of-framework.html">&lt;p&gt;I have no interest in climbing steep learning curves for all these javascript frameworks.  Also I don’t want to learn stuff that will be obsolete soon.&lt;br /&gt;
That’s why I like C programming and embedded systems.  Nothing has really changed.  You learn it once and you’re good to go.&lt;br /&gt;
Somewhere in the middle of these 2 is Clean Architecture, or just modularity.&lt;/p&gt;

&lt;p&gt;I feel like React kind of throws a wrench into this.  Let me talk it out to myself.&lt;br /&gt;
JSX is not HTML.  It can be transformed into HTML, but it’s not HTML.  It would be nice if it was, so HTML could be reusable.&lt;br /&gt;
But we can ignore this and leave that hassle for the front end person.&lt;br /&gt;
I should be able to prototype my UI without any CSS, and the HTML should be throwaway code.&lt;/p&gt;

&lt;p&gt;It’s frustrating trying to take what I want, or what I already have, and make it work with React.  So, let’s not do that.  What if all the React code looked exactly like the examples on the web?  That solves 2 problems:  first it takes away the pain of working with the framework, second it keeps my “core logic” separated.&lt;/p&gt;

&lt;h2 id=&quot;what-are-some-of-the-essential-elements-of-react--why-am-i-even-using-it&quot;&gt;What are some of the essential elements of React.  Why am I even using it?&lt;/h2&gt;
&lt;p&gt;The component class:&lt;br /&gt;
A component has state, props, lifecycle events, and a render.&lt;/p&gt;

&lt;p&gt;When the state changes, the component rerenders.&lt;br /&gt;
Pieces of state can be passed to children as props.&lt;/p&gt;

&lt;h1 id=&quot;interesting--porting-vanilla-js-to-react-&quot;&gt;Interesting:  Porting Vanilla JS to React !!!&lt;/h1&gt;
&lt;p&gt;I have a vanilla JS function that creates some elements using &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement()&lt;/code&gt;, sets some to be children, populates some innerHTML, then returns the top parent.&lt;br /&gt;
How do I port this same function to React?  Well…. looks like I can’t.&lt;br /&gt;
Take a look at the vanilla version here:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function createMessageListEntryFromMessageDesc(md) {

    var d = document.createElement('div')
    var playbutton = document.createElement('button')

    // Set innerHTML of Button
    playbutton.innerHTML = md.topic
    if( md.customtopic ) {
        playbutton.innerHTML = md.customtopic
    }

    // Set Color of Button
    var color
    if( md.project == &quot;1&quot; ) {
      color = &quot;blue&quot;
    }
    else {
      color = &quot;gray&quot;
    }

    // Set Opacity of Button
    var opacity
    if( md.listenedto == false )
        opacity = &quot;1&quot;
    else
        opacity = &quot;0.2&quot;

    playbutton.setAttribute(&quot;style&quot;,
      &quot;background-color: &quot;+color+&quot;;font-size : 32px; opacity:&quot;+opacity);

    d.appendChild(playbutton)
    return d
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pretty straight forward.  It uses &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement()&lt;/code&gt; , sets properties &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHTML&lt;/code&gt; and calls method &lt;code class=&quot;highlighter-rouge&quot;&gt;setAttribute()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;appendChild()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now see what I did to make it work with React.  (without JSX)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function testerdom(md) {

    var text = md.topic
    if( md.customtopic ) {
        text = md.customtopic
    }
    // Set Color of Button
    var color
    if( md.project == &quot;1&quot; ) {
      color = &quot;blue&quot;
    }
    else {
      color = &quot;gray&quot;
    }

    // Set Opacity of Button
    var opacity
    if( md.listenedto == false )
        opacity = &quot;1&quot;
    else
        opacity = &quot;0.2&quot;

    var props = {
      style:{
        backgroundColor:color,
        fontSize: '32px',
        opacity:opacity
      }
    }
    var playbutton = React.createElement('button',props,text)
    var d = React.createElement('div',null,playbutton)
    return d
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, actually in terms of lines of code it isn’t horrible.  Those if statements are only setting plain old variables, so I can just factor those out.  The lame part is that &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createElement()&lt;/code&gt; has a totally different API from &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement()&lt;/code&gt;.  The props, not only have to be converted to object like that, but it’s super annoying that the fields changed, eg. background-color changed to backgroundColor.  Being that I want to just do the bare minimum CSS, this is annoying.&lt;br /&gt;
1 more note, to set children of a node in react, you pass them into the parent when the parent is being created.  Notice the top level node, the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;, is created on the last line.  This is because React nodes are immutable.  In Plain JS, I could just &lt;code class=&quot;highlighter-rouge&quot;&gt;appendChild()&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;conversely-what-is-lacking-from-vanilla-js&quot;&gt;Conversely, what is lacking from Vanilla JS?&lt;/h2&gt;

&lt;h1 id=&quot;no-component-classes&quot;&gt;No Component Classes&lt;/h1&gt;
&lt;p&gt;What does a component class ala React do for me?&lt;br /&gt;
Lifecycle methods are cool.  With Vanilla JS, all I had was button onclick.&lt;/p&gt;

&lt;p&gt;Let’s do an experiment and mimic some of React’s behavior.&lt;br /&gt;
I want a HTML snippet like this&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=root /&amp;gt;
&amp;lt;script src=&quot;my-vanilla.js&quot;/&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The javascript executes on load.  It will render my “App Component” under root.
&lt;em&gt;Phew, fortunately there are no ‘ characters in there&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Crap.  I can load my HTML from a file into the div, using jQuery, but, I need to ensure that the (JS that sets the button onClick handlers) is executed after the div is loaded.  Otherwise javascript says the element is null.&lt;/p&gt;

&lt;p&gt;OK, got out of that using the callback function on jQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;.  After the HTML is loaded, the callback executes JS which will assign the click handlers.&lt;/p&gt;

&lt;p&gt;This is not what I intend to do, this is just a refactor/saving of my work before I write different stuff.&lt;br /&gt;
I’d like to have components ala React.  To do that, I need to dynamically generate the HTML, not just load static HTML into a #div.  Well not necessarily; actually, inside the static HTML, I could put in stub IDs in the divs, which could be set to application specific stuff, if the surrounding tag is identified.&lt;/p&gt;

&lt;p&gt;To summarize.  What I did was take all the (JS that sets the button onclick handlers) , wrap all those into a function.  That function is called in the callback of jquery load.  Another thing I did was bring the declarations of those DOM object variables to the global scope, and initialized them in the wrapper function.  This gives other functions access to those global DOM objects.  Note the DOM objects were previously global.  They became function scope when I wrapped them into a function.  So I brought out only the declarations of their names to the global scope.&lt;/p&gt;

&lt;h1 id=&quot;thinking-out-loud-how-to-component-ize-my-widget&quot;&gt;Thinking out loud, how to Component-ize my widget?&lt;/h1&gt;
&lt;p&gt;My widget displays a list of messages between two people.&lt;br /&gt;
Really, the only things that need to be identified are those 2 people.&lt;/p&gt;

&lt;p&gt;Let’s list out actually what’s there:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Button to load messages&lt;/li&gt;
  &lt;li&gt;Array of messages that are loaded&lt;/li&gt;
  &lt;li&gt;2 Divs to hold each displayed message, one A-to-B and another B-to-A&lt;/li&gt;
  &lt;li&gt;AJAX call, which POSTs a form with the 2 people&lt;/li&gt;
  &lt;li&gt;AJAX callback, takes the result, passes to a function that renders&lt;/li&gt;
  &lt;li&gt;Rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rendering needs to create DOM elements that have IDs in them, and onclick handlers that can access those IDs.  For example to delete a message, the ID of the message has to be passed to a function when a button is clicked.&lt;/p&gt;

&lt;h1 id=&quot;obvious-realization-1&quot;&gt;Obvious Realization #1:&lt;/h1&gt;
&lt;h2 id=&quot;to-have-multiple-instances-of-the-same-thing-you-need-classes&quot;&gt;To have multiple instances of the same thing, you need classes.&lt;/h2&gt;
&lt;h2 id=&quot;actually-wait-maybe-we-can-just-use-objects&quot;&gt;Actually wait, maybe we can just use objects?&lt;/h2&gt;
&lt;p&gt;As with any other language, class will give you stuff like constructors, methods that can use &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;,&lt;/p&gt;

&lt;h1 id=&quot;embarassing-realization-2&quot;&gt;Embarassing Realization #2:&lt;/h1&gt;
&lt;p&gt;https://blog.angular-university.io/really-understanding-javascript-closures/
Just…. read this.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have no interest in climbing steep learning curves for all these javascript frameworks. Also I don’t want to learn stuff that will be obsolete soon. That’s why I like C programming and embedded systems. Nothing has really changed. You learn it once and you’re good to go. Somewhere in the middle of these 2 is Clean Architecture, or just modularity. I feel like React kind of throws a wrench into this. Let me talk it out to myself. JSX is not HTML. It can be transformed into HTML, but it’s not HTML. It would be nice if it was, so HTML could be reusable. But we can ignore this and leave that hassle for the front end person. I should be able to prototype my UI without any CSS, and the HTML should be throwaway code. It’s frustrating trying to take what I want, or what I already have, and make it work with React. So, let’s not do that. What if all the React code looked exactly like the examples on the web? That solves 2 problems: first it takes away the pain of working with the framework, second it keeps my “core logic” separated. What are some of the essential elements of React. Why am I even using it? The component class: A component has state, props, lifecycle events, and a render. When the state changes, the component rerenders. Pieces of state can be passed to children as props.</summary></entry><entry><title type="html">Javascript Sucks: Greatest Hits</title><link href="/2018/03/28/javascript-sucks-greatest-hits.html" rel="alternate" type="text/html" title="Javascript Sucks:  Greatest Hits" /><published>2018-03-28T00:00:00-07:00</published><updated>2018-03-28T00:00:00-07:00</updated><id>/2018/03/28/javascript-sucks-greatest-hits</id><content type="html" xml:base="/2018/03/28/javascript-sucks-greatest-hits.html">&lt;h1 id=&quot;heres-a-collection-of-snippets&quot;&gt;Here’s a collection of snippets&lt;/h1&gt;

&lt;h3 id=&quot;consolelogobject-is-a-live-reference--in-other-words--it-doesnt-actually-log&quot;&gt;console.log(object) is a live reference.  in other words:  it doesn’t actually log.&lt;/h3&gt;
&lt;p&gt;https://stackoverflow.com/a/38660899/9325070&lt;/p&gt;
&lt;h3 id=&quot;solution-jsonstringifyobject-and-log-the-string&quot;&gt;Solution, JSON.stringify(object) and log the string.&lt;/h3&gt;
&lt;p&gt;https://stackoverflow.com/a/4293047/9325070&lt;/p&gt;

&lt;h1 id=&quot;finally-an-article-that-doesnt-suck&quot;&gt;Finally an article that doesn’t suck&lt;/h1&gt;
&lt;p&gt;https://shanetomlinson.com/2013/testing-javascript-frontend-part-1-anti-patterns-and-fixes/&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s a collection of snippets</summary></entry><entry><title type="html">Create React App, Take 2</title><link href="/2018/03/25/create-react-app-take-2.html" rel="alternate" type="text/html" title="Create React App, Take 2" /><published>2018-03-25T00:00:00-07:00</published><updated>2018-03-25T00:00:00-07:00</updated><id>/2018/03/25/create-react-app-take-2</id><content type="html" xml:base="/2018/03/25/create-react-app-take-2.html">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;
&lt;p&gt;I got a react practice app going a month ago.  Tic-tac-toe demo.  Used create-react-app.&lt;br /&gt;
It was running on the development server for a bit.  Then I shut it down, now I wanted to bring it back up.&lt;br /&gt;
I just tried to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt; whatever it is, and it totally crashed my VPS.&lt;br /&gt;
All of my open ssh sessions were getting these printed…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Message from syslogd@caseyjones at Mar 26 04:56:10 ...
 kernel:[445167.403797] BUG: soft lockup - CPU#0 stuck for 25s! [node:363]

Message from syslogd@caseyjones at Mar 26 04:56:36 ...
 kernel:[445193.778113] BUG: soft lockup - CPU#0 stuck for 25s! [postgres:414]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Woah.  Maybe I ran out of RAM?  That’s a likely cause.  If not, that’s crazy.&lt;/p&gt;

&lt;h1 id=&quot;anyway-ill-reboot-with-the-admin-console-and-do-a-fresh-create-react-app&quot;&gt;Anyway, I’ll reboot with the admin console and do a fresh create-react-app&lt;/h1&gt;
&lt;h1 id=&quot;why-is-it-taking-so-long-i-dont-remember-it-taking-so-long&quot;&gt;Why is it taking so long… I don’t remember it taking so long&lt;/h1&gt;
&lt;h1 id=&quot;wow-i-didnt-realize-it-was-200mb-fresh-install--its-all-in-node_modules&quot;&gt;Wow I didn’t realize it was 200MB, fresh install.  It’s all in node_modules&lt;/h1&gt;

&lt;p&gt;OK, now the dev server is up.&lt;br /&gt;
My goal is to take some built JS and put it in my existing project.&lt;br /&gt;
Let’s just get straight to that.  run a &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-did-npm-run-build-do-&quot;&gt;What did npm run build do ?&lt;/h1&gt;
&lt;p&gt;First, &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.  It took the source index.html, &lt;code class=&quot;highlighter-rouge&quot;&gt;public/index.html&lt;/code&gt; , removed all the comments and white space, replaced the template &lt;code class=&quot;highlighter-rouge&quot;&gt;%PUBLIC_URL%&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;.  Ahh here’s the cool part, at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; , the following was inserted:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/static/js/main.ee7b2412.js&quot;&amp;gt;&lt;/code&gt;.&lt;br /&gt;
And of course, our .js is in there.&lt;br /&gt;
Cool, let’s see if I can just pop that main.ee7b2412.js into my static site, and stick a couple HTML tags to load it up.&lt;br /&gt;
So, in the HTML I need the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;br /&gt;
And at the end of the body I need this: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;react-app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;cool-that-works&quot;&gt;Cool, that works.&lt;/h1&gt;
&lt;p&gt;But, can’t use this for development, because it takes way too long to build the production site.  I’ll have to go back to the development server and just start over there.&lt;/p&gt;

&lt;h1 id=&quot;ok-i-need-another-refresher-this-stuff-did-not-stick-from-last-time&quot;&gt;OK I need another refresher… this stuff did not stick from last time.&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Everything in React is JS.  No HTML *&lt;/li&gt;
  &lt;li&gt;What is a class?&lt;/li&gt;
  &lt;li&gt;A class has a constructor that takes in &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; and sets initial &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A class has a method &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; that returns JSX markup.  JSX is the part that’s like HTML.&lt;/li&gt;
  &lt;li&gt;A class has life cycle methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;i-tried-to-copy-paste-some-bootstrap-html-as-a-starting-point&quot;&gt;I tried to copy paste some Bootstrap HTML as a starting point&lt;/h1&gt;
&lt;p&gt;Paste it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function’s return.&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface I got a react practice app going a month ago. Tic-tac-toe demo. Used create-react-app. It was running on the development server for a bit. Then I shut it down, now I wanted to bring it back up. I just tried to run npm start or npm run start whatever it is, and it totally crashed my VPS. All of my open ssh sessions were getting these printed… ``` Message from syslogd@caseyjones at Mar 26 04:56:10 … kernel:[445167.403797] BUG: soft lockup - CPU#0 stuck for 25s! [node:363]</summary></entry><entry><title type="html">MongoDB Golang JSON (Mongo Alternatives?)</title><link href="/2018/03/17/mongodb-golang-json.html" rel="alternate" type="text/html" title="MongoDB Golang JSON (Mongo Alternatives?)" /><published>2018-03-17T00:00:00-07:00</published><updated>2018-03-17T00:00:00-07:00</updated><id>/2018/03/17/mongodb-golang-json</id><content type="html" xml:base="/2018/03/17/mongodb-golang-json.html">&lt;p&gt;I need a database, since working with a JSON file in the filesystem was not going far enough.  Need to query objects, delete objects, sort, etc.&lt;br /&gt;
Also I like the idea of using Golang to deal with JSON at the client-server interface, since it’s really easy in Golang.  Then Golang can talk to the database.&lt;br /&gt;
Initial googling suggested either postgres or Mongo, and I’m trying Mongo because I haven’t yet.&lt;/p&gt;

&lt;p&gt;These instructions worked: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Nice tutorial here.  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://medium.com/@maumribeiro/a-fullstack-epic-part-i-a-rest-api-in-go-accessing-mongo-db-608b46e969cd&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;main-concepts&quot;&gt;Main Concepts&lt;/h1&gt;
&lt;p&gt;Basically what happens is there’s a POST request, and the body contains JSON.  The JSON is unmarshalled into a golang struct.  The struct is passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;c.Repository.AddAlbum&lt;/code&gt;.&lt;br /&gt;
Repository is an empty struct with methods, eg. GetAlbums() , AddAlbum().  There are constants in the author’s code but I imagine you could put the constants eg. SERVER,DBNAME,DOCNAME in the Repository struct, so there could be 1 Repository per user.&lt;br /&gt;
The methods (eg. GetAlbums) will use the golang Mongo driver, mgo.  The database connection object has methods so we can do crazy syntax like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    c := session.DB(DBNAME).C(DOCNAME)
    results := Albums{}
    if err := c.Find(nil).All(&amp;amp;results); err != nil {
        fmt.Println(&quot;Failed to write results:&quot;, err)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s look at AddAlbum:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (r Repository) AddAlbum(album Album) bool {
    session, err := mgo.Dial(SERVER)
    defer session.Close()
    
    album.ID = bson.NewObjectId()
    session.DB(DBNAME).C(DOCNAME).Insert(album)

    if err != nil {
        log.Fatal(err)
        return false
    }
    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;An Album is passed to AddAlbum.  The ID field is generated here and set.  Then, the Album is Inserted into the database.  Cool!&lt;br /&gt;
UpdateAlbum works similarly except one line is different:&lt;br /&gt;
`    session.DB(DBNAME).C(DOCNAME).UpdateId(album.ID, album)` .  It finds the album with the ID, then replaces it.&lt;br /&gt;
I see now, basically what the database is doing is attaching an ID to each JSON object.  This is a critical missing piece, when handling JSON naively.&lt;/p&gt;

&lt;h1 id=&quot;ok-lets-install-it-on-the-server&quot;&gt;OK let’s install it on the server&lt;/h1&gt;
&lt;p&gt;Well just for fun let’s do it with a docker container.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker run -d -p 27017:27017 -v ~/data:/data/db mongo&lt;/code&gt; easy.&lt;br /&gt;
Crap, 366MB image.  Another 100MB to install the client tools.  Maybe I can get away with only using the golang libraries?&lt;br /&gt;
Cool, this minimal snippet worked!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
  fmt.Println(&quot;Hello1&quot;)
  session, err := mgo.Dial(&quot;localhost&quot;)
  if err != nil {
    fmt.Println(&quot;Hello2&quot;)
    panic(err)
  }
  defer session.Close()
  fmt.Println(&quot;Hello3&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;now-the-internet-says-check-security&quot;&gt;Now, the Internet says check security&lt;/h1&gt;
&lt;p&gt;And yes, the MongoDB server is accessible from the public.&lt;br /&gt;
Let’s use a docker-compose.yml to put in our own .conf.&lt;br /&gt;
Oh, weird, turns out the original installation had already set bindaddress to 127.0.0.1.  So… even though the Mongo server only accepts connections from 127.0.0.1, because it’s in a Docker container, it is still reachable from the outside world?  Does Docker change the source IP in the port forward?  Does that mean this same issue will happen for any server inside a container?&lt;/p&gt;

&lt;p&gt;OK my solution now is to try &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 127.0.0.1:27017:27017&lt;/code&gt; .  Yes!! That is the solution.  Now I am unable to access from outside.  And I am still able to access from the simple golang snippet above.&lt;/p&gt;

&lt;h1 id=&quot;hmm-weirdness-getting-a-flask-container-to-talk-to-a-mongo-container&quot;&gt;Hmm, weirdness getting a Flask container to talk to a Mongo container.&lt;/h1&gt;
&lt;p&gt;I’m using Flask as my API server.  It is in a container.  It receives requests and then executes shell scripts.  The shell scripts are located in a host directory that is volume mounted to the container.  I compiled the exact golang dummy program above and put it in that directory.  It executes fine on the host, but when executing in the container, the Mongo server cannot be found.&lt;br /&gt;
At first I thought, there is no port forwarding that gives the Flask container access to localhost:27017 on the host.  The Flask container did have 9002:5000, which makes the Flask default port 5000 accessible by the public at port 9002.  So I tried to do a 27017:27017 in the Flask container.  But no!  Docker could not bind to 27017, because Mongo was already bound to it.&lt;br /&gt;
So, I still don’t understand this but my solution was to change the Flask container to use Host Networking, ie. &lt;code class=&quot;highlighter-rouge&quot;&gt;network_mode:host&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;oh-no-that-ended-up-breaking-flask&quot;&gt;Oh no… that ended up breaking Flask!&lt;/h1&gt;
&lt;p&gt;Turns out, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;network_mode:host&lt;/code&gt; overrides the port forward I had &lt;code class=&quot;highlighter-rouge&quot;&gt;9002:5000&lt;/code&gt;, since the Flask server stopped responding to 9002, and started responding to 5000!&lt;/p&gt;
&lt;h1 id=&quot;ok-i-will-just-configure-the-flask-port--using-network_modehost&quot;&gt;OK I will just configure the Flask port.  Using network_mode:host.&lt;/h1&gt;
&lt;p&gt;Ugh this sucks.  I couldn’t figure out how to block public access to Mongo.  So I actually put Mongo in the docker network, doing a port publish &lt;code class=&quot;highlighter-rouge&quot;&gt;22222:21017&lt;/code&gt;.  The Flask is using &lt;code class=&quot;highlighter-rouge&quot;&gt;network_mode:host&lt;/code&gt;.  I did verify Flask can access Mongo, and the public cannot.&lt;/p&gt;

&lt;h1 id=&quot;im-reading-stupid-hate-comments-about-mongodb-why&quot;&gt;I’m reading stupid hate comments about MongoDB… why?&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://getstream.io/blog/building-a-performant-api-using-go-and-cassandra/&lt;/code&gt;
I looked at cassandra in this article and wow… I have no desire to use it after looking at the code examples.&lt;/p&gt;</content><author><name></name></author><summary type="html">I need a database, since working with a JSON file in the filesystem was not going far enough. Need to query objects, delete objects, sort, etc. Also I like the idea of using Golang to deal with JSON at the client-server interface, since it’s really easy in Golang. Then Golang can talk to the database. Initial googling suggested either postgres or Mongo, and I’m trying Mongo because I haven’t yet. These instructions worked: https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04 Nice tutorial here. https://medium.com/@maumribeiro/a-fullstack-epic-part-i-a-rest-api-in-go-accessing-mongo-db-608b46e969cd Main Concepts Basically what happens is there’s a POST request, and the body contains JSON. The JSON is unmarshalled into a golang struct. The struct is passed to c.Repository.AddAlbum. Repository is an empty struct with methods, eg. GetAlbums() , AddAlbum(). There are constants in the author’s code but I imagine you could put the constants eg. SERVER,DBNAME,DOCNAME in the Repository struct, so there could be 1 Repository per user. The methods (eg. GetAlbums) will use the golang Mongo driver, mgo. The database connection object has methods so we can do crazy syntax like this: c := session.DB(DBNAME).C(DOCNAME) results := Albums{} if err := c.Find(nil).All(&amp;amp;results); err != nil { fmt.Println(&quot;Failed to write results:&quot;, err) } Let’s look at AddAlbum: ``` func (r Repository) AddAlbum(album Album) bool { session, err := mgo.Dial(SERVER) defer session.Close() album.ID = bson.NewObjectId() session.DB(DBNAME).C(DOCNAME).Insert(album)</summary></entry><entry><title type="html">Twilio, Tokbox, Vidyo: Demos</title><link href="/2018/03/12/twilio-tokbox-vidyo-demos.html" rel="alternate" type="text/html" title="Twilio, Tokbox, Vidyo:  Demos" /><published>2018-03-12T00:00:00-07:00</published><updated>2018-03-12T00:00:00-07:00</updated><id>/2018/03/12/twilio-tokbox-vidyo-demos</id><content type="html" xml:base="/2018/03/12/twilio-tokbox-vidyo-demos.html">&lt;h1 id=&quot;vidyo&quot;&gt;Vidyo&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Vidyo PaaS does not include the Media Server (Media Bridge) as part of the platform.  Vidyo does provide a Media Bridge docker image, which the application can use.  &lt;code class=&quot;highlighter-rouge&quot;&gt;To record or live-stream multiple Vidyo conferences simultaneously, you need to create and deploy a separate Docker container for each recording and live stream.&lt;/code&gt; .  Woah, weird use of Docker.  Using docker exec to control the media bridge.  Every recording needs to have a different config file, specifying the path and filename for the recording, plus other options.  What??&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yeah… no thanks.&lt;/p&gt;

&lt;h1 id=&quot;tokbox&quot;&gt;Tokbox&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Hmm, it markets the ability to record and playback.  Mostly takes about “archiving” , hardly mentions playback at all.  Something’s fishy about it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;twilio&quot;&gt;Twilio&lt;/h1&gt;

&lt;h1 id=&quot;sinch--red5&quot;&gt;Sinch?  Red5?&lt;/h1&gt;

&lt;h1 id=&quot;hmm-the-server-needs-to-be-able-to-be-a-peer-in-a-peer2peer-connection&quot;&gt;Hmm, the server needs to be able to be a peer in a peer2peer connection.&lt;/h1&gt;
&lt;p&gt;This is the only way the server can stream back the recording.
Otherwise, the only way a client can play the recording is to download it.
Sure this could happen automatically with a AJAX call.&lt;br /&gt;
Actually I just tried it, a HTML5 audio tag with the src pointing to a URL.  Works pretty good.&lt;/p&gt;</content><author><name></name></author><summary type="html">Vidyo Vidyo PaaS does not include the Media Server (Media Bridge) as part of the platform. Vidyo does provide a Media Bridge docker image, which the application can use. To record or live-stream multiple Vidyo conferences simultaneously, you need to create and deploy a separate Docker container for each recording and live stream. . Woah, weird use of Docker. Using docker exec to control the media bridge. Every recording needs to have a different config file, specifying the path and filename for the recording, plus other options. What?? Yeah… no thanks. Tokbox Hmm, it markets the ability to record and playback. Mostly takes about “archiving” , hardly mentions playback at all. Something’s fishy about it. Twilio Sinch? Red5? Hmm, the server needs to be able to be a peer in a peer2peer connection. This is the only way the server can stream back the recording. Otherwise, the only way a client can play the recording is to download it. Sure this could happen automatically with a AJAX call. Actually I just tried it, a HTML5 audio tag with the src pointing to a URL. Works pretty good.</summary></entry><entry><title type="html">Janus: Refactoring a Plugin</title><link href="/2018/03/11/janus-refactoring-a-plugin.html" rel="alternate" type="text/html" title="Janus: Refactoring a Plugin" /><published>2018-03-11T00:00:00-08:00</published><updated>2018-03-11T00:00:00-08:00</updated><id>/2018/03/11/janus-refactoring-a-plugin</id><content type="html" xml:base="/2018/03/11/janus-refactoring-a-plugin.html">&lt;p&gt;The sample Janus Plugins are written in C and they are very good.&lt;br /&gt;
But, it’s not very readable.  I’d like a higher level description of what the sample plugin app does.  Though the documentation is good, I still want a complete, high level description.  I’ll do this by refactoring, which will also allow me to take out reusable snippets.&lt;/p&gt;

&lt;p&gt;Particularly looking to refactor to improve:  separation of concerns  (single responsibility) .  Make it more obvious where the configuration file comes from.&lt;/p&gt;

&lt;h1 id=&quot;pre--notes&quot;&gt;Pre- Notes&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Because these plugins are .so shared modules, I should be able to build the plugin by itself, then test with a real Janus instance.  Janus’ build script builds the sample plugins with it, but that’s just for convenience.  As a product developer, what I would do is have a separate build environment, git repo, etc. for my new plugin, build it, then deploy it to the /path/to/janus/lib/janus/plugins/  (I believe that’s where you deploy them?)&lt;/li&gt;
  &lt;li&gt;Oh crap, it’s built with autotools, I forgot.  I have no idea, and no desire to learn autotools.  Hmm how do I build the plugin?&lt;/li&gt;
  &lt;li&gt;Ah yes, thank you https://github.com/mquander/janus-helloworld-plugin .  I will fork it!  Then copy over the recordplaytest demo!&lt;/li&gt;
  &lt;li&gt;Ah, it didn’t include any Janus headers, so those must come from the Janus installation on the server.  I don’t have Janus installed on my laptop. Let’s just make sure by attempting a build on my laptop.   Need jansson.  Ah yes, of course, plugins/plugin.h not found.  Let’s make sure that exists on the server installation.  Well it’s actually in /path/to/janus/include/janus/plugins .  Ah, checking the gcc -I flags, yes, it’s in there.  Good!  Eh, let’s build it on the cloud and then hook up a Jenkins later.&lt;/li&gt;
  &lt;li&gt;Cool, it builds on my server that has Janus.  Let’s… see if make install followed by restarting Janus will pick up the new plugin!
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JANUS AudioBridge plugin initialized!
Loading plugin 'libjanus_helloworld.so'...
JANUS hello world plugin initialized!
Loading plugin 'libjanus_recordplay.so'...
JANUS Record&amp;amp;Play plugin initialized!
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;yay&quot;&gt;Yay&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;Quick side note, to clean up the build I did a &lt;code class=&quot;highlighter-rouge&quot;&gt;git clean -f -d -x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now I can figure out how to change the name of the plugin and copy in the source from recordplaytest.  Well, doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -ir hello *&lt;/code&gt; , excluding janus_helloworld.c , only shows a few matches.  That’s cool, the name is not significant.  OK, it worked, but there are still “hello world” occurences in the source itself.&lt;/li&gt;
  &lt;li&gt;Before I copy paste the source from the recordplay plugin, let’s look at that &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i hello *&lt;/code&gt; again.  Lots of matches, but which of those actually matter?  The #defines at the top, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;#define JANUS_HELLOWORLD_PACKAGE &quot;janus.plugin.helloworld&quot;&lt;/code&gt; don’t need to change, because they are simply returned by the getters.  In other words, I can copy paste the source from recordplay_plugin, the names won’t be HELLO anymore, they’ll be RECORDPLAY, and this is OK.
The interface implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_plugin&lt;/code&gt; is a struct of function pointers, so the names don’t matter, they’re just function pointers.  The symbol name of that implementation is &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_helloworld_plugin&lt;/code&gt; , ie. &lt;code class=&quot;highlighter-rouge&quot;&gt;static janus_plugin janus_helloworld_plugin&lt;/code&gt; .  A pointer to this struct is returned by the &lt;code class=&quot;highlighter-rouge&quot;&gt;*create()&lt;/code&gt; function.&lt;br /&gt;
So, my conclusion is, I will only have to change the name of &lt;code class=&quot;highlighter-rouge&quot;&gt;janus.plugin.recordplay&lt;/code&gt; or whatever it is, to something else, so the plugin namespace does not collide.&lt;/li&gt;
  &lt;li&gt;Now I can copy paste the source.  Ah crap.  There are headers in janus-gateway repo that have to be included in the build.  I don’t know how to do that in autotools.  Dang!   Oh, looking at Makefile.am , it appears I can specify a -I flag.  Oh, I don’t need to go to the source, the headers are exported in the Janus install.  Oh, the headers directory is already there!  Problem was the &lt;code class=&quot;highlighter-rouge&quot;&gt;../blah.h&lt;/code&gt; should be &lt;code class=&quot;highlighter-rouge&quot;&gt;blah.h&lt;/code&gt; .  Changing that…  OK, I built it again with &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, no need to do any more autotools stuff.  I get an error, plugin could not be initialized because no configuration file could be read.  Let’s copy one in there… &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/janus/etc/janus/&lt;/code&gt;  Yay, now it works!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;beginning-to-understand-the-plugin&quot;&gt;Beginning to understand the plugin&lt;/h1&gt;
&lt;p&gt;The first function definitions are the static helper functions, which is OK convention.  The first plugin implementation function is &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;.  This is called by Janus when Janus starts.  I saw this before, when Janus failed to start because a plugin couldn’t be initialized.  &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; first reads the configuration file, which is assumed to have &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;%s/%s.cfg&quot; format.  The path to the config files is an argument to &lt;/code&gt;init()&lt;code class=&quot;highlighter-rouge&quot;&gt; , which somehow must come from Janus.  The config file includes a path to where the recordings are stored.  That path is stored in a variable.  &lt;/code&gt;notify_events&lt;code class=&quot;highlighter-rouge&quot;&gt; is a static boolean, which is checked later before doing &lt;/code&gt;gateway-&amp;gt;notify_event` for sending an event.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;recordings = g_hast_table_new_full&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions = g_hst_table_new&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;messages = g_async_queue_new_full&lt;/code&gt; .&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handler_thread = g_thread_try_new&lt;/code&gt; starts a thread with function &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_handler&lt;/code&gt;  .  Oh god, that function is a monster, 421 lines, tons of if statements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;for-reference-here-is-the-plugin-interface-definition&quot;&gt;For reference, here is the plugin interface definition&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Plugin setup */
static janus_plugin janus_recordplay_plugin =
  JANUS_PLUGIN_INIT (
    .init = janus_recordplay_init,
    .destroy = janus_recordplay_destroy,

    .get_api_compatibility = janus_recordplay_get_api_compatibility,
    .get_version = janus_recordplay_get_version,
    .get_version_string = janus_recordplay_get_version_string,
    .get_description = janus_recordplay_get_description,
    .get_name = janus_recordplay_get_name,
    .get_author = janus_recordplay_get_author,
    .get_package = janus_recordplay_get_package,
    
    .create_session = janus_recordplay_create_session,
    .handle_message = janus_recordplay_handle_message,
    .setup_media = janus_recordplay_setup_media,
    .incoming_rtp = janus_recordplay_incoming_rtp,
    .incoming_rtcp = janus_recordplay_incoming_rtcp,
    .incoming_data = janus_recordplay_incoming_data,
    .slow_link = janus_recordplay_slow_link,
    .hangup_media = janus_recordplay_hangup_media,
    .destroy_session = janus_recordplay_destroy_session,
    .query_session = janus_recordplay_query_session,
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int janus_recordplay_init(janus_callbacks *callback, const char *onfig_path);
void janus_recordplay_destroy(void);
int janus_recordplay_get_api_compatibility(void);
int janus_recordplay_get_version(void);
const char *janus_recordplay_get_version_string(void);
const char *janus_recordplay_get_description(void);
const char *janus_recordplay_get_name(void);
const char *janus_recordplay_get_author(void);
const char *janus_recordplay_get_package(void);
void janus_recordplay_create_session(janus_plugin_session *handle, int *error);
struct janus_plugin_result *janus_recordplay_handle_message(janus_plugin_session *handle, char *transaction, json_t *message, json_t *jsep);
void janus_recordplay_setup_media(janus_plugin_session *handle);
void janus_recordplay_incoming_rtp(janus_plugin_session *handle, int video, char *buf, int len);
void janus_recordplay_incoming_rtcp(janus_plugin_session *handle, int video, char *buf, int len);
void janus_recordplay_incoming_data(janus_plugin_session *handle, char *buf, int len);
void janus_recordplay_slow_link(janus_plugin_session *handle, int uplink, int video);
void janus_recordplay_hangup_media(janus_plugin_session *handle);
void janus_recordplay_destroy_session(janus_plugin_session *handle, int *error);
json_t *janus_recordplay_query_session(janus_plugin_session *handle);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Ah very nice, these function declarations have the same order as the struct def.&lt;br /&gt;
Now I feel bad for saying it was unreadable.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Notice, the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; function takes a callback struct and a config path.  The other functions eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;incoming_rtp&lt;/code&gt; take a &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_plugin_session&lt;/code&gt;.  Let’s see what they are.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-is-janus_plugin_session-&quot;&gt;What is janus_plugin_session ?&lt;/h1&gt;
&lt;p&gt;Notice there is  &lt;code class=&quot;highlighter-rouge&quot;&gt;void janus_recordplay_create_session(janus_plugin_session *handle, int *error);&lt;/code&gt; .  This is called by Janus and implemented by the plugin.  What does it do in recordplay plugin?  Here it is&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void janus_recordplay_create_session(janus_plugin_session *handle, int *error) {
  if(g_atomic_int_get(&amp;amp;stopping) || !g_atomic_int_get(&amp;amp;initialized)) {
    *error = -1;
    return;
  } 
  janus_recordplay_session *session = g_malloc0(sizeof(janus_recordplay_session));
  session-&amp;gt;handle = handle;
... populate session fields
  janus_mutex_init(&amp;amp;session-&amp;gt;rec_mutex);
  session-&amp;gt;destroyed = 0;
  g_atomic_int_set(&amp;amp;session-&amp;gt;hangingup, 0);
... populate session fields
  handle-&amp;gt;plugin_handle = session;
  janus_mutex_lock(&amp;amp;sessions_mutex);
  g_hash_table_insert(sessions, handle, session);
  janus_mutex_unlock(&amp;amp;sessions_mutex);

  return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is convoluted, I don’t get it.  What’s happening here is, the recordplay plugin has a hash table called &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions&lt;/code&gt;.  A &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_session&lt;/code&gt; is malloc’d , populated, then stored in the hash table by reference.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_incoming_rtp&lt;/code&gt; ,&lt;/p&gt;</content><author><name></name></author><summary type="html">The sample Janus Plugins are written in C and they are very good. But, it’s not very readable. I’d like a higher level description of what the sample plugin app does. Though the documentation is good, I still want a complete, high level description. I’ll do this by refactoring, which will also allow me to take out reusable snippets. Particularly looking to refactor to improve: separation of concerns (single responsibility) . Make it more obvious where the configuration file comes from. Pre- Notes Because these plugins are .so shared modules, I should be able to build the plugin by itself, then test with a real Janus instance. Janus’ build script builds the sample plugins with it, but that’s just for convenience. As a product developer, what I would do is have a separate build environment, git repo, etc. for my new plugin, build it, then deploy it to the /path/to/janus/lib/janus/plugins/ (I believe that’s where you deploy them?) Oh crap, it’s built with autotools, I forgot. I have no idea, and no desire to learn autotools. Hmm how do I build the plugin? Ah yes, thank you https://github.com/mquander/janus-helloworld-plugin . I will fork it! Then copy over the recordplaytest demo! Ah, it didn’t include any Janus headers, so those must come from the Janus installation on the server. I don’t have Janus installed on my laptop. Let’s just make sure by attempting a build on my laptop. Need jansson. Ah yes, of course, plugins/plugin.h not found. Let’s make sure that exists on the server installation. Well it’s actually in /path/to/janus/include/janus/plugins . Ah, checking the gcc -I flags, yes, it’s in there. Good! Eh, let’s build it on the cloud and then hook up a Jenkins later. Cool, it builds on my server that has Janus. Let’s… see if make install followed by restarting Janus will pick up the new plugin! JANUS AudioBridge plugin initialized! Loading plugin 'libjanus_helloworld.so'... JANUS hello world plugin initialized! Loading plugin 'libjanus_recordplay.so'... JANUS Record&amp;amp;Play plugin initialized! Yay Quick side note, to clean up the build I did a git clean -f -d -x Now I can figure out how to change the name of the plugin and copy in the source from recordplaytest. Well, doing a grep -ir hello * , excluding janus_helloworld.c , only shows a few matches. That’s cool, the name is not significant. OK, it worked, but there are still “hello world” occurences in the source itself. Before I copy paste the source from the recordplay plugin, let’s look at that grep -i hello * again. Lots of matches, but which of those actually matter? The #defines at the top, eg. #define JANUS_HELLOWORLD_PACKAGE &quot;janus.plugin.helloworld&quot; don’t need to change, because they are simply returned by the getters. In other words, I can copy paste the source from recordplay_plugin, the names won’t be HELLO anymore, they’ll be RECORDPLAY, and this is OK. The interface implementation, janus_plugin is a struct of function pointers, so the names don’t matter, they’re just function pointers. The symbol name of that implementation is janus_helloworld_plugin , ie. static janus_plugin janus_helloworld_plugin . A pointer to this struct is returned by the *create() function. So, my conclusion is, I will only have to change the name of janus.plugin.recordplay or whatever it is, to something else, so the plugin namespace does not collide. Now I can copy paste the source. Ah crap. There are headers in janus-gateway repo that have to be included in the build. I don’t know how to do that in autotools. Dang! Oh, looking at Makefile.am , it appears I can specify a -I flag. Oh, I don’t need to go to the source, the headers are exported in the Janus install. Oh, the headers directory is already there! Problem was the ../blah.h should be blah.h . Changing that… OK, I built it again with make, no need to do any more autotools stuff. I get an error, plugin could not be initialized because no configuration file could be read. Let’s copy one in there… /path/to/janus/etc/janus/ Yay, now it works! Beginning to understand the plugin The first function definitions are the static helper functions, which is OK convention. The first plugin implementation function is init. This is called by Janus when Janus starts. I saw this before, when Janus failed to start because a plugin couldn’t be initialized. init first reads the configuration file, which is assumed to have &quot;%s/%s.cfg&quot; format. The path to the config files is an argument to init() , which somehow must come from Janus. The config file includes a path to where the recordings are stored. That path is stored in a variable. notify_events is a static boolean, which is checked later before doing gateway-&amp;gt;notify_event` for sending an event. Now, recordings = g_hast_table_new_full , sessions = g_hst_table_new , messages = g_async_queue_new_full . handler_thread = g_thread_try_new starts a thread with function janus_recordplay_handler . Oh god, that function is a monster, 421 lines, tons of if statements.</summary></entry><entry><title type="html">Janus Notes</title><link href="/2018/03/09/janus-notes.html" rel="alternate" type="text/html" title="Janus Notes" /><published>2018-03-09T00:00:00-08:00</published><updated>2018-03-09T00:00:00-08:00</updated><id>/2018/03/09/janus-notes</id><content type="html" xml:base="/2018/03/09/janus-notes.html">&lt;p&gt;It appears that Janus is what I want.  I may have to apply browser-side recording, but first I’ll see how far Janus goes with server side.&lt;br /&gt;
Apparently, browsers can connect peer to peer to a Janus server.&lt;/p&gt;

&lt;p&gt;Obviously with all the acquisitions happening in this space, I’d like my app to be independent of Janus, source-wise and functionality-wise.&lt;/p&gt;

&lt;p&gt;Well I guess the first thing to do is install it on a server.&lt;br /&gt;
Let’s compile it for fun.&lt;/p&gt;

&lt;h1 id=&quot;compiling-janus-from-the-readme&quot;&gt;Compiling Janus (from the README)&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/meetecho/janus-gateway.git
cd janus-gateway
sh autogen.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;My debian 8 VPS didn’t have autoreconf.  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install autoconf&lt;/code&gt;&lt;br /&gt;
Then got this error &lt;code class=&quot;highlighter-rouge&quot;&gt;configure.ac:5: error: possibly undefined macro: AC_ENABLE_SHARED&lt;/code&gt;  , &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libtool&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install gettext&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install pkg-config&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure --prefix=/opt/janus --disable-websockets --disable-data-channels --disable-rabbitmq --disable-mqtt&lt;/code&gt;&lt;br /&gt;
Now tells me the packages I’m missing.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No package 'glib-2.0' found
No package 'nice' found
No package 'jansson' found
No package 'libssl' found
No package 'libcrypto' found
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hmm, didn’t know about jansson, that’s cool, a JSON library in C.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install glib-2.0
sudo apt install libjansson-dev
sudo apt install libnice-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Oh, somehow I missed this, I’ll just run the one liner from the README&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	aptitude install libmicrohttpd-dev libjansson-dev libnice-dev \
		libssl-dev libsrtp-dev libsofia-sip-ua-dev libglib2.0-dev \
		libopus-dev libogg-dev libcurl4-openssl-dev pkg-config gengetopt \
		libtool automake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As mentioned in README, apt install libsrtp didn’t work.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	wget https://github.com/cisco/libsrtp/archive/v1.5.4.tar.gz
	tar xfv v1.5.4.tar.gz
	cd libsrtp-1.5.4
	./configure --prefix=/usr --enable-openssl
	make shared_library &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Nice, here’s my configure output&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libsrtp version:           1.5.x
SSL/crypto library:        OpenSSL
DTLS set-timeout:          not available
DataChannels support:      no
Recordings post-processor: no
TURN REST API client:      yes
Doxygen documentation:     no
Transports:
    REST (HTTP/HTTPS):     yes
    WebSockets:            no
    RabbitMQ:              no
    MQTT:                  no
    Unix Sockets:          yes
Plugins:
    Echo Test:             yes
    Streaming:             yes
    Video Call:            yes
    SIP Gateway (Sofia):   yes
    SIP Gateway (libre):   no
    NoSIP (RTP Bridge):    yes
    Audio Bridge:          yes
    Video Room:            yes
    Voice Mail:            yes
    Record&amp;amp;Play:           yes
    Text Room:             yes
Event handlers:
    Sample event handler:  yes
    RabbitMQ event handler:no
JavaScript modules:        no
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Alright, a make, sudo make install, sudo make configs all worked!&lt;/p&gt;

&lt;p&gt;OK, now how do I connect to Janus?&lt;/p&gt;

&lt;h1 id=&quot;connecting-to-janus&quot;&gt;Connecting to Janus&lt;/h1&gt;

&lt;p&gt;I’m running the audiobridge demo.  The audiobridge.js has a hard coded URL for the Janus server.  I’m using this locally, ie. file:// , which I know only works on Firefox right now.  But this code won’t work…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var server = null;
if(window.location.protocol === 'http:')
  server = &quot;http://&quot; + window.location.hostname + &quot;:8088/janus&quot;;
else
  server = &quot;https://&quot; + window.location.hostname + &quot;:8089/janus&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So I will change this to set server = http://myexplicitURL:8088 ?&lt;/p&gt;

&lt;p&gt;Oh, first I have to run Janus.  It says &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP webserver started (port 8088, /janus path listener)...&lt;/code&gt;
Oh nice, some debugging help.  I point my browser to mydomain:8088 and it says Invalid URL.  Then I try mydomain:8088/janus and I get Invalid session.  That looks good!  Let’s change the audiobridge.js to that.&lt;/p&gt;

&lt;p&gt;Oh snap!  Getting some good logs in the console.&lt;br /&gt;
Dang, I can’t connect another peer because I loaded this locally.  Instead of bothering to copy the files to another machine, I should just serve them.&lt;/p&gt;

&lt;h1 id=&quot;connecting-to-janus-with-2-peers&quot;&gt;Connecting to Janus with 2 peers&lt;/h1&gt;
&lt;p&gt;So, not surpisingly, I’m getting issues with HTTPS.  Somehow I have to get it right, Janus over HTTPS, webserver over HTTPS, HTTPS proxy to a Janus over HTTP, whatever.  Well, I figured out how to get Beego framework to serve static pages over HTTPS, so that’ll do.  Don’t know what to do with Janus.  Let’s just put the static page in a running Beego server and see what happens.&lt;/p&gt;</content><author><name></name></author><summary type="html">It appears that Janus is what I want. I may have to apply browser-side recording, but first I’ll see how far Janus goes with server side. Apparently, browsers can connect peer to peer to a Janus server. Obviously with all the acquisitions happening in this space, I’d like my app to be independent of Janus, source-wise and functionality-wise.</summary></entry></feed>