<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-04-29T14:19:53-07:00</updated><id>/</id><title type="html">Bootladder News</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Updating my Jekyll deploy process</title><link href="/2018/04/29/updating-my-jekyll-deploy-process.html" rel="alternate" type="text/html" title="Updating my Jekyll deploy process" /><published>2018-04-29T00:00:00-07:00</published><updated>2018-04-29T00:00:00-07:00</updated><id>/2018/04/29/updating-my-jekyll-deploy-process</id><content type="html" xml:base="/2018/04/29/updating-my-jekyll-deploy-process.html">&lt;h1 id=&quot;this-is-according-to-common-practices-in-the-jekyll-documentation&quot;&gt;This is according to common practices in the jekyll documentation.&lt;/h1&gt;
&lt;p&gt;also another article about jekyllizing a html template site was good.&lt;br /&gt;
Following these instructions to create the jekyll install initially: https://jekyllrb.com/tutorials/convert-site-to-jekyll/ .&lt;/p&gt;

&lt;p&gt;The main point is, put layouts in &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/&lt;/code&gt; , stub the content with curly braces `&amp;lt;article class=&quot;post&quot; itemscope itemtype=&quot;http://schema.org/BlogPosting&quot;&amp;gt;&lt;/p&gt;

&lt;header class=&quot;post-header&quot;&gt;
    &lt;h1 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;Jenkins: Job DSL&lt;/h1&gt;
    &lt;p class=&quot;post-meta&quot;&gt;&lt;time datetime=&quot;2018-04-22T00:00:00-07:00&quot; itemprop=&quot;datePublished&quot;&gt;Apr 22, 2018&lt;/time&gt;&lt;/p&gt;
  &lt;/header&gt;

&lt;div class=&quot;post-content&quot; itemprop=&quot;articleBody&quot;&gt;
    &lt;p&gt;I don’t know if it’s my low-end VPS, java, or what, but Jenkins is &lt;strong&gt;slow&lt;/strong&gt;.&lt;br /&gt;
To create a new job, edit a job, really just about everything is slow.&lt;br /&gt;
Right now I want to speed up:  creating a job, editing a job, viewing a job’s definition.&lt;br /&gt;
Obviously Job DSL is the answer.&lt;/p&gt;

&lt;p&gt;[https://github.com/jenkinsci/job-dsl-plugin/wiki/Tutorial—Using-the-Jenkins-Job-DSL]&lt;/p&gt;

&lt;h1 id=&quot;install-jobdsl-from-plugin-manager-this-is-obvious&quot;&gt;Install JobDSL from Plugin Manager (this is obvious)&lt;/h1&gt;

&lt;h1 id=&quot;intro-to-job-dsl&quot;&gt;Intro to Job DSL&lt;/h1&gt;
&lt;p&gt;First you manually create a job called the seed job.  In the build step,
instead of executing a script in the shell, select to run the Job DSL script.&lt;br /&gt;
The Job DSL script is defining the new jobs that will be created as a result of
running this seed job.&lt;/p&gt;

&lt;p&gt;Run the seed job.  It generates jobs.  It does not run them, or check if they are defined sensibly.
Here is the console output.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started by user engineering
Building in workspace /var/jenkins_home/workspace/job-dsl-1
Processing provided DSL script
Added items:
    GeneratedJob{name='DSL-Tutorial-1-Test'}
Finished: SUCCESS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now go to the homepage of the seed job.  Notice it shows “Generated Items:” with the generated job.&lt;br /&gt;
Now go to the homepage of Jenkins.  It shows the generated job, the seed job, and the existing manually created jobs.&lt;/p&gt;

&lt;h1 id=&quot;huh-this-does-not-help-me&quot;&gt;Huh… This does not help me!&lt;/h1&gt;
&lt;p&gt;Let’s think this through.  What do I need?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Single Point of Truth (SPOT) for viewing and editing a job&lt;/li&gt;
  &lt;li&gt;Atleast a file on the jenkins machine for the above.  Optional/better: git repo&lt;/li&gt;
  &lt;li&gt;The SPOT must contain:
    &lt;ul&gt;
      &lt;li&gt;remote URL of git repo&lt;/li&gt;
      &lt;li&gt;Bitbucket, Github, Slack webhooks&lt;/li&gt;
      &lt;li&gt;shell snippet for processing the output of a build&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks like all the above is supported.&lt;br /&gt;
What I don’t like is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To edit job definitions, must edit the seed job
    &lt;ul&gt;
      &lt;li&gt;To solve this, I’ll need to put the Job DSL script in the filesystem&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After editing job definitions, must re-generate the jobs
    &lt;ul&gt;
      &lt;li&gt;With the Job DSL script in the filesystem, I’ll be editing
the job in the filesystem, maybe without jenkins open.
I can put a timer on the job trigger.  I should be able
to stick a shell script in there which I can execute after editing,
which should run the job to generate all the jobs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, in the Job Configuration, change &lt;code class=&quot;highlighter-rouge&quot;&gt;Use the provided DSL script&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Look on Filesystem&lt;/code&gt;.&lt;br /&gt;
It says the scripts must be located in the Workspace.  But wildcards &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; can be used.&lt;br /&gt;
My Jenkins is in a docker container, but that should be OK since all the workspaces are
volume mapped.&lt;/p&gt;

&lt;p&gt;OK, I put a Job DSL script in there.  I then manually build the Seed Job and it fails.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR: script not yet approved for use&lt;/code&gt;&lt;br /&gt;
OK, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Manage Jenkins --&amp;gt; In-process Script Approval&lt;/code&gt;, and it’s there.&lt;/p&gt;

&lt;p&gt;Cool!  Works as expected, including the deleting of the old job which I checked the box for.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started by user engineering
Building in workspace /var/jenkins_home/workspace/job-dsl-1
Processing DSL script filesystemjob.groovy
Added items:
    GeneratedJob{name='Job-DSL-Filesystem-Defined'}
Unreferenced items:
    GeneratedJob{name='DSL-Tutorial-1-Test'}
Removed items:
    GeneratedJob{name='DSL-Tutorial-1-Test'}
Finished: SUCCESS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I’ll have to figure out how to automate thru that security.  That’s OK for now.&lt;/p&gt;

&lt;h1 id=&quot;using-a-git-repo&quot;&gt;Using a git Repo&lt;/h1&gt;
&lt;p&gt;Created a repo, added the seedjob.groovy.&lt;br /&gt;
&lt;strong&gt;Note:  Jenkins needs the password to a private repo&lt;/strong&gt;&lt;br /&gt;
Manually in Jenkins, add the job git repo with the groovy scripts.
This way, when building the seed job, the groovy for the jobs
come from git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OK never mind, this security thing is annoying&lt;/strong&gt;&lt;br /&gt;
In the Seed Job Config, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Use Groovy Sandbox&lt;/code&gt;&lt;br /&gt;
Install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorize Project&lt;/code&gt; plugin.&lt;br /&gt;
Then a widget appears in Manage Jenkins –&amp;gt; Configure Global Security.&lt;br /&gt;
I selected Run as User who triggered the build.&lt;br /&gt;
Nope!  Must select &lt;code class=&quot;highlighter-rouge&quot;&gt;Run as Specific User&lt;/code&gt;, and it’s the jenkins user, not the system user&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will need Bitbucket Webhook for the Seed Job&lt;/strong&gt;&lt;br /&gt;
Unfortunately have to do this manually.  But I need it
so I can change the definition of a generated job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WTF?  Can’t put dashes &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; in groovy filenames?&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;result--recreated-an-existing-job-configuration-with-job-dsl&quot;&gt;Result:  Recreated an Existing Job Configuration with Job DSL&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;job('ffn-loader-atmelice5898') {
    scm {
        git {
            remote {
                url('https://bitbucket.org/bootladder/debos_firmware.git');
            }
            branch('master');
            extensions {
                localBranch 'master'
            }
        }
    }
    triggers {
        bitbucketPush()
    }
    steps {
        shell('echo &quot;Hello, world this is generated job dsl!&quot;');
        shell('\
            ./build.sh &amp;amp;&amp;amp; cd src/cmakebuild/bin/ &amp;amp;&amp;amp; \
            pathtonewelf=$(ls *.elf) &amp;amp;&amp;amp; \
            cp *.elf /var/jenkins_publish/ &amp;amp;&amp;amp; \
            cd /var/jenkins_publish &amp;amp;&amp;amp; \
            ln -f $pathtonewelf latest-debos_firmware &amp;amp;&amp;amp; \
            echo $pathtonewelf &amp;gt; target/ffnbeagle-woodland-atmelice-J41800075898 \
        ')
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;What this does:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;url:  use https:// , it seemed like git:// was not working Bitbucket push triggers&lt;/li&gt;
  &lt;li&gt;localBranch ‘master’ does a local checkout of master branch&lt;/li&gt;
  &lt;li&gt;bitbucketPush() triggers a build on the Bitbucket webhook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Shell bit&lt;/strong&gt;&lt;br /&gt;
Builds the ELF, copies it to the publish directory
and echos the filename to a pointer file.&lt;br /&gt;
The pointer file is curl’ed by a remote host in the lab.&lt;br /&gt;
The pointer file says what firmware should be loaded on a particular target.&lt;br /&gt;
You can see I’m identifying the target by &lt;code class=&quot;highlighter-rouge&quot;&gt;system-location-tool-serialnumber&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;for-future-reference-httpjob-dslherokuappcom&quot;&gt;For future reference: http://job-dsl.herokuapp.com/&lt;/h1&gt;


  &lt;/div&gt;

&lt;p&gt;&amp;lt;/article&amp;gt;
` .  The default layout is selected in index.md.  If index.md chose the indexlayout layout for example, that would be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/indexlayout.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assets go in the top level like this.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── assets
│   ├── css
│   ├── js
│   └── sass
├── _config.yml
├── index.md
├── _layouts
│   ├── default.html
│   └── indexlayout.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And they can be accessed from the HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/css/main.css&lt;/code&gt; for example here&lt;/p&gt;

&lt;h1 id=&quot;now-the-different-part--deploying&quot;&gt;Now the different part:  deploying&lt;/h1&gt;
&lt;p&gt;Before what I did was, build the site, then commit the site to git, then push the built site to the production server.  Problem is committing the built site, it’s a waste.  It’s better to not store the generated site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option:  Push to Prod, Build on Prod, Push to Github for archiving&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Requires Jekyll install on prod.  Prod may not have RAM or Disk &lt;strong&gt;BAD&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Can put a hook in github which deploys on push.  Non-developers can use github directly to update content &lt;strong&gt;GOOD&lt;/strong&gt;
&lt;strong&gt;Option: Push to Github for archiving, build the site locally, scp the built site to prod&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Option:  (Push to Github or Edit inside Github) , build on Jenkins, deploy with Jenkins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Easy editing for Non-Developers&lt;/li&gt;
  &lt;li&gt;Only 1 push required if using command line&lt;/li&gt;
  &lt;li&gt;Jenkins can configure the Hook and the deploy destination&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">This is according to common practices in the jekyll documentation. also another article about jekyllizing a html template site was good. Following these instructions to create the jekyll install initially: https://jekyllrb.com/tutorials/convert-site-to-jekyll/ . The main point is, put layouts in _layouts/ , stub the content with curly braces `` . The default layout is selected in index.md. If index.md chose the indexlayout layout for example, that would be found in _layouts/indexlayout.html. Assets go in the top level like this. ├── assets │   ├── css │   ├── js │   └── sass ├── _config.yml ├── index.md ├── _layouts │   ├── default.html │   └── indexlayout.html And they can be accessed from the HTML assets/css/main.css for example here Now the different part: deploying Before what I did was, build the site, then commit the site to git, then push the built site to the production server. Problem is committing the built site, it’s a waste. It’s better to not store the generated site. Option: Push to Prod, Build on Prod, Push to Github for archiving Requires Jekyll install on prod. Prod may not have RAM or Disk BAD Can put a hook in github which deploys on push. Non-developers can use github directly to update content GOOD Option: Push to Github for archiving, build the site locally, scp the built site to prod Option: (Push to Github or Edit inside Github) , build on Jenkins, deploy with Jenkins Easy editing for Non-Developers Only 1 push required if using command line Jenkins can configure the Hook and the deploy destination</summary></entry><entry><title type="html">Jenkins: Job DSL</title><link href="/2018/04/22/jenkins-job-dsl.html" rel="alternate" type="text/html" title="Jenkins: Job DSL" /><published>2018-04-22T00:00:00-07:00</published><updated>2018-04-22T00:00:00-07:00</updated><id>/2018/04/22/jenkins-job-dsl</id><content type="html" xml:base="/2018/04/22/jenkins-job-dsl.html">&lt;p&gt;I don’t know if it’s my low-end VPS, java, or what, but Jenkins is &lt;strong&gt;slow&lt;/strong&gt;.&lt;br /&gt;
To create a new job, edit a job, really just about everything is slow.&lt;br /&gt;
Right now I want to speed up:  creating a job, editing a job, viewing a job’s definition.&lt;br /&gt;
Obviously Job DSL is the answer.&lt;/p&gt;

&lt;p&gt;[https://github.com/jenkinsci/job-dsl-plugin/wiki/Tutorial—Using-the-Jenkins-Job-DSL]&lt;/p&gt;

&lt;h1 id=&quot;install-jobdsl-from-plugin-manager-this-is-obvious&quot;&gt;Install JobDSL from Plugin Manager (this is obvious)&lt;/h1&gt;

&lt;h1 id=&quot;intro-to-job-dsl&quot;&gt;Intro to Job DSL&lt;/h1&gt;
&lt;p&gt;First you manually create a job called the seed job.  In the build step,
instead of executing a script in the shell, select to run the Job DSL script.&lt;br /&gt;
The Job DSL script is defining the new jobs that will be created as a result of
running this seed job.&lt;/p&gt;

&lt;p&gt;Run the seed job.  It generates jobs.  It does not run them, or check if they are defined sensibly.
Here is the console output.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started by user engineering
Building in workspace /var/jenkins_home/workspace/job-dsl-1
Processing provided DSL script
Added items:
    GeneratedJob{name='DSL-Tutorial-1-Test'}
Finished: SUCCESS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now go to the homepage of the seed job.  Notice it shows “Generated Items:” with the generated job.&lt;br /&gt;
Now go to the homepage of Jenkins.  It shows the generated job, the seed job, and the existing manually created jobs.&lt;/p&gt;

&lt;h1 id=&quot;huh-this-does-not-help-me&quot;&gt;Huh… This does not help me!&lt;/h1&gt;
&lt;p&gt;Let’s think this through.  What do I need?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Single Point of Truth (SPOT) for viewing and editing a job&lt;/li&gt;
  &lt;li&gt;Atleast a file on the jenkins machine for the above.  Optional/better: git repo&lt;/li&gt;
  &lt;li&gt;The SPOT must contain:
    &lt;ul&gt;
      &lt;li&gt;remote URL of git repo&lt;/li&gt;
      &lt;li&gt;Bitbucket, Github, Slack webhooks&lt;/li&gt;
      &lt;li&gt;shell snippet for processing the output of a build&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks like all the above is supported.&lt;br /&gt;
What I don’t like is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To edit job definitions, must edit the seed job
    &lt;ul&gt;
      &lt;li&gt;To solve this, I’ll need to put the Job DSL script in the filesystem&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After editing job definitions, must re-generate the jobs
    &lt;ul&gt;
      &lt;li&gt;With the Job DSL script in the filesystem, I’ll be editing
the job in the filesystem, maybe without jenkins open.
I can put a timer on the job trigger.  I should be able
to stick a shell script in there which I can execute after editing,
which should run the job to generate all the jobs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, in the Job Configuration, change &lt;code class=&quot;highlighter-rouge&quot;&gt;Use the provided DSL script&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Look on Filesystem&lt;/code&gt;.&lt;br /&gt;
It says the scripts must be located in the Workspace.  But wildcards &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; can be used.&lt;br /&gt;
My Jenkins is in a docker container, but that should be OK since all the workspaces are
volume mapped.&lt;/p&gt;

&lt;p&gt;OK, I put a Job DSL script in there.  I then manually build the Seed Job and it fails.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ERROR: script not yet approved for use&lt;/code&gt;&lt;br /&gt;
OK, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Manage Jenkins --&amp;gt; In-process Script Approval&lt;/code&gt;, and it’s there.&lt;/p&gt;

&lt;p&gt;Cool!  Works as expected, including the deleting of the old job which I checked the box for.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started by user engineering
Building in workspace /var/jenkins_home/workspace/job-dsl-1
Processing DSL script filesystemjob.groovy
Added items:
    GeneratedJob{name='Job-DSL-Filesystem-Defined'}
Unreferenced items:
    GeneratedJob{name='DSL-Tutorial-1-Test'}
Removed items:
    GeneratedJob{name='DSL-Tutorial-1-Test'}
Finished: SUCCESS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I’ll have to figure out how to automate thru that security.  That’s OK for now.&lt;/p&gt;

&lt;h1 id=&quot;using-a-git-repo&quot;&gt;Using a git Repo&lt;/h1&gt;
&lt;p&gt;Created a repo, added the seedjob.groovy.&lt;br /&gt;
&lt;strong&gt;Note:  Jenkins needs the password to a private repo&lt;/strong&gt;&lt;br /&gt;
Manually in Jenkins, add the job git repo with the groovy scripts.
This way, when building the seed job, the groovy for the jobs
come from git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OK never mind, this security thing is annoying&lt;/strong&gt;&lt;br /&gt;
In the Seed Job Config, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Use Groovy Sandbox&lt;/code&gt;&lt;br /&gt;
Install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorize Project&lt;/code&gt; plugin.&lt;br /&gt;
Then a widget appears in Manage Jenkins –&amp;gt; Configure Global Security.&lt;br /&gt;
I selected Run as User who triggered the build.&lt;br /&gt;
Nope!  Must select &lt;code class=&quot;highlighter-rouge&quot;&gt;Run as Specific User&lt;/code&gt;, and it’s the jenkins user, not the system user&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will need Bitbucket Webhook for the Seed Job&lt;/strong&gt;&lt;br /&gt;
Unfortunately have to do this manually.  But I need it
so I can change the definition of a generated job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WTF?  Can’t put dashes &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; in groovy filenames?&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;result--recreated-an-existing-job-configuration-with-job-dsl&quot;&gt;Result:  Recreated an Existing Job Configuration with Job DSL&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;job('ffn-loader-atmelice5898') {
    scm {
        git {
            remote {
                url('https://bitbucket.org/bootladder/debos_firmware.git');
            }
            branch('master');
            extensions {
                localBranch 'master'
            }
        }
    }
    triggers {
        bitbucketPush()
    }
    steps {
        shell('echo &quot;Hello, world this is generated job dsl!&quot;');
        shell('\
            ./build.sh &amp;amp;&amp;amp; cd src/cmakebuild/bin/ &amp;amp;&amp;amp; \
            pathtonewelf=$(ls *.elf) &amp;amp;&amp;amp; \
            cp *.elf /var/jenkins_publish/ &amp;amp;&amp;amp; \
            cd /var/jenkins_publish &amp;amp;&amp;amp; \
            ln -f $pathtonewelf latest-debos_firmware &amp;amp;&amp;amp; \
            echo $pathtonewelf &amp;gt; target/ffnbeagle-woodland-atmelice-J41800075898 \
        ')
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;What this does:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;url:  use https:// , it seemed like git:// was not working Bitbucket push triggers&lt;/li&gt;
  &lt;li&gt;localBranch ‘master’ does a local checkout of master branch&lt;/li&gt;
  &lt;li&gt;bitbucketPush() triggers a build on the Bitbucket webhook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Shell bit&lt;/strong&gt;&lt;br /&gt;
Builds the ELF, copies it to the publish directory
and echos the filename to a pointer file.&lt;br /&gt;
The pointer file is curl’ed by a remote host in the lab.&lt;br /&gt;
The pointer file says what firmware should be loaded on a particular target.&lt;br /&gt;
You can see I’m identifying the target by &lt;code class=&quot;highlighter-rouge&quot;&gt;system-location-tool-serialnumber&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;for-future-reference-httpjob-dslherokuappcom&quot;&gt;For future reference: http://job-dsl.herokuapp.com/&lt;/h1&gt;</content><author><name></name></author><summary type="html">I don’t know if it’s my low-end VPS, java, or what, but Jenkins is slow. To create a new job, edit a job, really just about everything is slow. Right now I want to speed up: creating a job, editing a job, viewing a job’s definition. Obviously Job DSL is the answer. [https://github.com/jenkinsci/job-dsl-plugin/wiki/Tutorial—Using-the-Jenkins-Job-DSL] Install JobDSL from Plugin Manager (this is obvious) Intro to Job DSL First you manually create a job called the seed job. In the build step, instead of executing a script in the shell, select to run the Job DSL script. The Job DSL script is defining the new jobs that will be created as a result of running this seed job. Run the seed job. It generates jobs. It does not run them, or check if they are defined sensibly. Here is the console output. Started by user engineering Building in workspace /var/jenkins_home/workspace/job-dsl-1 Processing provided DSL script Added items: GeneratedJob{name='DSL-Tutorial-1-Test'} Finished: SUCCESS Now go to the homepage of the seed job. Notice it shows “Generated Items:” with the generated job. Now go to the homepage of Jenkins. It shows the generated job, the seed job, and the existing manually created jobs. Huh… This does not help me! Let’s think this through. What do I need? A Single Point of Truth (SPOT) for viewing and editing a job Atleast a file on the jenkins machine for the above. Optional/better: git repo The SPOT must contain: remote URL of git repo Bitbucket, Github, Slack webhooks shell snippet for processing the output of a build Looks like all the above is supported. What I don’t like is: To edit job definitions, must edit the seed job To solve this, I’ll need to put the Job DSL script in the filesystem After editing job definitions, must re-generate the jobs With the Job DSL script in the filesystem, I’ll be editing the job in the filesystem, maybe without jenkins open. I can put a timer on the job trigger. I should be able to stick a shell script in there which I can execute after editing, which should run the job to generate all the jobs. OK, in the Job Configuration, change Use the provided DSL script to Look on Filesystem. It says the scripts must be located in the Workspace. But wildcards * can be used. My Jenkins is in a docker container, but that should be OK since all the workspaces are volume mapped. OK, I put a Job DSL script in there. I then manually build the Seed Job and it fails. ERROR: script not yet approved for use OK, go to Manage Jenkins --&amp;gt; In-process Script Approval, and it’s there. Cool! Works as expected, including the deleting of the old job which I checked the box for. Started by user engineering Building in workspace /var/jenkins_home/workspace/job-dsl-1 Processing DSL script filesystemjob.groovy Added items: GeneratedJob{name='Job-DSL-Filesystem-Defined'} Unreferenced items: GeneratedJob{name='DSL-Tutorial-1-Test'} Removed items: GeneratedJob{name='DSL-Tutorial-1-Test'} Finished: SUCCESS I’ll have to figure out how to automate thru that security. That’s OK for now. Using a git Repo Created a repo, added the seedjob.groovy. Note: Jenkins needs the password to a private repo Manually in Jenkins, add the job git repo with the groovy scripts. This way, when building the seed job, the groovy for the jobs come from git. OK never mind, this security thing is annoying In the Seed Job Config, select Use Groovy Sandbox Install the Authorize Project plugin. Then a widget appears in Manage Jenkins –&amp;gt; Configure Global Security. I selected Run as User who triggered the build. Nope! Must select Run as Specific User, and it’s the jenkins user, not the system user I will need Bitbucket Webhook for the Seed Job Unfortunately have to do this manually. But I need it so I can change the definition of a generated job. WTF? Can’t put dashes - in groovy filenames? Result: Recreated an Existing Job Configuration with Job DSL job('ffn-loader-atmelice5898') { scm { git { remote { url('https://bitbucket.org/bootladder/debos_firmware.git'); } branch('master'); extensions { localBranch 'master' } } } triggers { bitbucketPush() } steps { shell('echo &quot;Hello, world this is generated job dsl!&quot;'); shell('\ ./build.sh &amp;amp;&amp;amp; cd src/cmakebuild/bin/ &amp;amp;&amp;amp; \ pathtonewelf=$(ls *.elf) &amp;amp;&amp;amp; \ cp *.elf /var/jenkins_publish/ &amp;amp;&amp;amp; \ cd /var/jenkins_publish &amp;amp;&amp;amp; \ ln -f $pathtonewelf latest-debos_firmware &amp;amp;&amp;amp; \ echo $pathtonewelf &amp;gt; target/ffnbeagle-woodland-atmelice-J41800075898 \ ') } } What this does: url: use https:// , it seemed like git:// was not working Bitbucket push triggers localBranch ‘master’ does a local checkout of master branch bitbucketPush() triggers a build on the Bitbucket webhook The Shell bit Builds the ELF, copies it to the publish directory and echos the filename to a pointer file. The pointer file is curl’ed by a remote host in the lab. The pointer file says what firmware should be loaded on a particular target. You can see I’m identifying the target by system-location-tool-serialnumber For future reference: http://job-dsl.herokuapp.com/</summary></entry><entry><title type="html">Reference: OpenOCD, GDB</title><link href="/2018/04/18/reference-openocd-gdb.html" rel="alternate" type="text/html" title="Reference:  OpenOCD, GDB" /><published>2018-04-18T00:00:00-07:00</published><updated>2018-04-18T00:00:00-07:00</updated><id>/2018/04/18/reference-openocd-gdb</id><content type="html" xml:base="/2018/04/18/reference-openocd-gdb.html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://2ab9pu2w8o9xpg6w26xnz04d-wpengine.netdna-ssl.com/wp-content/cache/autoptimize/css/autoptimize_f0ba07fcfbfb99eca6dd6305271724f8.css&quot; /&gt;

&lt;h1 id=&quot;openocd-pre-reqs&quot;&gt;OpenOCD Pre-reqs&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Host:  Laptop or Beaglebone, with openocd installed, with some USB programmer&lt;/li&gt;
  &lt;li&gt;openocd.cfg files: repo
    &lt;h4 id=&quot;to-start-openocd-cd-to-directory-with-openocdcfg-run-openocd&quot;&gt;To start OpenOCD, cd to directory with openocd.cfg, run &lt;code class=&quot;highlighter-rouge&quot;&gt;openocd&lt;/code&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;gdb-commands&quot;&gt;GDB Commands&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Start GDB, with an ELF file if you want.  &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb example.elf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Should work on the Beaglebone native gdb, because it is ARM, difference is eabihf vs eabi&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(gdb) target remote localhost:3333&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monitor reset&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;monitor halt&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;monitor reset halt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monitor&lt;/code&gt; actually issues OpenOCD commands thru GDB.
    &lt;h4 id=&quot;to-verify-an-elf-file&quot;&gt;To verify an ELF file:&lt;/h4&gt;
    &lt;h4 id=&quot;monitor-verify_image-fullpathtomyelf&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monitor verify_image /full/path/to/my.elf&lt;/code&gt;&lt;/h4&gt;
    &lt;p&gt;Actually the search path is the directory that OpenOCD started in.&lt;/p&gt;
    &lt;h4 id=&quot;to-load-an-elf-file-into-flash-memory&quot;&gt;To load an ELF file into flash memory:&lt;/h4&gt;
    &lt;h4 id=&quot;monitor-flash-write_image-erase-fullpathtomyelf&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monitor flash write_image erase /full/path/to/my.elf&lt;/code&gt;&lt;/h4&gt;
    &lt;h4 id=&quot;use-the-erase-parameter-to-erase-before-writing--according-to-openocd-manual-you-should-assume-other-flash-sectors-will-be-erased-too&quot;&gt;Use the erase parameter, to erase before writing.  According to openocd manual, you should assume other flash sectors will be erased too.&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;To start gdb connected to remote target:  &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb -ex &quot;target remote localhost:3333&quot; ~/my.elf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;telnet-commands&quot;&gt;Telnet Commands&lt;/h1&gt;
&lt;h4 id=&quot;load-image-automatically&quot;&gt;Load Image Automatically&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
fetch_and_load&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Starting OpenOCD Server
    openocd -f ~/openocdconfigs/stm32f4discovery/openocd.cfg &amp;amp;
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Fetching and Loading new firmware: &lt;span class=&quot;nv&quot;&gt;$v1&lt;/span&gt;
    wget ffn.bootladder.com:9001/&lt;span class=&quot;nv&quot;&gt;$v1&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reset halt; sleep 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | telnet localhost 4444
    sleep 2
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;flash write_image erase &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$v1&lt;/span&gt; ; sleep 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | telnet localhost 4444
    sleep 2
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;reset; sleep 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | telnet localhost 4444
    sleep 2
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;shutdown; sleep 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | telnet localhost 4444

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl ffn.bootladder.com:9001/target/ffnbeagle-woodland-stm32discovery 2&amp;gt;/dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
ls &lt;span class=&quot;nv&quot;&gt;$v1&lt;/span&gt; &amp;gt;/dev/null &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; fetch_and_load
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This appears to work, but not sure if it works every time.  Hence the sleeps.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OpenOCD server is started and stopped for each write_image.&lt;/li&gt;
  &lt;li&gt;The curl retrieves the contents of the URL, which is a filename&lt;/li&gt;
  &lt;li&gt;If the local system has that file, don’t do anything.&lt;/li&gt;
  &lt;li&gt;If not, grab that file and load it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Loop the above to achieve automatic firmware updates&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while true; do sh fetch-and-load-ffnbeagle-woodland-stm32discovery.sh ; sleep 1; done;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-above-works-when-i-only-have-1-stm32f4-discovery-board&quot;&gt;The above works when I only have 1 STM32F4 discovery board.&lt;/h4&gt;
&lt;h4 id=&quot;for-my-atmel-project-i-may-have-2-usb-debuggers-attached-to-the-same-host&quot;&gt;For my Atmel project, I may have 2 USB debuggers attached to the same host.&lt;/h4&gt;
&lt;h4 id=&quot;at-large-scale-a-host-will-have-many-ttyusb-serial-ports-for-bootloading&quot;&gt;At large scale, a host will have many ttyUSB serial ports for bootloading&lt;/h4&gt;

&lt;h1 id=&quot;hmm-enable-cmsis-dap-not-supported-in-my-openocd-installation&quot;&gt;Hmm, –enable-cmsis-dap not supported in my OpenOCD installation.&lt;/h1&gt;
&lt;p&gt;Ahh nice, &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install libhidapi-dev&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure --enable-cmsis-dap&lt;/code&gt; .  Props to http://www.signal11.us/oss/&lt;/p&gt;</content><author><name></name></author><summary type="html">OpenOCD Pre-reqs Host: Laptop or Beaglebone, with openocd installed, with some USB programmer openocd.cfg files: repo To start OpenOCD, cd to directory with openocd.cfg, run openocd</summary></entry><entry><title type="html">Ubuntu WiFi Bridge to the Lab LAN</title><link href="/2018/04/15/ubuntu-wifi-bridge-to-the-lab-lan.html" rel="alternate" type="text/html" title="Ubuntu WiFi Bridge to the Lab LAN" /><published>2018-04-15T00:00:00-07:00</published><updated>2018-04-15T00:00:00-07:00</updated><id>/2018/04/15/ubuntu-wifi-bridge-to-the-lab-lan</id><content type="html" xml:base="/2018/04/15/ubuntu-wifi-bridge-to-the-lab-lan.html">&lt;p&gt;I don’t have Ethernet access to my gateway router; only wifi.  In my lab area I have a few Beaglebones on a switch.  I need to be able to access them from my laptops.  Ubuntu has a convenient wifi to ethernet bridge.
&lt;strong&gt;Recap: to enable the bridge&lt;/strong&gt; 
network manager applet “edit connections”, add, IPv4 settings method: shared to other computers”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I wish I knew how to set this up manually&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Only 1 choice of subnet for the Ethernet side:  10.42.0.0 , it’s hard coded in networkmanager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK that’s the recap.  The interesting part in this post is, I just replaced the bridge laptop with a different one.  Setting up the bridge like above is simple, but now my problem is, my dev laptop can’t access the newly set up laptop.&lt;br /&gt;
Previously what I did was, configure &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; to name the bridge laptop, and also named all the hosts behind the bridge (the Beaglebones).  To make this work I used the ProxyCommand feature of ssh config.&lt;/p&gt;

&lt;p&gt;So 1 obvious option is to rewrite all the entries in ssh config.&lt;br /&gt;
But another cool option would be to set up some routing.  I suppose, the bridge laptop could push routes to everybody, saying that the 10.42.0.0 network is accessible through the 10.0.1.X, the IP address of the bridge on the WiFi subnet.&lt;br /&gt;
&lt;strong&gt;Woops, push routes is a OpenVPN thing.  lol!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To experiment, I added a static route on my dev laptop: &lt;code class=&quot;highlighter-rouge&quot;&gt;ip route add 10.42.0.0/24 via 10.0.1.25 dev eth0&lt;/code&gt; , and I can ping the laptop on 10.42.0.1.  Cool!  But, if I ping a beaglebone at 10.42.0.61, I get &lt;code class=&quot;highlighter-rouge&quot;&gt;Destination Port Unreachable&lt;/code&gt;.  Using tcpdump and checking the iptables on the bridge laptop, it appears that the bridge is not forwarding the ping to the Beaglebone.&lt;br /&gt;
Hmm, I don’t want to have to configure IP tables.  Let’s look at the other option, rewriting &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Oh, this is it.  Simple.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#######
# Lab #
#
Host zoz-woodland
  Hostname 10.0.1.24
  User steve

Host buster-woodland lab-gateway
    Hostname 10.0.1.25
    User steve

Host ffnbeagle-woodland
  User debian
  ProxyCommand ssh lab-gateway nc 10.42.0.61 22
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To swap the gateway laptop, just move the lab-gateway alias from one host to another.  Recall, gateway laptop is the wifi-to-ethernet bridge to the lab LAN.&lt;/p&gt;</content><author><name></name></author><summary type="html">I don’t have Ethernet access to my gateway router; only wifi. In my lab area I have a few Beaglebones on a switch. I need to be able to access them from my laptops. Ubuntu has a convenient wifi to ethernet bridge. Recap: to enable the bridge network manager applet “edit connections”, add, IPv4 settings method: shared to other computers”. I wish I knew how to set this up manually Only 1 choice of subnet for the Ethernet side: 10.42.0.0 , it’s hard coded in networkmanager OK that’s the recap. The interesting part in this post is, I just replaced the bridge laptop with a different one. Setting up the bridge like above is simple, but now my problem is, my dev laptop can’t access the newly set up laptop. Previously what I did was, configure ~/.ssh/config to name the bridge laptop, and also named all the hosts behind the bridge (the Beaglebones). To make this work I used the ProxyCommand feature of ssh config. So 1 obvious option is to rewrite all the entries in ssh config. But another cool option would be to set up some routing. I suppose, the bridge laptop could push routes to everybody, saying that the 10.42.0.0 network is accessible through the 10.0.1.X, the IP address of the bridge on the WiFi subnet. Woops, push routes is a OpenVPN thing. lol! To experiment, I added a static route on my dev laptop: ip route add 10.42.0.0/24 via 10.0.1.25 dev eth0 , and I can ping the laptop on 10.42.0.1. Cool! But, if I ping a beaglebone at 10.42.0.61, I get Destination Port Unreachable. Using tcpdump and checking the iptables on the bridge laptop, it appears that the bridge is not forwarding the ping to the Beaglebone. Hmm, I don’t want to have to configure IP tables. Let’s look at the other option, rewriting ~/.ssh/config Oh, this is it. Simple. ``` ####### Lab # Host zoz-woodland Hostname 10.0.1.24 User steve</summary></entry><entry><title type="html">udev rule for /dev/ symlink with serial number</title><link href="/2018/04/14/udev-rule-for-dev-symlink-with-serial-number.html" rel="alternate" type="text/html" title="udev rule for /dev/ symlink with serial number" /><published>2018-04-14T00:00:00-07:00</published><updated>2018-04-14T00:00:00-07:00</updated><id>/2018/04/14/udev-rule-for-dev-symlink-with-serial-number</id><content type="html" xml:base="/2018/04/14/udev-rule-for-dev-symlink-with-serial-number.html">&lt;p&gt;I discovered, you can do the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KERNEL==&quot;ttyUSB[0-9]*&quot;, ATTRS{idProduct}==&quot;6001&quot;, ATTRS{idVendor}==&quot;0403&quot;, SYMLINK+=&quot;ttyUSB%s{serial}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The interesting part is the &lt;code class=&quot;highlighter-rouge&quot;&gt;%s{serial}&lt;/code&gt;.&lt;br /&gt;
%s is short for ATTRS{} , so the value of the ATTR is inserted there.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;serial&lt;/code&gt; is the name of an attr, like &lt;code class=&quot;highlighter-rouge&quot;&gt;idProduct&lt;/code&gt;.&lt;br /&gt;
So, now I can mark my FTDI’s with their serial numbers and do cool stuff.&lt;br /&gt;
I discovered this from https://txlab.wordpress.com/2016/06/14/udev-rules-for-ttyusb-devices/ , and then looked at the udev manual&lt;/p&gt;</content><author><name></name></author><summary type="html">I discovered, you can do the following: KERNEL==&quot;ttyUSB[0-9]*&quot;, ATTRS{idProduct}==&quot;6001&quot;, ATTRS{idVendor}==&quot;0403&quot;, SYMLINK+=&quot;ttyUSB%s{serial}&quot; The interesting part is the %s{serial}. %s is short for ATTRS{} , so the value of the ATTR is inserted there. serial is the name of an attr, like idProduct. So, now I can mark my FTDI’s with their serial numbers and do cool stuff. I discovered this from https://txlab.wordpress.com/2016/06/14/udev-rules-for-ttyusb-devices/ , and then looked at the udev manual</summary></entry><entry><title type="html">Configuration Management of my Laptop</title><link href="/2018/04/07/configuration-management-of-my-laptop.html" rel="alternate" type="text/html" title="Configuration Management of my Laptop" /><published>2018-04-07T00:00:00-07:00</published><updated>2018-04-07T00:00:00-07:00</updated><id>/2018/04/07/configuration-management-of-my-laptop</id><content type="html" xml:base="/2018/04/07/configuration-management-of-my-laptop.html">&lt;p&gt;Similar to the contact list in my phone, my main laptop is a single point of failure.&lt;br /&gt;
I take my laptop on the plane, in the car, etc.  Sometimes if I’m taking my car,
I’ll take a spare laptop just in case it gets stolen.  Any time I have my main laptop,
I must have it on my person at all times, even if I’m not going to use it.&lt;br /&gt;
&lt;strong&gt;This is just plain stupid&lt;/strong&gt;.  I can get a Thinkpad T420, which is what I use exclusively now,
for less than $200.  It’s relatively heavy by today’s standards.  Sometimes I feel tied to it
in an unpleasant way.&lt;/p&gt;

&lt;h1 id=&quot;the-only-reason-i-have-a-primary-laptop-is-because-its-configured-to-my-preference&quot;&gt;The only reason I have a primary laptop is because it’s configured to my preference.&lt;/h1&gt;

&lt;p&gt;I have a docking station for my T420 in my home office.  There’s a lot of stuff connected to it,
so having it saves me a lot of time unplugging and plugging.&lt;br /&gt;
But you know what’s funny?   Docking and undocking the laptop itself is starting to take too much time.&lt;br /&gt;
Realizing the laptop is not there on the docking station, and I have to go get it and dock it… is not fun.&lt;/p&gt;

&lt;h1 id=&quot;now-that-i-have-a-supply-of-disposable-thinkpads-the-docking-station-is-obsolete&quot;&gt;Now that I have a supply of disposable Thinkpads, the docking station is obsolete.&lt;/h1&gt;

&lt;p&gt;So, today I went out to the coffee shop, and I took a spare Thinkpad.  Not my main one.
I left my main Thinkpad on the docking station.  I got to the coffee shop, opened up the laptop,
and then it hit me.  The spare Thinkpad wasn’t configured to my liking.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;My i3wm config was default; I could barely use it&lt;/li&gt;
  &lt;li&gt;It didn’t have any of my books on it&lt;/li&gt;
  &lt;li&gt;golang was not installed&lt;/li&gt;
  &lt;li&gt;none of my git repos for work projects were cloned&lt;/li&gt;
  &lt;li&gt;No SSH keys, no ~/.ssh/config, no /etc/hosts, no nothing!&lt;/li&gt;
  &lt;li&gt;blah blah blah, you know the deal&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-do-i-do-about-this&quot;&gt;What do I do about this?&lt;/h1&gt;

&lt;h1 id=&quot;some-of-the-stuff-is-mine-not-for-you--some-of-the-stuff-is-my-customers-not-for-me-in-a-year-from-now&quot;&gt;Some of the stuff is mine, not for you!  Some of the stuff is my customer’s, not for me in a year from now!&lt;/h1&gt;

&lt;h1 id=&quot;solution-run-a-openssh-server-on-the-main-laptop&quot;&gt;Solution: Run a OpenSSH server on the main laptop&lt;/h1&gt;
&lt;p&gt;Using the “fleet laptop”, ssh into the main laptop to grab configuration files.
At the same time, copy them into a git repo for future convenience.
Even better, add a line in a script that copies it to the destination.&lt;br /&gt;
Worked well for &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.&lt;/code&gt; files.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc .vimrc i3config &lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution--ansible-playbooks&quot;&gt;Solution:  Ansible Playbooks&lt;/h1&gt;
&lt;p&gt;Golang is a multi-step install, and for some reason apt-get install golang-go installs version 1.6.  Too old.&lt;br /&gt;
Let’s give it a try.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo apt-add-repository ppa:ansible/ansible
sudo apt-get install ansible
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Maybe I should just keep a ansible binary off hand, to avoid those 3 steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TBD…&lt;/p&gt;

&lt;h1 id=&quot;etchosts-and-sshconfig--bitbucket&quot;&gt;/etc/hosts and ~/.ssh/config … Bitbucket?&lt;/h1&gt;
&lt;p&gt;Bitbucket gives you private repos.  Let’s just do that for now.&lt;br /&gt;
&lt;em&gt;~/.ssh/&lt;/em&gt;&lt;br /&gt;
Copy over my ~/.ssh into the repo, take out unnecessary stuff.&lt;br /&gt;
My &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; contains:  hostnames (IP addresses or domain names), IdentityFile’s (SSH keys).&lt;br /&gt;
Should I include the keys in the repo?  If I do, it’s more convenient, but then it’s more security risk.  If I don’t, I need to generate new keys and then copy them to the hosts.  At best here I have to remember a password to access the remote machine.  At worst, the machine only authenticates with keys, no password login.&lt;br /&gt;
So again, for lack of a better solution, I’ll put my keys in the repo.&lt;br /&gt;
&lt;em&gt;Result&lt;/em&gt;:  &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/&lt;/code&gt; contains key-pairs and the config file.&lt;br /&gt;
Then I attempted to login to a remote host.  Turns out, git does not preserve the 400 permission mode that the keys need to have.  So, in the install script, I change the keys to 400.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/etc/hosts&lt;/em&gt;&lt;br /&gt;
Comparing my “main laptop’s” &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; with the other laptop’s default &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;, I notice 2nd line of the file:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.1.1 my-hostname&lt;/code&gt; .  This obviously is unique to the host.  But it appears that this doesn’t matter.  I should be able to remove that line.&lt;br /&gt;
OK I did that, and I notice that when /etc/hosts is touched or modified,
I get the following message: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo: unable to resolve host my-hostname&lt;/code&gt;.&lt;br /&gt;
Using this answer as a suggestion: https://askubuntu.com/a/524368 , I added the following line to my install script: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 127.0.1.1 $(hostname) | sudo tee -a /etc/hosts&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Similar to the contact list in my phone, my main laptop is a single point of failure. I take my laptop on the plane, in the car, etc. Sometimes if I’m taking my car, I’ll take a spare laptop just in case it gets stolen. Any time I have my main laptop, I must have it on my person at all times, even if I’m not going to use it. This is just plain stupid. I can get a Thinkpad T420, which is what I use exclusively now, for less than $200. It’s relatively heavy by today’s standards. Sometimes I feel tied to it in an unpleasant way. The only reason I have a primary laptop is because it’s configured to my preference. I have a docking station for my T420 in my home office. There’s a lot of stuff connected to it, so having it saves me a lot of time unplugging and plugging. But you know what’s funny? Docking and undocking the laptop itself is starting to take too much time. Realizing the laptop is not there on the docking station, and I have to go get it and dock it… is not fun. Now that I have a supply of disposable Thinkpads, the docking station is obsolete.</summary></entry><entry><title type="html">Cell Phone - Backup and Restore My Contacts!</title><link href="/2018/04/07/backup-and-restore-in-case-of-emergency.html" rel="alternate" type="text/html" title="Cell Phone - Backup and Restore My Contacts!" /><published>2018-04-07T00:00:00-07:00</published><updated>2018-04-07T00:00:00-07:00</updated><id>/2018/04/07/backup-and-restore-in-case-of-emergency</id><content type="html" xml:base="/2018/04/07/backup-and-restore-in-case-of-emergency.html">&lt;p&gt;I dropped my phone and it stopped working.  After a short existential crisis, 
I went to the screen repair place the next day.  It was replaced in an hour,
fully functional.&lt;br /&gt;
I got lucky that time.  Eventually I won’t be so lucky.&lt;br /&gt;
&lt;strong&gt;My contacts were not backed up.  I need to be more careful.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;grabbing-vcfs-off-my-phone&quot;&gt;Grabbing .vcf’s off my phone.&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;First, why the hell are we using this ridiculous format?&lt;/li&gt;
  &lt;li&gt;Second, why is it so confusing to access the filesystem on my Android phone?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I plug my phone into my Ubuntu laptop’s USB.  Figuring out how to mount it was frustrating.&lt;br /&gt;
But fortunately, Nautilus File Manager somehow knew how to mount it.&lt;br /&gt;
Having no idea where it was mounted, I right clicked in Nautilus and selected “Open in a Terminal” or whatever.&lt;br /&gt;
Then I did a &lt;code class=&quot;highlighter-rouge&quot;&gt;find . -name \*.vcf&lt;/code&gt; to find the contacts.  I also exported my contacts in my “Phone App”.&lt;br /&gt;
Shouldn’t the contacts just.. be there?  Instead of having to export them?  Yeah yeah, proprietary format.&lt;/p&gt;

&lt;p&gt;Now let’s look at the .vcf files.&lt;br /&gt;
I open one up in VIM.  Then go to the end of the file.  The person I see there, is the last person I added to my phone.&lt;br /&gt;
Scrolling up, the contacts appear to be in chronological order.&lt;br /&gt;
Scrolling back to the top, I see… totally random contacts.  Some from 10 years ago, some from 5 years ago.
Those defintely aren’t in chronological order.  Perhaps they got mixed up since I’ve changed phones a couple times?&lt;/p&gt;

&lt;p&gt;Well, the reason I’m saying this is I have a problem.  I don’t know if all of my contacts are there, or just some of them.&lt;br /&gt;
For example, there are contacts stored on my SIM card.  Are they in the .vcf file?&lt;br /&gt;
Also, I had a couple other .vcf files on my phone, don’t remember when why or how, but they’re there.
Weirdly, the old ones are larger in size than this last one I just exported!  WHY????&lt;br /&gt;
Oh by the way, there are no dates for when the contacts were added.  I just had to guess by the person’s name and where 
I was living when I met them, when the contact was added.&lt;/p&gt;

&lt;p&gt;Whatever, it appears to be all of the contacts.  I’ll just grab all the .vcf files off the phone.&lt;br /&gt;
Also,  the contacts were exported to the SD card, not the phone flash.&lt;br /&gt;
&lt;strong&gt;So, if I just make a point to export my contacts every X days, then they’ll be in the SD card which means I can grab them in the event that the phone dies for real&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;fortunately-this-is-all-i-need-to-do&quot;&gt;Fortunately, this is all I need to do.&lt;/h1&gt;</content><author><name></name></author><summary type="html">I dropped my phone and it stopped working. After a short existential crisis, I went to the screen repair place the next day. It was replaced in an hour, fully functional. I got lucky that time. Eventually I won’t be so lucky. My contacts were not backed up. I need to be more careful. Grabbing .vcf’s off my phone. First, why the hell are we using this ridiculous format? Second, why is it so confusing to access the filesystem on my Android phone? I plug my phone into my Ubuntu laptop’s USB. Figuring out how to mount it was frustrating. But fortunately, Nautilus File Manager somehow knew how to mount it. Having no idea where it was mounted, I right clicked in Nautilus and selected “Open in a Terminal” or whatever. Then I did a find . -name \*.vcf to find the contacts. I also exported my contacts in my “Phone App”. Shouldn’t the contacts just.. be there? Instead of having to export them? Yeah yeah, proprietary format. Now let’s look at the .vcf files. I open one up in VIM. Then go to the end of the file. The person I see there, is the last person I added to my phone. Scrolling up, the contacts appear to be in chronological order. Scrolling back to the top, I see… totally random contacts. Some from 10 years ago, some from 5 years ago. Those defintely aren’t in chronological order. Perhaps they got mixed up since I’ve changed phones a couple times? Well, the reason I’m saying this is I have a problem. I don’t know if all of my contacts are there, or just some of them. For example, there are contacts stored on my SIM card. Are they in the .vcf file? Also, I had a couple other .vcf files on my phone, don’t remember when why or how, but they’re there. Weirdly, the old ones are larger in size than this last one I just exported! WHY???? Oh by the way, there are no dates for when the contacts were added. I just had to guess by the person’s name and where I was living when I met them, when the contact was added. Whatever, it appears to be all of the contacts. I’ll just grab all the .vcf files off the phone. Also, the contacts were exported to the SD card, not the phone flash. So, if I just make a point to export my contacts every X days, then they’ll be in the SD card which means I can grab them in the event that the phone dies for real Fortunately, this is all I need to do.</summary></entry><entry><title type="html">Clean Javascript means Independent of Framework</title><link href="/2018/03/29/clean-javascript-means-independent-of-framework.html" rel="alternate" type="text/html" title="Clean Javascript means Independent of Framework" /><published>2018-03-29T00:00:00-07:00</published><updated>2018-03-29T00:00:00-07:00</updated><id>/2018/03/29/clean-javascript-means-independent-of-framework</id><content type="html" xml:base="/2018/03/29/clean-javascript-means-independent-of-framework.html">&lt;p&gt;I have no interest in climbing steep learning curves for all these javascript frameworks.  Also I don’t want to learn stuff that will be obsolete soon.&lt;br /&gt;
That’s why I like C programming and embedded systems.  Nothing has really changed.  You learn it once and you’re good to go.&lt;br /&gt;
Somewhere in the middle of these 2 is Clean Architecture, or just modularity.&lt;/p&gt;

&lt;p&gt;I feel like React kind of throws a wrench into this.  Let me talk it out to myself.&lt;br /&gt;
JSX is not HTML.  It can be transformed into HTML, but it’s not HTML.  It would be nice if it was, so HTML could be reusable.&lt;br /&gt;
But we can ignore this and leave that hassle for the front end person.&lt;br /&gt;
I should be able to prototype my UI without any CSS, and the HTML should be throwaway code.&lt;/p&gt;

&lt;p&gt;It’s frustrating trying to take what I want, or what I already have, and make it work with React.  So, let’s not do that.  What if all the React code looked exactly like the examples on the web?  That solves 2 problems:  first it takes away the pain of working with the framework, second it keeps my “core logic” separated.&lt;/p&gt;

&lt;h2 id=&quot;what-are-some-of-the-essential-elements-of-react--why-am-i-even-using-it&quot;&gt;What are some of the essential elements of React.  Why am I even using it?&lt;/h2&gt;
&lt;p&gt;The component class:&lt;br /&gt;
A component has state, props, lifecycle events, and a render.&lt;/p&gt;

&lt;p&gt;When the state changes, the component rerenders.&lt;br /&gt;
Pieces of state can be passed to children as props.&lt;/p&gt;

&lt;h1 id=&quot;interesting--porting-vanilla-js-to-react-&quot;&gt;Interesting:  Porting Vanilla JS to React !!!&lt;/h1&gt;
&lt;p&gt;I have a vanilla JS function that creates some elements using &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement()&lt;/code&gt;, sets some to be children, populates some innerHTML, then returns the top parent.&lt;br /&gt;
How do I port this same function to React?  Well…. looks like I can’t.&lt;br /&gt;
Take a look at the vanilla version here:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function createMessageListEntryFromMessageDesc(md) {

    var d = document.createElement('div')
    var playbutton = document.createElement('button')

    // Set innerHTML of Button
    playbutton.innerHTML = md.topic
    if( md.customtopic ) {
        playbutton.innerHTML = md.customtopic
    }

    // Set Color of Button
    var color
    if( md.project == &quot;1&quot; ) {
      color = &quot;blue&quot;
    }
    else {
      color = &quot;gray&quot;
    }

    // Set Opacity of Button
    var opacity
    if( md.listenedto == false )
        opacity = &quot;1&quot;
    else
        opacity = &quot;0.2&quot;

    playbutton.setAttribute(&quot;style&quot;,
      &quot;background-color: &quot;+color+&quot;;font-size : 32px; opacity:&quot;+opacity);

    d.appendChild(playbutton)
    return d
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pretty straight forward.  It uses &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement()&lt;/code&gt; , sets properties &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHTML&lt;/code&gt; and calls method &lt;code class=&quot;highlighter-rouge&quot;&gt;setAttribute()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;appendChild()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now see what I did to make it work with React.  (without JSX)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function testerdom(md) {

    var text = md.topic
    if( md.customtopic ) {
        text = md.customtopic
    }
    // Set Color of Button
    var color
    if( md.project == &quot;1&quot; ) {
      color = &quot;blue&quot;
    }
    else {
      color = &quot;gray&quot;
    }

    // Set Opacity of Button
    var opacity
    if( md.listenedto == false )
        opacity = &quot;1&quot;
    else
        opacity = &quot;0.2&quot;

    var props = {
      style:{
        backgroundColor:color,
        fontSize: '32px',
        opacity:opacity
      }
    }
    var playbutton = React.createElement('button',props,text)
    var d = React.createElement('div',null,playbutton)
    return d
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, actually in terms of lines of code it isn’t horrible.  Those if statements are only setting plain old variables, so I can just factor those out.  The lame part is that &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createElement()&lt;/code&gt; has a totally different API from &lt;code class=&quot;highlighter-rouge&quot;&gt;document.createElement()&lt;/code&gt;.  The props, not only have to be converted to object like that, but it’s super annoying that the fields changed, eg. background-color changed to backgroundColor.  Being that I want to just do the bare minimum CSS, this is annoying.&lt;br /&gt;
1 more note, to set children of a node in react, you pass them into the parent when the parent is being created.  Notice the top level node, the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;, is created on the last line.  This is because React nodes are immutable.  In Plain JS, I could just &lt;code class=&quot;highlighter-rouge&quot;&gt;appendChild()&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;conversely-what-is-lacking-from-vanilla-js&quot;&gt;Conversely, what is lacking from Vanilla JS?&lt;/h2&gt;

&lt;h1 id=&quot;no-component-classes&quot;&gt;No Component Classes&lt;/h1&gt;
&lt;p&gt;What does a component class ala React do for me?&lt;br /&gt;
Lifecycle methods are cool.  With Vanilla JS, all I had was button onclick.&lt;/p&gt;

&lt;p&gt;Let’s do an experiment and mimic some of React’s behavior.&lt;br /&gt;
I want a HTML snippet like this&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;div id=root /&amp;gt;
&amp;lt;script src=&quot;my-vanilla.js&quot;/&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The javascript executes on load.  It will render my “App Component” under root.
&lt;em&gt;Phew, fortunately there are no ‘ characters in there&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Crap.  I can load my HTML from a file into the div, using jQuery, but, I need to ensure that the (JS that sets the button onClick handlers) is executed after the div is loaded.  Otherwise javascript says the element is null.&lt;/p&gt;

&lt;p&gt;OK, got out of that using the callback function on jQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;.  After the HTML is loaded, the callback executes JS which will assign the click handlers.&lt;/p&gt;

&lt;p&gt;This is not what I intend to do, this is just a refactor/saving of my work before I write different stuff.&lt;br /&gt;
I’d like to have components ala React.  To do that, I need to dynamically generate the HTML, not just load static HTML into a #div.  Well not necessarily; actually, inside the static HTML, I could put in stub IDs in the divs, which could be set to application specific stuff, if the surrounding tag is identified.&lt;/p&gt;

&lt;p&gt;To summarize.  What I did was take all the (JS that sets the button onclick handlers) , wrap all those into a function.  That function is called in the callback of jquery load.  Another thing I did was bring the declarations of those DOM object variables to the global scope, and initialized them in the wrapper function.  This gives other functions access to those global DOM objects.  Note the DOM objects were previously global.  They became function scope when I wrapped them into a function.  So I brought out only the declarations of their names to the global scope.&lt;/p&gt;

&lt;h1 id=&quot;thinking-out-loud-how-to-component-ize-my-widget&quot;&gt;Thinking out loud, how to Component-ize my widget?&lt;/h1&gt;
&lt;p&gt;My widget displays a list of messages between two people.&lt;br /&gt;
Really, the only things that need to be identified are those 2 people.&lt;/p&gt;

&lt;p&gt;Let’s list out actually what’s there:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Button to load messages&lt;/li&gt;
  &lt;li&gt;Array of messages that are loaded&lt;/li&gt;
  &lt;li&gt;2 Divs to hold each displayed message, one A-to-B and another B-to-A&lt;/li&gt;
  &lt;li&gt;AJAX call, which POSTs a form with the 2 people&lt;/li&gt;
  &lt;li&gt;AJAX callback, takes the result, passes to a function that renders&lt;/li&gt;
  &lt;li&gt;Rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rendering needs to create DOM elements that have IDs in them, and onclick handlers that can access those IDs.  For example to delete a message, the ID of the message has to be passed to a function when a button is clicked.&lt;/p&gt;

&lt;h1 id=&quot;obvious-realization-1&quot;&gt;Obvious Realization #1:&lt;/h1&gt;
&lt;h2 id=&quot;to-have-multiple-instances-of-the-same-thing-you-need-classes&quot;&gt;To have multiple instances of the same thing, you need classes.&lt;/h2&gt;
&lt;h2 id=&quot;actually-wait-maybe-we-can-just-use-objects&quot;&gt;Actually wait, maybe we can just use objects?&lt;/h2&gt;
&lt;p&gt;As with any other language, class will give you stuff like constructors, methods that can use &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;,&lt;/p&gt;

&lt;h1 id=&quot;embarassing-realization-2&quot;&gt;Embarassing Realization #2:&lt;/h1&gt;
&lt;p&gt;https://blog.angular-university.io/really-understanding-javascript-closures/
Just…. read this.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have no interest in climbing steep learning curves for all these javascript frameworks. Also I don’t want to learn stuff that will be obsolete soon. That’s why I like C programming and embedded systems. Nothing has really changed. You learn it once and you’re good to go. Somewhere in the middle of these 2 is Clean Architecture, or just modularity. I feel like React kind of throws a wrench into this. Let me talk it out to myself. JSX is not HTML. It can be transformed into HTML, but it’s not HTML. It would be nice if it was, so HTML could be reusable. But we can ignore this and leave that hassle for the front end person. I should be able to prototype my UI without any CSS, and the HTML should be throwaway code. It’s frustrating trying to take what I want, or what I already have, and make it work with React. So, let’s not do that. What if all the React code looked exactly like the examples on the web? That solves 2 problems: first it takes away the pain of working with the framework, second it keeps my “core logic” separated. What are some of the essential elements of React. Why am I even using it? The component class: A component has state, props, lifecycle events, and a render. When the state changes, the component rerenders. Pieces of state can be passed to children as props.</summary></entry><entry><title type="html">Javascript Sucks: Greatest Hits</title><link href="/2018/03/28/javascript-sucks-greatest-hits.html" rel="alternate" type="text/html" title="Javascript Sucks:  Greatest Hits" /><published>2018-03-28T00:00:00-07:00</published><updated>2018-03-28T00:00:00-07:00</updated><id>/2018/03/28/javascript-sucks-greatest-hits</id><content type="html" xml:base="/2018/03/28/javascript-sucks-greatest-hits.html">&lt;h1 id=&quot;heres-a-collection-of-snippets&quot;&gt;Here’s a collection of snippets&lt;/h1&gt;

&lt;h3 id=&quot;consolelogobject-is-a-live-reference--in-other-words--it-doesnt-actually-log&quot;&gt;console.log(object) is a live reference.  in other words:  it doesn’t actually log.&lt;/h3&gt;
&lt;p&gt;https://stackoverflow.com/a/38660899/9325070&lt;/p&gt;
&lt;h3 id=&quot;solution-jsonstringifyobject-and-log-the-string&quot;&gt;Solution, JSON.stringify(object) and log the string.&lt;/h3&gt;
&lt;p&gt;https://stackoverflow.com/a/4293047/9325070&lt;/p&gt;

&lt;h1 id=&quot;finally-an-article-that-doesnt-suck&quot;&gt;Finally an article that doesn’t suck&lt;/h1&gt;
&lt;p&gt;https://shanetomlinson.com/2013/testing-javascript-frontend-part-1-anti-patterns-and-fixes/&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s a collection of snippets</summary></entry><entry><title type="html">Create React App, Take 2</title><link href="/2018/03/25/create-react-app-take-2.html" rel="alternate" type="text/html" title="Create React App, Take 2" /><published>2018-03-25T00:00:00-07:00</published><updated>2018-03-25T00:00:00-07:00</updated><id>/2018/03/25/create-react-app-take-2</id><content type="html" xml:base="/2018/03/25/create-react-app-take-2.html">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;
&lt;p&gt;I got a react practice app going a month ago.  Tic-tac-toe demo.  Used create-react-app.&lt;br /&gt;
It was running on the development server for a bit.  Then I shut it down, now I wanted to bring it back up.&lt;br /&gt;
I just tried to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt; whatever it is, and it totally crashed my VPS.&lt;br /&gt;
All of my open ssh sessions were getting these printed…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Message from syslogd@caseyjones at Mar 26 04:56:10 ...
 kernel:[445167.403797] BUG: soft lockup - CPU#0 stuck for 25s! [node:363]

Message from syslogd@caseyjones at Mar 26 04:56:36 ...
 kernel:[445193.778113] BUG: soft lockup - CPU#0 stuck for 25s! [postgres:414]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Woah.  Maybe I ran out of RAM?  That’s a likely cause.  If not, that’s crazy.&lt;/p&gt;

&lt;h1 id=&quot;anyway-ill-reboot-with-the-admin-console-and-do-a-fresh-create-react-app&quot;&gt;Anyway, I’ll reboot with the admin console and do a fresh create-react-app&lt;/h1&gt;
&lt;h1 id=&quot;why-is-it-taking-so-long-i-dont-remember-it-taking-so-long&quot;&gt;Why is it taking so long… I don’t remember it taking so long&lt;/h1&gt;
&lt;h1 id=&quot;wow-i-didnt-realize-it-was-200mb-fresh-install--its-all-in-node_modules&quot;&gt;Wow I didn’t realize it was 200MB, fresh install.  It’s all in node_modules&lt;/h1&gt;

&lt;p&gt;OK, now the dev server is up.&lt;br /&gt;
My goal is to take some built JS and put it in my existing project.&lt;br /&gt;
Let’s just get straight to that.  run a &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-did-npm-run-build-do-&quot;&gt;What did npm run build do ?&lt;/h1&gt;
&lt;p&gt;First, &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.  It took the source index.html, &lt;code class=&quot;highlighter-rouge&quot;&gt;public/index.html&lt;/code&gt; , removed all the comments and white space, replaced the template &lt;code class=&quot;highlighter-rouge&quot;&gt;%PUBLIC_URL%&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;.  Ahh here’s the cool part, at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; , the following was inserted:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/static/js/main.ee7b2412.js&quot;&amp;gt;&lt;/code&gt;.&lt;br /&gt;
And of course, our .js is in there.&lt;br /&gt;
Cool, let’s see if I can just pop that main.ee7b2412.js into my static site, and stick a couple HTML tags to load it up.&lt;br /&gt;
So, in the HTML I need the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;br /&gt;
And at the end of the body I need this: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;react-app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;cool-that-works&quot;&gt;Cool, that works.&lt;/h1&gt;
&lt;p&gt;But, can’t use this for development, because it takes way too long to build the production site.  I’ll have to go back to the development server and just start over there.&lt;/p&gt;

&lt;h1 id=&quot;ok-i-need-another-refresher-this-stuff-did-not-stick-from-last-time&quot;&gt;OK I need another refresher… this stuff did not stick from last time.&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Everything in React is JS.  No HTML *&lt;/li&gt;
  &lt;li&gt;What is a class?&lt;/li&gt;
  &lt;li&gt;A class has a constructor that takes in &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; and sets initial &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A class has a method &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; that returns JSX markup.  JSX is the part that’s like HTML.&lt;/li&gt;
  &lt;li&gt;A class has life cycle methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;i-tried-to-copy-paste-some-bootstrap-html-as-a-starting-point&quot;&gt;I tried to copy paste some Bootstrap HTML as a starting point&lt;/h1&gt;
&lt;p&gt;Paste it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function’s return.&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface I got a react practice app going a month ago. Tic-tac-toe demo. Used create-react-app. It was running on the development server for a bit. Then I shut it down, now I wanted to bring it back up. I just tried to run npm start or npm run start whatever it is, and it totally crashed my VPS. All of my open ssh sessions were getting these printed… ``` Message from syslogd@caseyjones at Mar 26 04:56:10 … kernel:[445167.403797] BUG: soft lockup - CPU#0 stuck for 25s! [node:363]</summary></entry></feed>