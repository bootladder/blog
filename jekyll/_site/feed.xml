<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-03-12T10:55:29-07:00</updated><id>/</id><title type="html">Bootladder News</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Janus: Refactoring a Plugin</title><link href="/2018/03/11/janus-refactoring-a-plugin.html" rel="alternate" type="text/html" title="Janus: Refactoring a Plugin" /><published>2018-03-11T00:00:00-08:00</published><updated>2018-03-11T00:00:00-08:00</updated><id>/2018/03/11/janus-refactoring-a-plugin</id><content type="html" xml:base="/2018/03/11/janus-refactoring-a-plugin.html">&lt;p&gt;The sample Janus Plugins are written in C and they are very good.&lt;br /&gt;
But, it’s not very readable.  I’d like a higher level description of what the sample plugin app does.  Though the documentation is good, I still want a complete, high level description.  I’ll do this by refactoring, which will also allow me to take out reusable snippets.&lt;/p&gt;

&lt;p&gt;Particularly looking to refactor to improve:  separation of concerns  (single responsibility) .  Make it more obvious where the configuration file comes from.&lt;/p&gt;

&lt;h1 id=&quot;pre--notes&quot;&gt;Pre- Notes&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Because these plugins are .so shared modules, I should be able to build the plugin by itself, then test with a real Janus instance.  Janus’ build script builds the sample plugins with it, but that’s just for convenience.  As a product developer, what I would do is have a separate build environment, git repo, etc. for my new plugin, build it, then deploy it to the /path/to/janus/lib/janus/plugins/  (I believe that’s where you deploy them?)&lt;/li&gt;
  &lt;li&gt;Oh crap, it’s built with autotools, I forgot.  I have no idea, and no desire to learn autotools.  Hmm how do I build the plugin?&lt;/li&gt;
  &lt;li&gt;Ah yes, thank you https://github.com/mquander/janus-helloworld-plugin .  I will fork it!  Then copy over the recordplaytest demo!&lt;/li&gt;
  &lt;li&gt;Ah, it didn’t include any Janus headers, so those must come from the Janus installation on the server.  I don’t have Janus installed on my laptop. Let’s just make sure by attempting a build on my laptop.   Need jansson.  Ah yes, of course, plugins/plugin.h not found.  Let’s make sure that exists on the server installation.  Well it’s actually in /path/to/janus/include/janus/plugins .  Ah, checking the gcc -I flags, yes, it’s in there.  Good!  Eh, let’s build it on the cloud and then hook up a Jenkins later.&lt;/li&gt;
  &lt;li&gt;Cool, it builds on my server that has Janus.  Let’s… see if make install followed by restarting Janus will pick up the new plugin!
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JANUS AudioBridge plugin initialized!
Loading plugin 'libjanus_helloworld.so'...
JANUS hello world plugin initialized!
Loading plugin 'libjanus_recordplay.so'...
JANUS Record&amp;amp;Play plugin initialized!
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;yay&quot;&gt;Yay&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;Quick side note, to clean up the build I did a &lt;code class=&quot;highlighter-rouge&quot;&gt;git clean -f -d -x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now I can figure out how to change the name of the plugin and copy in the source from recordplaytest.  Well, doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -ir hello *&lt;/code&gt; , excluding janus_helloworld.c , only shows a few matches.  That’s cool, the name is not significant.  OK, it worked, but there are still “hello world” occurences in the source itself.&lt;/li&gt;
  &lt;li&gt;Before I copy paste the source from the recordplay plugin, let’s look at that &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i hello *&lt;/code&gt; again.  Lots of matches, but which of those actually matter?  The #defines at the top, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;#define JANUS_HELLOWORLD_PACKAGE &quot;janus.plugin.helloworld&quot;&lt;/code&gt; don’t need to change, because they are simply returned by the getters.  In other words, I can copy paste the source from recordplay_plugin, the names won’t be HELLO anymore, they’ll be RECORDPLAY, and this is OK.
The interface implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_plugin&lt;/code&gt; is a struct of function pointers, so the names don’t matter, they’re just function pointers.  The symbol name of that implementation is &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_helloworld_plugin&lt;/code&gt; , ie. &lt;code class=&quot;highlighter-rouge&quot;&gt;static janus_plugin janus_helloworld_plugin&lt;/code&gt; .  A pointer to this struct is returned by the &lt;code class=&quot;highlighter-rouge&quot;&gt;*create()&lt;/code&gt; function.&lt;br /&gt;
So, my conclusion is, I will only have to change the name of &lt;code class=&quot;highlighter-rouge&quot;&gt;janus.plugin.recordplay&lt;/code&gt; or whatever it is, to something else, so the plugin namespace does not collide.&lt;/li&gt;
  &lt;li&gt;Now I can copy paste the source.  Ah crap.  There are headers in janus-gateway repo that have to be included in the build.  I don’t know how to do that in autotools.  Dang!   Oh, looking at Makefile.am , it appears I can specify a -I flag.  Oh, I don’t need to go to the source, the headers are exported in the Janus install.  Oh, the headers directory is already there!  Problem was the &lt;code class=&quot;highlighter-rouge&quot;&gt;../blah.h&lt;/code&gt; should be &lt;code class=&quot;highlighter-rouge&quot;&gt;blah.h&lt;/code&gt; .  Changing that…  OK, I built it again with &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, no need to do any more autotools stuff.  I get an error, plugin could not be initialized because no configuration file could be read.  Let’s copy one in there… &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/janus/etc/janus/&lt;/code&gt;  Yay, now it works!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;beginning-to-understand-the-plugin&quot;&gt;Beginning to understand the plugin&lt;/h1&gt;
&lt;p&gt;The first function definitions are the static helper functions, which is OK convention.  The first plugin implementation function is &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;.  This is called by Janus when Janus starts.  I saw this before, when Janus failed to start because a plugin couldn’t be initialized.  &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; first reads the configuration file, which is assumed to have &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;%s/%s.cfg&quot; format.  The path to the config files is an argument to &lt;/code&gt;init()&lt;code class=&quot;highlighter-rouge&quot;&gt; , which somehow must come from Janus.  The config file includes a path to where the recordings are stored.  That path is stored in a variable.  &lt;/code&gt;notify_events&lt;code class=&quot;highlighter-rouge&quot;&gt; is a static boolean, which is checked later before doing &lt;/code&gt;gateway-&amp;gt;notify_event` for sending an event.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;recordings = g_hast_table_new_full&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions = g_hst_table_new&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;messages = g_async_queue_new_full&lt;/code&gt; .&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handler_thread = g_thread_try_new&lt;/code&gt; starts a thread with function &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_handler&lt;/code&gt;  .  Oh god, that function is a monster, 421 lines, tons of if statements.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">The sample Janus Plugins are written in C and they are very good. But, it’s not very readable. I’d like a higher level description of what the sample plugin app does. Though the documentation is good, I still want a complete, high level description. I’ll do this by refactoring, which will also allow me to take out reusable snippets. Particularly looking to refactor to improve: separation of concerns (single responsibility) . Make it more obvious where the configuration file comes from. Pre- Notes Because these plugins are .so shared modules, I should be able to build the plugin by itself, then test with a real Janus instance. Janus’ build script builds the sample plugins with it, but that’s just for convenience. As a product developer, what I would do is have a separate build environment, git repo, etc. for my new plugin, build it, then deploy it to the /path/to/janus/lib/janus/plugins/ (I believe that’s where you deploy them?) Oh crap, it’s built with autotools, I forgot. I have no idea, and no desire to learn autotools. Hmm how do I build the plugin? Ah yes, thank you https://github.com/mquander/janus-helloworld-plugin . I will fork it! Then copy over the recordplaytest demo! Ah, it didn’t include any Janus headers, so those must come from the Janus installation on the server. I don’t have Janus installed on my laptop. Let’s just make sure by attempting a build on my laptop. Need jansson. Ah yes, of course, plugins/plugin.h not found. Let’s make sure that exists on the server installation. Well it’s actually in /path/to/janus/include/janus/plugins . Ah, checking the gcc -I flags, yes, it’s in there. Good! Eh, let’s build it on the cloud and then hook up a Jenkins later. Cool, it builds on my server that has Janus. Let’s… see if make install followed by restarting Janus will pick up the new plugin! JANUS AudioBridge plugin initialized! Loading plugin 'libjanus_helloworld.so'... JANUS hello world plugin initialized! Loading plugin 'libjanus_recordplay.so'... JANUS Record&amp;amp;Play plugin initialized! Yay Quick side note, to clean up the build I did a git clean -f -d -x Now I can figure out how to change the name of the plugin and copy in the source from recordplaytest. Well, doing a grep -ir hello * , excluding janus_helloworld.c , only shows a few matches. That’s cool, the name is not significant. OK, it worked, but there are still “hello world” occurences in the source itself. Before I copy paste the source from the recordplay plugin, let’s look at that grep -i hello * again. Lots of matches, but which of those actually matter? The #defines at the top, eg. #define JANUS_HELLOWORLD_PACKAGE &quot;janus.plugin.helloworld&quot; don’t need to change, because they are simply returned by the getters. In other words, I can copy paste the source from recordplay_plugin, the names won’t be HELLO anymore, they’ll be RECORDPLAY, and this is OK. The interface implementation, janus_plugin is a struct of function pointers, so the names don’t matter, they’re just function pointers. The symbol name of that implementation is janus_helloworld_plugin , ie. static janus_plugin janus_helloworld_plugin . A pointer to this struct is returned by the *create() function. So, my conclusion is, I will only have to change the name of janus.plugin.recordplay or whatever it is, to something else, so the plugin namespace does not collide. Now I can copy paste the source. Ah crap. There are headers in janus-gateway repo that have to be included in the build. I don’t know how to do that in autotools. Dang! Oh, looking at Makefile.am , it appears I can specify a -I flag. Oh, I don’t need to go to the source, the headers are exported in the Janus install. Oh, the headers directory is already there! Problem was the ../blah.h should be blah.h . Changing that… OK, I built it again with make, no need to do any more autotools stuff. I get an error, plugin could not be initialized because no configuration file could be read. Let’s copy one in there… /path/to/janus/etc/janus/ Yay, now it works! Beginning to understand the plugin The first function definitions are the static helper functions, which is OK convention. The first plugin implementation function is init. This is called by Janus when Janus starts. I saw this before, when Janus failed to start because a plugin couldn’t be initialized. init first reads the configuration file, which is assumed to have &quot;%s/%s.cfg&quot; format. The path to the config files is an argument to init() , which somehow must come from Janus. The config file includes a path to where the recordings are stored. That path is stored in a variable. notify_events is a static boolean, which is checked later before doing gateway-&amp;gt;notify_event` for sending an event. Now, recordings = g_hast_table_new_full , sessions = g_hst_table_new , messages = g_async_queue_new_full . handler_thread = g_thread_try_new starts a thread with function janus_recordplay_handler . Oh god, that function is a monster, 421 lines, tons of if statements.</summary></entry><entry><title type="html">Janus Notes</title><link href="/2018/03/09/janus-notes.html" rel="alternate" type="text/html" title="Janus Notes" /><published>2018-03-09T00:00:00-08:00</published><updated>2018-03-09T00:00:00-08:00</updated><id>/2018/03/09/janus-notes</id><content type="html" xml:base="/2018/03/09/janus-notes.html">&lt;p&gt;It appears that Janus is what I want.  I may have to apply browser-side recording, but first I’ll see how far Janus goes with server side.&lt;br /&gt;
Apparently, browsers can connect peer to peer to a Janus server.&lt;/p&gt;

&lt;p&gt;Obviously with all the acquisitions happening in this space, I’d like my app to be independent of Janus, source-wise and functionality-wise.&lt;/p&gt;

&lt;p&gt;Well I guess the first thing to do is install it on a server.&lt;br /&gt;
Let’s compile it for fun.&lt;/p&gt;

&lt;h1 id=&quot;compiling-janus-from-the-readme&quot;&gt;Compiling Janus (from the README)&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/meetecho/janus-gateway.git
cd janus-gateway
sh autogen.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;My debian 8 VPS didn’t have autoreconf.  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install autoconf&lt;/code&gt;&lt;br /&gt;
Then got this error &lt;code class=&quot;highlighter-rouge&quot;&gt;configure.ac:5: error: possibly undefined macro: AC_ENABLE_SHARED&lt;/code&gt;  , &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libtool&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install gettext&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install pkg-config&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure --prefix=/opt/janus --disable-websockets --disable-data-channels --disable-rabbitmq --disable-mqtt&lt;/code&gt;&lt;br /&gt;
Now tells me the packages I’m missing.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No package 'glib-2.0' found
No package 'nice' found
No package 'jansson' found
No package 'libssl' found
No package 'libcrypto' found
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hmm, didn’t know about jansson, that’s cool, a JSON library in C.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install glib-2.0
sudo apt install libjansson-dev
sudo apt install libnice-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Oh, somehow I missed this, I’ll just run the one liner from the README&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	aptitude install libmicrohttpd-dev libjansson-dev libnice-dev \
		libssl-dev libsrtp-dev libsofia-sip-ua-dev libglib2.0-dev \
		libopus-dev libogg-dev libcurl4-openssl-dev pkg-config gengetopt \
		libtool automake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As mentioned in README, apt install libsrtp didn’t work.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	wget https://github.com/cisco/libsrtp/archive/v1.5.4.tar.gz
	tar xfv v1.5.4.tar.gz
	cd libsrtp-1.5.4
	./configure --prefix=/usr --enable-openssl
	make shared_library &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Nice, here’s my configure output&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libsrtp version:           1.5.x
SSL/crypto library:        OpenSSL
DTLS set-timeout:          not available
DataChannels support:      no
Recordings post-processor: no
TURN REST API client:      yes
Doxygen documentation:     no
Transports:
    REST (HTTP/HTTPS):     yes
    WebSockets:            no
    RabbitMQ:              no
    MQTT:                  no
    Unix Sockets:          yes
Plugins:
    Echo Test:             yes
    Streaming:             yes
    Video Call:            yes
    SIP Gateway (Sofia):   yes
    SIP Gateway (libre):   no
    NoSIP (RTP Bridge):    yes
    Audio Bridge:          yes
    Video Room:            yes
    Voice Mail:            yes
    Record&amp;amp;Play:           yes
    Text Room:             yes
Event handlers:
    Sample event handler:  yes
    RabbitMQ event handler:no
JavaScript modules:        no
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Alright, a make, sudo make install, sudo make configs all worked!&lt;/p&gt;

&lt;p&gt;OK, now how do I connect to Janus?&lt;/p&gt;

&lt;h1 id=&quot;connecting-to-janus&quot;&gt;Connecting to Janus&lt;/h1&gt;

&lt;p&gt;I’m running the audiobridge demo.  The audiobridge.js has a hard coded URL for the Janus server.  I’m using this locally, ie. file:// , which I know only works on Firefox right now.  But this code won’t work…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var server = null;
if(window.location.protocol === 'http:')
  server = &quot;http://&quot; + window.location.hostname + &quot;:8088/janus&quot;;
else
  server = &quot;https://&quot; + window.location.hostname + &quot;:8089/janus&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So I will change this to set server = http://myexplicitURL:8088 ?&lt;/p&gt;

&lt;p&gt;Oh, first I have to run Janus.  It says &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP webserver started (port 8088, /janus path listener)...&lt;/code&gt;
Oh nice, some debugging help.  I point my browser to mydomain:8088 and it says Invalid URL.  Then I try mydomain:8088/janus and I get Invalid session.  That looks good!  Let’s change the audiobridge.js to that.&lt;/p&gt;

&lt;p&gt;Oh snap!  Getting some good logs in the console.&lt;br /&gt;
Dang, I can’t connect another peer because I loaded this locally.  Instead of bothering to copy the files to another machine, I should just serve them.&lt;/p&gt;

&lt;h1 id=&quot;connecting-to-janus-with-2-peers&quot;&gt;Connecting to Janus with 2 peers&lt;/h1&gt;
&lt;p&gt;So, not surpisingly, I’m getting issues with HTTPS.  Somehow I have to get it right, Janus over HTTPS, webserver over HTTPS, HTTPS proxy to a Janus over HTTP, whatever.  Well, I figured out how to get Beego framework to serve static pages over HTTPS, so that’ll do.  Don’t know what to do with Janus.  Let’s just put the static page in a running Beego server and see what happens.&lt;/p&gt;</content><author><name></name></author><summary type="html">It appears that Janus is what I want. I may have to apply browser-side recording, but first I’ll see how far Janus goes with server side. Apparently, browsers can connect peer to peer to a Janus server. Obviously with all the acquisitions happening in this space, I’d like my app to be independent of Janus, source-wise and functionality-wise.</summary></entry><entry><title type="html">Javascript Notes: The Relearning</title><link href="/2018/03/07/javascript-notes-the-relearning.html" rel="alternate" type="text/html" title="Javascript Notes: The Relearning" /><published>2018-03-07T00:00:00-08:00</published><updated>2018-03-07T00:00:00-08:00</updated><id>/2018/03/07/javascript-notes-the-relearning</id><content type="html" xml:base="/2018/03/07/javascript-notes-the-relearning.html">&lt;p&gt;Learning to use this demo: https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/audio-recording.html&lt;br /&gt;
Starting from the top… What is this?  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;&amp;gt;&lt;/code&gt;  ah of course, it’s for mobile devices.  https://stackoverflow.com/questions/14775195/is-the-viewport-meta-tag-really-necessary&lt;/p&gt;

&lt;p&gt;What is this?  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;audio controls autoplay&amp;gt;&amp;lt;/audio&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;  It’s the audio widget, which I did not know was an HTML tag.  &lt;code class=&quot;highlighter-rouge&quot;&gt;controls&lt;/code&gt; shows the play, seek, volume controls, &lt;code class=&quot;highlighter-rouge&quot;&gt;autoplay&lt;/code&gt; plays without pressing play.&lt;/p&gt;

&lt;p&gt;What is this?  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;   Oh… we need to use this adapter for cross browser compatibility, insulating us from name changes.&lt;/p&gt;

&lt;p&gt;Why does the demo code declare vars all over the place… Let’s move them to the top.  Demo still works.&lt;/p&gt;

&lt;p&gt;So.. the control flow here is convoluted, impossible to read top to bottom.  Let’s start from pressing the “Start Recording” button.  Using the inspector I see the button has a click event.  I see where this is set, and I’ll move it to the top.  Ah finally some sense; all the click handlers are set in a block.  So I’ll just move all the click handlers to the top.&lt;/p&gt;

&lt;p&gt;Alright, the btnStartRecording.onclick.  This smells bad, I’m pretty sure?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;btnStartRecording.onclick = function() {
    this.disabled = true;
    this.style.border = '';
    this.style.fontSize = '';

    if (!microphone) {
        captureMicrophone(function(mic) {
            microphone = mic;

// Different behavior for Safari?  Changes button style, does an alert?
            if(isSafari) {
                replaceAudio();

                audio.muted = true;
                setSrcObject(microphone, audio);
                audio.play();

                btnStartRecording.disabled = false;
                btnStartRecording.style.border = '1px solid red';
                btnStartRecording.style.fontSize = '150%';

                alert('Please click startRecording button again. First time we tried to access your microphone. Now we will record it.');
                return;
//Return from calling function inside callback?  What?
            }

//Calling this function again, using a helper named click which,
//instead of calling the function, sends another click event?
//Hmm, maybe because we want the call to happen asynchronous to this
//function call we're currently in, as opposed to recursive?
            click(btnStartRecording);
        });
        return;
    }
console.log(&quot;\ndid we get here?\n&quot;);
    replaceAudio();

    audio.muted = true;
    setSrcObject(microphone, audio);
    audio.play();

    var options = {
        type: 'audio',
        numberOfAudioChannels: isEdge ? 1 : 2,
        checkForInactiveTracks: true,
        bufferSize: 16384
    };

    if(navigator.platform &amp;amp;&amp;amp; navigator.platform.toString().toLowerCase().indexOf('win') === -1) {
        options.sampleRate = 48000; // or 44100 or remove this line for default
    }

    if(recorder) {
        recorder.destroy();
        recorder = null;
    }

    recorder = RecordRTC(microphone, options);

    recorder.startRecording();

    btnStopRecording.disabled = false;
    btnDownloadRecording.disabled = true;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What happens when I Do Not Allow access to the microphone?  The console.log does not get logged.&lt;/p&gt;

&lt;p&gt;First I refresh the page. Then click the button.  The microphone is null so captureMicrophone() is called.  captureMicrophone() sets the Release Button (a global variable) to not disabled.  captureMicrophone() then checks that same microphone global, which is still null at this time.  Then tries to getUserMedia(), and since I Do Not Allow, we get the alert.  Ah.. at this point the function returns, but Does Not call the Callback!  So, the Start Recording click handler returns, and that’s the end of the story.&lt;/p&gt;

&lt;p&gt;Now, what happens when I Allow Access to the microphone?&lt;br /&gt;
Here we see the real magic, navigator.mediaDevices.getUserMedia() , which appears to take some configuration object?  On success the callback is called, with the mic being passed in from getUserMedia?  Then in the callback, if it’s safari the user is required to press the button again, but otherwise the click() helper function generates another click event.  This time, the global variable microphone is not-null, so we go on to the end of the function where the recording actually happens.&lt;/p&gt;

&lt;p&gt;replaceAudio() , don’t know why this is necessary, it replaces the &lt;audio&gt; tag with a new one, with optional src to be specified.  Why not just use the existing one without replacing it?&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;setSrcObject() is a RecordRTC function, does it attach the microphone to the &lt;audio&gt; widget?  and then audio.play() moves the seeker and changes the play button to a pause button.  audio.muted=true is there, to stop playback during record, which would cause feedback.&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;Then, if there’s a recorder it is destroyed, and then we create the RecordRTC object and start recording.&lt;/p&gt;

&lt;h1 id=&quot;note-what-is-navigator&quot;&gt;note, what is navigator?&lt;/h1&gt;
&lt;p&gt;The navigator object contains information about the browser.&lt;br /&gt;
In this demo we see&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;navigator.platform        == 'win'
navigator.mediaDevices
navigator.mediaDevices.getUserMedia
navigator.userAgent       == 'Safari'
navigator.msSaveOrOpenBlob
navigator.msSaveBlob
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Stop Recording Button click handler calls recorder.stopRecording, which will then call the stopRecordingCallback() which calls replaceAudio() and then audio.play()&lt;/p&gt;</content><author><name></name></author><summary type="html">Learning to use this demo: https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/audio-recording.html Starting from the top… What is this? &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;&amp;gt; ah of course, it’s for mobile devices. https://stackoverflow.com/questions/14775195/is-the-viewport-meta-tag-really-necessary What is this? &amp;lt;div&amp;gt;&amp;lt;audio controls autoplay&amp;gt;&amp;lt;/audio&amp;gt;&amp;lt;/div&amp;gt; It’s the audio widget, which I did not know was an HTML tag. controls shows the play, seek, volume controls, autoplay plays without pressing play. What is this? &amp;lt;script src=&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Oh… we need to use this adapter for cross browser compatibility, insulating us from name changes. Why does the demo code declare vars all over the place… Let’s move them to the top. Demo still works. So.. the control flow here is convoluted, impossible to read top to bottom. Let’s start from pressing the “Start Recording” button. Using the inspector I see the button has a click event. I see where this is set, and I’ll move it to the top. Ah finally some sense; all the click handlers are set in a block. So I’ll just move all the click handlers to the top. Alright, the btnStartRecording.onclick. This smells bad, I’m pretty sure? ``` btnStartRecording.onclick = function() { this.disabled = true; this.style.border = ‘’; this.style.fontSize = ‘’;</summary></entry><entry><title type="html">Remove Secret Data from Old git Commits not yet pushed</title><link href="/2018/02/09/remove-secret-data-from-old-git-commits-not-yet-pushed.html" rel="alternate" type="text/html" title="Remove Secret Data from Old git Commits not yet pushed" /><published>2018-02-09T00:00:00-08:00</published><updated>2018-02-09T00:00:00-08:00</updated><id>/2018/02/09/remove-secret-data-from-old-git-commits-not-yet-pushed</id><content type="html" xml:base="/2018/02/09/remove-secret-data-from-old-git-commits-not-yet-pushed.html">&lt;p&gt;I didn’t push to the remote yet. The very initial commit of my repo has an API token in it.&lt;br /&gt;
My current verison still has that API token in it.&lt;br /&gt;
I want to replace the token at the initial commit, then I want to rebase all the other commits after that.&lt;br /&gt;
To do this, I’ll make a dummy branch at master so I don’t lose that branch.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch dummybranch&lt;/code&gt;&lt;br /&gt;
Then I’ll &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout init_commit_sha1&lt;/code&gt;&lt;br /&gt;
Then make a branch to name it, &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch initcommit&lt;/code&gt;.&lt;br /&gt;
Then I will modify code here, removing the secret data.&lt;br /&gt;
Oops!  I’m stupid.  I need to remove the initial commit from the history.&lt;/p&gt;

&lt;p&gt;So, now my plan is to create a new repository, starting with the working copy of the initial commit, but with no commits in this new repository yet.&lt;br /&gt;
Then I will add my bad repo as a remote, fetch all the commits, and 
hopefully see a way to rebase the commits.&lt;/p&gt;

&lt;p&gt;Crap !  Turns out I have commits in the middle of the history that
has another occurrence of the secret data, then a commit where gofmt
indented the line with the secret data.&lt;br /&gt;
You know what, I’ll go with the Internet’s advice.  I’ll squash all the commits
into 1 commit, totally wasting all my history but whatever.&lt;br /&gt;
What I’ll do is add a new commit after master that removes all occurrences
of the secret data.  Then I’ll squash everything, so the secret data is not in that squashed commit.&lt;/p&gt;

&lt;p&gt;Crap !  The squashed commit contains a deletion of an occurrence of the secret data!&lt;br /&gt;
Well dang, I don’t know what to do.  I’ll just give up, start a new repo history from where I’m at now, after removing all occurrences of the secret data.&lt;/p&gt;</content><author><name></name></author><summary type="html">I didn’t push to the remote yet. The very initial commit of my repo has an API token in it. My current verison still has that API token in it. I want to replace the token at the initial commit, then I want to rebase all the other commits after that. To do this, I’ll make a dummy branch at master so I don’t lose that branch. git branch dummybranch Then I’ll git checkout init_commit_sha1 Then make a branch to name it, git branch initcommit. Then I will modify code here, removing the secret data. Oops! I’m stupid. I need to remove the initial commit from the history. So, now my plan is to create a new repository, starting with the working copy of the initial commit, but with no commits in this new repository yet. Then I will add my bad repo as a remote, fetch all the commits, and hopefully see a way to rebase the commits. Crap ! Turns out I have commits in the middle of the history that has another occurrence of the secret data, then a commit where gofmt indented the line with the secret data. You know what, I’ll go with the Internet’s advice. I’ll squash all the commits into 1 commit, totally wasting all my history but whatever. What I’ll do is add a new commit after master that removes all occurrences of the secret data. Then I’ll squash everything, so the secret data is not in that squashed commit. Crap ! The squashed commit contains a deletion of an occurrence of the secret data! Well dang, I don’t know what to do. I’ll just give up, start a new repo history from where I’m at now, after removing all occurrences of the secret data.</summary></entry><entry><title type="html">React and AngularJS Notes</title><link href="/2018/02/06/react-and-angularjs-notes.html" rel="alternate" type="text/html" title="React and AngularJS Notes" /><published>2018-02-06T00:00:00-08:00</published><updated>2018-02-06T00:00:00-08:00</updated><id>/2018/02/06/react-and-angularjs-notes</id><content type="html" xml:base="/2018/02/06/react-and-angularjs-notes.html">&lt;h1 id=&quot;react&quot;&gt;React&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;A component is a self-contained module that renders some output
** For example, a button.  A component might include one or more other components in its output.  eg. a Form.&lt;/li&gt;
  &lt;li&gt;Wow, this caching thing on index.html is pretty terrible for a new user.&lt;/li&gt;
  &lt;li&gt;All components have a &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function that SPECIFIES what the HTML output of the COMPONENT is.&lt;/li&gt;
  &lt;li&gt;JSX: JS Extension, allows writing JS that LOOKS LIKE HTML
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class HelloWorld extends React.Component {
  render() {  //The component has a RENDER Function
 return (  //The render function RETURNS HTML
   &amp;lt;h1 className='large'&amp;gt;Hello World&amp;lt;/h1&amp;gt;  //THIS IS NOT ACTUALLY HTML
 );
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;h1 className GETS CONVERTED TO class.  This is because CLASS IS A RESERVED JS KEYWORD.&lt;/li&gt;
  &lt;li&gt;JSX is very convenient notation for writing nested HTML snippets&lt;/li&gt;
  &lt;li&gt;In order to load React from &lt;script&gt;&lt;/script&gt; , ie. client side, the following is needeed:&lt;/li&gt;
  &lt;li&gt;react.min.js , react-dom.min.js, babel-core@x.x.x/browser.min.js&lt;/li&gt;
  &lt;li&gt;Babel is a library for transpiling ES6 to ES5.&lt;/li&gt;
  &lt;li&gt;Inside the body we have the following:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/babel&quot;&amp;gt;
var app = &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
var mountComponent = document.querySelector('#app');
ReactDOM.render(app, mountComponent);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This tells Bable to convert the above ES6 into ES5&lt;/li&gt;
  &lt;li&gt;render() :  &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render(&amp;lt;what&amp;gt;, &amp;lt;where&amp;gt;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Interesting, in this case the WHERE is #app.  In other tutorials it was document root.&lt;/li&gt;
  &lt;li&gt;In the above snippet, app is a HTML snippet, directly passed into render().&lt;/li&gt;
  &lt;li&gt;Another way to do it is this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render(&amp;lt;App /&amp;gt;, mount);&lt;/code&gt; Where App is a class like class HelloWorld&lt;/li&gt;
  &lt;li&gt;Ah, this makes sense why I struggled with the meta tags.  They go inside head.  In
 these examples, the rendering goes to document root or a #hash section.&lt;/li&gt;
  &lt;li&gt;As a test, I should be able to call render() twice in a row and get 2 components to render.
** Cool.  After doing that I saw that, if render() is called twice in a row on the same DOM mount (what’s it called?)
This is intuitive, the DOM mount gets overwritten.  Using 2 div tags with different classes, render() can be called on each of them.&lt;/li&gt;
  &lt;li&gt;A “Wrapper” component combines multiple components.  The Wrapper will have divs with classnames.&lt;br /&gt;
The Wrapper will nest other divs inside those divs, with classnames.  Those child components 
can be used in the Parent by tag notation.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class App extends React.Component {
render() {
  return (
    &amp;lt;div className=&quot;notificationsFrame&quot;&amp;gt;
      &amp;lt;div className=&quot;panel&quot;&amp;gt;
        &amp;lt;Header /&amp;gt;
        &amp;lt;Content /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;to-add-data-ie-props-to-a-component&quot;&gt;To add data ie. props to a component&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;Write something like this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Header title=&quot;My Header&quot;&amp;gt;&lt;/code&gt; It is picked up by the Component liek this:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span className=&quot;title&quot;&amp;gt;
{this.props.title}
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;httpsreactjsorgtutorialtutorialhtml-was-informative&quot;&gt;https://reactjs.org/tutorial/tutorial.html was informative&lt;/h1&gt;
    &lt;h1 id=&quot;httpsreactjsorgdocsstate-and-lifecyclehtml&quot;&gt;https://reactjs.org/docs/state-and-lifecycle.html&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;I need to learn how setting state works.&lt;/li&gt;
  &lt;li&gt;Do I need a constructor to have this.state?&lt;/li&gt;
  &lt;li&gt;Is this.setState() the only way to set state? (except initializing state in constructor?)&lt;/li&gt;
  &lt;li&gt;This is what I’m doing:
** In render() I am using {this.state.mystatevar}
** In componentDidMount() I am using this.setState{mystatevar:myval};
** But the console says error: cannot read property mystatevar of null.
** It appears the answer is Yes, you have to declare the different state variables in the constructor&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;uggh-i-dont-know-how-to-separate-the-js-into-different-js-files&quot;&gt;Uggh, I don’t know how to separate the JS into different .js files.&lt;/h1&gt;
&lt;h1 id=&quot;all-i-want-is-a-indexhtml-and-a-indexjs&quot;&gt;All I want is a index.html and a index.js&lt;/h1&gt;

&lt;h1 id=&quot;angularjs&quot;&gt;AngularJS&lt;/h1&gt;
&lt;p&gt;First you have this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoApp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;
And eventually this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div ng-controller=&quot;TodoListController as todoList&quot;&amp;gt;&lt;/code&gt;
Then in the .js you have:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module('todoApp', [])
  .controller('TodoListController', function() {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The names have to match.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoApp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;  Does not have to be at the top, or in a html tag.&lt;br /&gt;
In order to use $http requests, the controller is passed $http.  As in this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module('myapp', [])
  .controller('myController', function($http) {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;$http will give &lt;code class=&quot;highlighter-rouge&quot;&gt;No 'Access-Control-Allow-Origin' header is present on the requested resource.'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meh, I don’t like it.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;As soon as I found out how much has changed over the versions I immediately quit.  I’m not going to bother learning the history when I already think it sucks&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">React A component is a self-contained module that renders some output ** For example, a button. A component might include one or more other components in its output. eg. a Form. Wow, this caching thing on index.html is pretty terrible for a new user. All components have a render function that SPECIFIES what the HTML output of the COMPONENT is. JSX: JS Extension, allows writing JS that LOOKS LIKE HTML class HelloWorld extends React.Component { render() { //The component has a RENDER Function return ( //The render function RETURNS HTML &amp;lt;h1 className='large'&amp;gt;Hello World&amp;lt;/h1&amp;gt; //THIS IS NOT ACTUALLY HTML ); } } h1 className GETS CONVERTED TO class. This is because CLASS IS A RESERVED JS KEYWORD. JSX is very convenient notation for writing nested HTML snippets In order to load React from , ie. client side, the following is needeed: react.min.js , react-dom.min.js, babel-core@x.x.x/browser.min.js Babel is a library for transpiling ES6 to ES5. Inside the body we have the following: &amp;lt;script type=&quot;text/babel&quot;&amp;gt; var app = &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt; var mountComponent = document.querySelector('#app'); ReactDOM.render(app, mountComponent); &amp;lt;/script&amp;gt; This tells Bable to convert the above ES6 into ES5 render() : ReactDOM.render(&amp;lt;what&amp;gt;, &amp;lt;where&amp;gt;) Interesting, in this case the WHERE is #app. In other tutorials it was document root. In the above snippet, app is a HTML snippet, directly passed into render(). Another way to do it is this: ReactDOM.render(&amp;lt;App /&amp;gt;, mount); Where App is a class like class HelloWorld Ah, this makes sense why I struggled with the meta tags. They go inside head. In these examples, the rendering goes to document root or a #hash section. As a test, I should be able to call render() twice in a row and get 2 components to render. ** Cool. After doing that I saw that, if render() is called twice in a row on the same DOM mount (what’s it called?) This is intuitive, the DOM mount gets overwritten. Using 2 div tags with different classes, render() can be called on each of them. A “Wrapper” component combines multiple components. The Wrapper will have divs with classnames. The Wrapper will nest other divs inside those divs, with classnames. Those child components can be used in the Parent by tag notation. class App extends React.Component { render() { return ( &amp;lt;div className=&quot;notificationsFrame&quot;&amp;gt; &amp;lt;div className=&quot;panel&quot;&amp;gt; &amp;lt;Header /&amp;gt; &amp;lt;Content /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) } } To add data ie. props to a component Write something like this: &amp;lt;Header title=&quot;My Header&quot;&amp;gt; It is picked up by the Component liek this: &amp;lt;span className=&quot;title&quot;&amp;gt; {this.props.title} &amp;lt;/span&amp;gt; https://reactjs.org/tutorial/tutorial.html was informative https://reactjs.org/docs/state-and-lifecycle.html I need to learn how setting state works. Do I need a constructor to have this.state? Is this.setState() the only way to set state? (except initializing state in constructor?) This is what I’m doing: ** In render() I am using {this.state.mystatevar} ** In componentDidMount() I am using this.setState{mystatevar:myval}; ** But the console says error: cannot read property mystatevar of null. ** It appears the answer is Yes, you have to declare the different state variables in the constructor</summary></entry><entry><title type="html">CMake: Building an App for Multiple Targets</title><link href="/2018/01/22/cmake-building-an-app-for-multiple-targets.html" rel="alternate" type="text/html" title="CMake: Building an App for Multiple Targets" /><published>2018-01-22T00:00:00-08:00</published><updated>2018-01-22T00:00:00-08:00</updated><id>/2018/01/22/cmake-building-an-app-for-multiple-targets</id><content type="html" xml:base="/2018/01/22/cmake-building-an-app-for-multiple-targets.html">&lt;p&gt;I have an application, it’s a sniffer.&lt;br /&gt;
I want it to run on bare metal, on an OS, and on multiple CPU targets.&lt;br /&gt;
Basically anything with a SPI port and the radio should be able to run this.&lt;br /&gt;
OK, looks like it worked.  Here’s what I learned:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steve@steve-ThinkPad-T420:~/prog/debos/debos_sniffer$ tree
.
├── build.sh
├── CMakeLists.txt
├── Makefile
├── platform
│   ├── CMakeLists.txt
│   ├── samd20_baremetal
│   └── samd20_debos
│       ├── atsamd20j18.ld
│       ├── CMakeLists.txt
│       └── halStartup.c
├── README.md
├── src
│   ├── app.c
│   ├── my_memcpy.c
│   ├── my_memcpy.h
│   └── System.h
└── tool
    ├── sniffer_parser_lwmesh.py
    └── sniffer_reader.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#### The Top Level CMakeLists.txt
cmake_minimum_required(VERSION 3.5)

add_subdirectory(platform)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#### The platform/ CMakeLists.txt
add_subdirectory(samd20_debos)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, here’s where all the original stuff went.  platform/samd20_debos CMakeLists.txt.  I made a few modifications to it.&lt;/p&gt;

&lt;p&gt;First notice in the tree, that I have halStartup.c inside of platform/, not src/.  This is because halStartup.c is platform specific; it defines the vector table, startup code, etc.  In the case of the bootloaded (debos) version, the startup code is actually dummy, and it is just there to help the linker create the binary image correctly.  But for the bare metal version, the startup code needs to be correct and actually call the main()  while(1)&lt;/p&gt;

&lt;p&gt;src/ only has app.c , which currently does depend on a SAMD20 specific library.  We’ll take care of that later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
#set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I commented those out, I need to figure out whether I’m supposed to set them myself, or use the preset values.  I did notice that setting CMAKE_BINARY_DIR causes the built binaries to show up there, which is what I want.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; add_custom_command(TARGET debos_sniffer POST_BUILD
-    COMMAND size bin/debos_sniffer
+    COMMAND size debos_sniffer
 )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here’s another interesting one.  Before when CMAKE_BINARY_DIR was set to ${CMAKE_SOURCE_DIR}/bin, the custom command worked by specifying bin/debos_sniffer.  This is bin/ at the top level, where .git/ is.  But now, the compiled binary shows up in build/platform/samd20_debos/ , and somehow it is found by just specifying debos_sniffer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+#file(GLOB SOURCES
+#    &quot;*.h&quot;
+#    &quot;*.c&quot;
+#    &quot;hal/*.c&quot;
+#    &quot;hal/*.h&quot;
+#)
+
+set(SOURCES   ${CMAKE_SOURCE_DIR}/src/app.c  
+							${CMAKE_SOURCE_DIR}/src/my_memcpy.c 
+	 ) 
+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here you see I replaced file(GLOB SOURCES …) with set(SOURCES …),
as recommended by people.  Notice I’m specifying more exactly where the source is; the previous file(GLOB SOURCES …) worked when CMakeLists.txt was inside the directory with the source.&lt;/p&gt;

&lt;h1 id=&quot;ok-now-that-i-have-the-original-target-built-and-working-i-can-add-another-target&quot;&gt;OK now that I have the original target built and working, I can add another target.&lt;/h1&gt;
&lt;p&gt;This is the bare metal target.  It’s basically the same thing except:&lt;br /&gt;
App vector table has to be correct; these are Reset Vector and ISRs.  This app doesn’t use any ISRs so it can’t go too horribly wrong.&lt;/p&gt;

&lt;p&gt;To check that the bare metal app is built correct, I will do the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Check that Reset Vector points to startup code.&lt;/li&gt;
  &lt;li&gt;Check that startup code points to and calls main().&lt;/li&gt;
  &lt;li&gt;Check that main() points to and calls app().&lt;/li&gt;
  &lt;li&gt;Check that the calls to Checkpoint() are stubbed out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-add_subdirectory-in-cmakeliststxt-inside-platform&quot;&gt;1. add_subdirectory() in CMakeLists.txt inside platform/&lt;/h1&gt;
&lt;h1 id=&quot;2-copy-halstartupc-linkerscriptld-cmakeliststxt-from-the-working-target&quot;&gt;2. copy halStartup.c, linkerscript.ld, CMakeLists.txt from the working target&lt;/h1&gt;
&lt;p&gt;Now let’s see what the build says.  Dang it’s a tricky one!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMake Error at /usr/share/cmake-3.5/Modules/ExternalProject.cmake:2405 (add_custom_target):
  add_custom_target cannot create target &quot;samd20_headers&quot; because another
  target with the same name already exists.  The existing target is a custom
  target created in source directory
  &quot;/home/steve/prog/debos/debos_sniffer/platform/samd20_debos&quot;.  See
  documentation for policy CMP0002 for more details.
Call Stack (most recent call first):
  platform/samd20_baremetal/CMakeLists.txt:69 (ExternalProject_Add)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So, both CMakeLists.txt are identical, so I didn’t expect it to work anyway.  We see here it was because of ExternalProject_Add.&lt;br /&gt;
The target “samd20_headers” already exists.&lt;br /&gt;
Well, since the 2 projects use exactly the same library, let’s try to move the ExternalProject_Add up a level.  So remove the duplicated calls to ExternalProject_Add and stick it in the CMakeLists.txt 1 level up.&lt;/p&gt;

&lt;p&gt;Cool, I did that and the I got an error that I was actually expecting.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMake Error at platform/samd20_baremetal/CMakeLists.txt:117 (add_executable):
  add_executable cannot create target &quot;debos_sniffer&quot; because another target
  with the same name already exists.  The existing target is an executable
  created in source directory
  &quot;/home/steve/prog/debos/debos_sniffer/platform/samd20_debos&quot;.  See
  documentation for policy CMP0002 for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is obviously the re-use of the executable’s name, debos_sniffer.  That has to change.&lt;br /&gt;
Woah cool looks like they both built!&lt;/p&gt;

&lt;h1 id=&quot;lets-open-up-hopper-and-see-what-it-looks-like&quot;&gt;Let’s open up Hopper and see what it looks like&lt;/h1&gt;

&lt;p&gt;For an ARM Cortex M0+ the Reset Vector is located at address 0x4.&lt;br /&gt;
I got a 0xd9220000, and changing from bad-endian to good-endian, I get the address 0x22d9.  What is that…? &lt;code class=&quot;highlighter-rouge&quot;&gt;HAL_IrqHandlerReset&lt;/code&gt; Yes!  That’s my startup code.  Now, does it call main?  Hopper says it does.  Now, does main call app() in an infinite loop?  Yes!&lt;/p&gt;

&lt;p&gt;OK now for the tricky part.  The Bootloaded version used a function called Checkpoint() which would take a string and some flags, and use the Bootloader’s UART interface to output the bytes, turn on LED, halt the CPU or whatever.&lt;br /&gt;
The app itself doesn’t configure any serial out.  Also, the Checkpoint() function doesn’t exist so calling it would be bad.&lt;br /&gt;
So, this is not going to be very eventful, since a sniffer literally just outputs serial and nothing else.&lt;/p&gt;

&lt;h1 id=&quot;well-just-for-fun-lets-add-a-led-toggle-at-the-app-level&quot;&gt;Well just for fun, let’s add a LED toggle at the App level.&lt;/h1&gt;
&lt;p&gt;To do this, I will bring in some app code that turns on a LED of a different color.  There are 3 LEDs with different colors on the board that I have.  The Bootloader has control of 1 of them.  So let’s have the app turn on the other one, that tells us the app is in control.&lt;/p&gt;

&lt;p&gt;OK that compiled, but now I’m back to my Jenkins issue.  When I push the repo, Jenkins will build it, which will create 2 sets of compiler outputs, one for bootloaded one for bare metal.&lt;/p&gt;

&lt;p&gt;I want to be able to grab either binary without typing out a long ass pathname.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have an application, it’s a sniffer. I want it to run on bare metal, on an OS, and on multiple CPU targets. Basically anything with a SPI port and the radio should be able to run this. OK, looks like it worked. Here’s what I learned: steve@steve-ThinkPad-T420:~/prog/debos/debos_sniffer$ tree . ├── build.sh ├── CMakeLists.txt ├── Makefile ├── platform │   ├── CMakeLists.txt │   ├── samd20_baremetal │   └── samd20_debos │   ├── atsamd20j18.ld │   ├── CMakeLists.txt │   └── halStartup.c ├── README.md ├── src │   ├── app.c │   ├── my_memcpy.c │   ├── my_memcpy.h │   └── System.h └── tool ├── sniffer_parser_lwmesh.py └── sniffer_reader.py ``` The Top Level CMakeLists.txt cmake_minimum_required(VERSION 3.5)</summary></entry><entry><title type="html">Jenkins Job Migration (ie. Jenkins uses too much RAM)</title><link href="/2018/01/21/jenkins-uses-too-much-ram.html" rel="alternate" type="text/html" title="Jenkins Job Migration (ie. Jenkins uses too much RAM)" /><published>2018-01-21T00:00:00-08:00</published><updated>2018-01-21T00:00:00-08:00</updated><id>/2018/01/21/jenkins-uses-too-much-ram</id><content type="html" xml:base="/2018/01/21/jenkins-uses-too-much-ram.html">&lt;p&gt;Dang, I finally figured out why my Docker containers were failing shortly after starting.&lt;br /&gt;
That Error Code 137, Out of Memory.&lt;br /&gt;
Really it’s my stupid Redmine container that’s taking up 30% of my 1GB RAM.  But I can’t do anything about that.&lt;br /&gt;
Jenkins I can consolidate the 3 instances into 1.&lt;br /&gt;
Previously I had 1 Jenkins per toolchain, ie. 1 for arm-linux , 1 for arm-none, 1 for golang, etc.  I liked this because it keeps the toolchain installs independent.&lt;br /&gt;
Now I have to use 1 Jenkins container with all the toolchains inside of it.&lt;/p&gt;

&lt;p&gt;First I’ll have to port all the Jobs into the 1 Jenkins instance.  Then I’ll see them in the Jenkins UI, so I can run builds which will fail due to no toolchain installed.  Then I can install the toolchains.&lt;/p&gt;

&lt;p&gt;Great, copy pasting the jobs/ directories worked, I now see the jobs in the Jenkins homepage.  And of course, running the build fails due to non-existing toolchain.&lt;br /&gt;
So let’s open the Dockerfile and install some toolchains.&lt;/p&gt;

&lt;p&gt;Well it works, pretty obvious.&lt;/p&gt;

&lt;p&gt;Just remember folks, 1GB RAM is easily plenty and easily nothing.  Pay attention to how much your stupid high level frameworks and languages use.&lt;/p&gt;</content><author><name></name></author><summary type="html">Dang, I finally figured out why my Docker containers were failing shortly after starting. That Error Code 137, Out of Memory. Really it’s my stupid Redmine container that’s taking up 30% of my 1GB RAM. But I can’t do anything about that. Jenkins I can consolidate the 3 instances into 1. Previously I had 1 Jenkins per toolchain, ie. 1 for arm-linux , 1 for arm-none, 1 for golang, etc. I liked this because it keeps the toolchain installs independent. Now I have to use 1 Jenkins container with all the toolchains inside of it. First I’ll have to port all the Jobs into the 1 Jenkins instance. Then I’ll see them in the Jenkins UI, so I can run builds which will fail due to no toolchain installed. Then I can install the toolchains. Great, copy pasting the jobs/ directories worked, I now see the jobs in the Jenkins homepage. And of course, running the build fails due to non-existing toolchain. So let’s open the Dockerfile and install some toolchains. Well it works, pretty obvious. Just remember folks, 1GB RAM is easily plenty and easily nothing. Pay attention to how much your stupid high level frameworks and languages use.</summary></entry><entry><title type="html">Debugging a Bootloader with GDB and OpenOCD</title><link href="/2018/01/21/debugging-a-bootloader-with-gdb-and-openocd.html" rel="alternate" type="text/html" title="Debugging a Bootloader with GDB and OpenOCD" /><published>2018-01-21T00:00:00-08:00</published><updated>2018-01-21T00:00:00-08:00</updated><id>/2018/01/21/debugging-a-bootloader-with-gdb-and-openocd</id><content type="html" xml:base="/2018/01/21/debugging-a-bootloader-with-gdb-and-openocd.html">&lt;p&gt;I have a working build of a bootloader.  Let’s flash it.  I have a binary and an ELF.  First let’s flash the binary.&lt;br /&gt;
I’m using a SAMD20 custom board with an Atmel-ICE driven by a Beaglebone running OpenOCD, and I’m driving the Beaglebone with SSH.
Let’s configure the Beaglebone’s OpenOCD conf.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hmm, arm-none-eabi gcc and gdb are 700mb disk.  No thanks?&lt;/strong&gt;&lt;br /&gt;
Let’s see what we can do with telnet.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;telnet localhost 4444
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Cool, halt and reset work.&lt;br /&gt;
To read some memory use these&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; mdw 0x3ff00
0x0003ff00: 2110002a 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s load an image&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; load_image /tmp/binarg1
8180 bytes written at address 0x00000000
downloaded 8180 bytes in 0.327776s (24.371 KiB/s)
&amp;gt; reset  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Looks like it worked.  Interestingly there is no LED toggle on the debugger.  I guess edbg puts it in but OpenOCD doesn’t.&lt;/p&gt;

&lt;p&gt;Let’s look at the vector table.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; dump_image /tmp/bindump1 0x0 0x100
dumped 256 bytes in 0.011345s (22.036 KiB/s)
-------
-------
debian@FFNBeagle-A-0:/tmp$ od -tx1 -w4 -Ax bindump1 -v
000000 00 80 00 20
000004 25 07 00 00
000008 65 07 00 00
00000c 0d 07 00 00
000010 00 00 00 00
000014 00 00 00 00
000018 00 00 00 00
00001c 00 00 00 00
000020 00 00 00 00
000024 00 00 00 00
000028 00 00 00 00
00002c 65 07 00 00
000030 00 00 00 00
000034 00 00 00 00
000038 65 07 00 00
00003c 65 07 00 00
000040 65 07 00 00
000044 65 07 00 00
000048 65 07 00 00
00004c f1 06 00 00
000050 fd 05 00 00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;weird-problem-what-is-going-on&quot;&gt;Weird problem, what is going on?&lt;/h1&gt;
&lt;p&gt;As I said, I have a working bootloader and a working application that can be bootloaded and run.  I used edbg, which always worked flawlessly when -p for programming, -e for erasing.  After the firmware is flashed, the application is loaded by serial port, ttyUSB.&lt;br /&gt;
Very weird, I used OpenOCD to flash the bootloader firmware, it was OK, then I used ttyUSB to load the application, that was also OK, but then when I reset the target, it would jump to the application and hit some hard fault or something and reset.  WTF is OpenOCD doing differently?  I’m not even using OpenOCD for erasing anymore, I use edbg because I know for sure it erases, so it must be the programming.  I’m using binary images, not ELF’s so it really should just dump the memory, I don’t see how there could be a difference.&lt;br /&gt;
Well, I know the next thing to try.  Try all the different commands for writing flash memory from a file.  I was using load_image blah.bin , where my blah.bin should start at address 0x0 so no more parameters are supplied to load_image&lt;/p&gt;

&lt;p&gt;OK, before I do that, I should be able to find out what exactly went wrong by analyzing the flash memory contents on target.&lt;br /&gt;
It looks like the bootloader is OK but then fails to jump to the application.  Let’s check the pointers.&lt;/p&gt;

&lt;p&gt;The app loads from 0x2000, and puts a pointer to while(1) at 0x2100.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; mdw 0x2100
0x00002100: 00002229 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Check the listing for address 2229, that is in app space, check the app listing file.  Well this is weird, jenkins appears to be building a different binary from my laptop.  GCC version is different.  Crap.  We’re going to have to make Jenkins a single point of truth here, and I’ll have to publish the linker map file so I can view it on my laptop.&lt;/p&gt;

&lt;p&gt;Well not sure what’s happening but things seem to be working on OpenOCD again.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have a working build of a bootloader. Let’s flash it. I have a binary and an ELF. First let’s flash the binary. I’m using a SAMD20 custom board with an Atmel-ICE driven by a Beaglebone running OpenOCD, and I’m driving the Beaglebone with SSH. Let’s configure the Beaglebone’s OpenOCD conf.</summary></entry><entry><title type="html">OpenOCD Target Practice</title><link href="/2018/01/20/openocd-target-practice.html" rel="alternate" type="text/html" title="OpenOCD Target Practice" /><published>2018-01-20T00:00:00-08:00</published><updated>2018-01-20T00:00:00-08:00</updated><id>/2018/01/20/openocd-target-practice</id><content type="html" xml:base="/2018/01/20/openocd-target-practice.html">&lt;h1 id=&quot;how-to-actually-write-the-flash--ive-never-used-gdb&quot;&gt;How to actually write the flash?  I’ve never used GDB.&lt;/h1&gt;
&lt;p&gt;First start the OpenOCD server.  This is what I see:  &lt;code class=&quot;highlighter-rouge&quot;&gt;Info : at91samd20j18.cpu: hardware has 4 breakpoints, 2 watchpoints&lt;/code&gt;
Then connect to the server with gdb.  Run the gdb command and then at the prompt type this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;(gdb) target remote localhost:3333&lt;/code&gt;&lt;br /&gt;
I’m using arm-none-eabi-gdb.  If I just run native gdb, I get this output&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Info : accepting 'gdb' connection from 3333
undefined debug reason 7 - target needs reset
Error: CMSIS-DAP: Write Error (0x04)
Error: CMSIS-DAP: Write Error (0x04)
Error: CMSIS-DAP: Write Error (0x04)
Error: CMSIS-DAP: Write Error (0x04)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But if I run arm-none-eabi-gdb, I get this&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Info : accepting 'gdb' connection from 3333
undefined debug reason 7 - target needs reset
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now that I’m connected let’s Read some memory addresses.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x 0x3FF00
0x3ff00:	0xdeadbeef
(gdb) x 0x3FE00
0x3fe00:	0x11456708
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Great!  Seeing deadbeef is good; it had to come from the target’s flash.&lt;br /&gt;
Interesting, if I supply a bogus address it handles nicely.  This is the output of the OpenOCD server after doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;(gdb) x 90000000&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: CMSIS-DAP: Write Error (0x04)
Polling target at91samd20j18.cpu failed, GDB will be halted. Polling again in 100ms
Polling target at91samd20j18.cpu succeeded again
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s try to write something.  Oh dang, doesn’t work.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x 0x3f100
0x3f100:	0xffffffff
(gdb) set {int}0x3f100 = 0xdeadbeef
Writing to flash memory forbidden in this context
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s go to the OpenOCD manual and look at their example.  It says to run gdb with an .elf file.  Let’s do that.  Dang.  Same error.&lt;/p&gt;

&lt;p&gt;But, OpenOCD manual shows using the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; command.  That worked!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) set {int}0x3F100=0xdeadbeef
Writing to flash memory forbidden in this context
(gdb) load
Loading section .text, size 0xfea0 lma 0x0
Loading section .debug_breadcrumbs, size 0x4 lma 0xfea0
Loading section .relocate, size 0x110 lma 0xfea4
Start address 0x74b8, load size 65460
Transfer rate: 1 KB/sec, 9351 bytes/write.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Well atleast I can write to RAM.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) set {int}0x20006000=0xdeadbeef
(gdb) x 0x20006000
0x20006000:	0xdeadbeef
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK, here’s another lead.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) monitor flash probe 0
flash 'at91samd' found at 0x00000000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This shows that the flash bank 0 is found at address 0x0.  This is correct.&lt;br /&gt;
Another thing I can do is erase_check&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) monitor flash erase_check 0
successfully checked erase state
	#  0: 0x00000000 (0x4000 16kB) not erased
	#  1: 0x00004000 (0x4000 16kB) not erased
	#  2: 0x00008000 (0x4000 16kB) not erased
	#  3: 0x0000c000 (0x4000 16kB) not erased
	#  4: 0x00010000 (0x4000 16kB) erased
	#  5: 0x00014000 (0x4000 16kB) erased
	#  6: 0x00018000 (0x4000 16kB) erased
	#  7: 0x0001c000 (0x4000 16kB) erased
	#  8: 0x00020000 (0x4000 16kB) erased
	#  9: 0x00024000 (0x4000 16kB) erased
	# 10: 0x00028000 (0x4000 16kB) erased
	# 11: 0x0002c000 (0x4000 16kB) erased
	# 12: 0x00030000 (0x4000 16kB) erased
	# 13: 0x00034000 (0x4000 16kB) erased
	# 14: 0x00038000 (0x4000 16kB) erased
	# 15: 0x0003c000 (0x4000 16kB) not erased
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;While this is correct, I already know that the page size is 64 bytes and the erase row size is 4 pages, 256 bytes.  Definitely not 16kB.&lt;/p&gt;

&lt;p&gt;I learned here, that when I say &lt;code class=&quot;highlighter-rouge&quot;&gt;(gdb) monitor flash erase_check 0&lt;/code&gt; , what happens is, monitor tells gdb to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;flash erase_check 0&lt;/code&gt; to OpenOCD.  So flash erase_check is an OpenOCD command, documented in the manual.
We can do&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;flash erase_sector num first last&lt;/li&gt;
  &lt;li&gt;flash erase_address [pad] [unlock] address length&lt;/li&gt;
  &lt;li&gt;flash fillw address word length&lt;/li&gt;
  &lt;li&gt;flash fillh address halfword length&lt;/li&gt;
  &lt;li&gt;flash fillb address byte length&lt;/li&gt;
  &lt;li&gt;flash write_bank num filename [offset]&lt;/li&gt;
  &lt;li&gt;program filename [verify] [reset] [exit] [offset]&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-happens-with-multiple-debug-interfaces-on-1-host&quot;&gt;What happens with multiple debug interfaces on 1 host?&lt;/h1&gt;

&lt;h1 id=&quot;samd20-custom-board-with-atmel-ice&quot;&gt;SAMD20 Custom Board with Atmel-ICE&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Atmel-ICE JTAG/SWD in-circuit debugger.
interface cmsis-dap
cmsis_dap_vid_pid 0x03eb 0x2141

# Chip info
set CHIPNAME at91samd20j18
source [find target/at91samdXX.cfg]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is the output from lsusb -v:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bus 001 Device 002: ID 03eb:2141 Atmel Corp. 
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass          239 Miscellaneous Device
  bDeviceSubClass         2 ?
  bDeviceProtocol         1 Interface Association
  bMaxPacketSize0        64
  idVendor           0x03eb Atmel Corp.
  idProduct          0x2141 
  bcdDevice            1.01
  iManufacturer           1 Atmel Corp.
  iProduct                2 Atmel-ICE CMSIS-DAP
  iSerial                 3 J41800075898
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s just see what happens if I change those IDs.  Interesting, it still works fine, even if I delete the whole line cmsis_dap_vid_pid 0x03eb 0x2141.&lt;br /&gt;
Next with that whole line deleted, I put a spelling mistake,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;interface cmsis-dapABC&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Open On-Chip Debugger 0.8.0 (2014-10-20-23:18)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.sourceforge.net/doc/doxygen/bugs.html
Error: The specified debug interface was not found (cmsis-dapz)
The following debug interfaces are available:
1: parport
2: dummy
3: ftdi
4: usb_blaster
5: amt_jtagaccel
6: ep93xx
7: at91rm9200
8: gw16012
9: usbprog
10: jlink
11: vsllink
12: rlink
13: ulink
14: arm-jtag-ew
15: buspirate
16: remote_bitbang
17: hla
18: osbdm
19: opendous
20: aice
21: bcm2835gpio
22: cmsis-dap
Runtime Error: incorrect_openocd.cfg:2: 
in procedure 'script' 
at file &quot;embedded:startup.tcl&quot;, line 58
in procedure 'interface' called at file &quot;incorrect_openocd.cfg&quot;, line 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So here we see the “Interfaces” we can choose.&lt;br /&gt;
Next I examined the Chip Info.&lt;br /&gt;
Deleting the line  &lt;code class=&quot;highlighter-rouge&quot;&gt;set CHIPNAME at91samd20j18&lt;/code&gt; had no change, even setting the name to a bogus value did not affect anything.&lt;br /&gt;
So clearly the important lines are&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface cmsis-dap
source [find target/at91samdXX.cfg]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So, what is inside target/at91samdXX.cfg ?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# samdXX devices only support SWD transports.
#
source [find target/swj-dp.tcl]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK, what is SWJ-DP ?  What is SWJ?  Let’s see the file.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ARM Debug Interface V5 (ADI_V5) utility
# ... Mostly for SWJ-DP (not SW-DP or JTAG-DP, since
# SW-DP and JTAG-DP targets don't need to switch based
# on which transport is active.
...
...
if [catch {transport select}] {
  echo &quot;Error: unable to select a session transport. Can't continue.&quot;
  shutdown
}

proc swj_newdap {chip tag args} {
 if [using_hla] {
     eval hla newtap $chip $tag $args
 } elseif [using_jtag] {
     eval jtag newtap $chip $tag $args
 } elseif [using_swd] {
     eval swd newdap $chip $tag $args
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The comment at the top explains, SWJ is for debug interfaces that support both JTAG and SWD.  My Atmel-ICE is one of those.&lt;br /&gt;
proc swj_newdap is just a switch to select the command, in my case it would be using_swd so &lt;code class=&quot;highlighter-rouge&quot;&gt;eval swd newdap $chip $tag $args&lt;/code&gt;.&lt;br /&gt;
Hmm where is &lt;code class=&quot;highlighter-rouge&quot;&gt;using_swd&lt;/code&gt; defined, and what is &lt;code class=&quot;highlighter-rouge&quot;&gt;swd newdap&lt;/code&gt; ?&lt;br /&gt;
Back to at91samdXX.cfg , we see this line:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;swj_newdap takes 3 args, chip tag args.  What’s a tag?  Whatever.&lt;br /&gt;
Then there’s &lt;code class=&quot;highlighter-rouge&quot;&gt;target create $_TARGETNAME ...&lt;/code&gt;&lt;br /&gt;
We’re configuring a cortex_m CPU with endianness.&lt;br /&gt;
Then configuring it with a RAM work area?  don’t know what that’s for… does it clobber app ram?&lt;/p&gt;

&lt;p&gt;Then at the end there’s this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME at91samd 0x00000000 0 1 1 $_TARGETNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I guess we are supplying this information to GDB?&lt;/p&gt;

&lt;h1 id=&quot;samd20-custom-board-with-samd20-xplained-pro&quot;&gt;SAMD20 Custom Board with SAMD20 XPlained Pro&lt;/h1&gt;
&lt;h1 id=&quot;samd20-xplained-pro-self&quot;&gt;SAMD20 XPlained Pro Self&lt;/h1&gt;
&lt;h1 id=&quot;samd10-xplained&quot;&gt;SAMD10 XPLained&lt;/h1&gt;
&lt;h1 id=&quot;samd21-xplained&quot;&gt;SAMD21 XPLained&lt;/h1&gt;
&lt;h1 id=&quot;arduino-leo&quot;&gt;Arduino Leo&lt;/h1&gt;

&lt;h1 id=&quot;how-does-the-raspberry-pi-gpio-driver-interface-work&quot;&gt;How does the Raspberry Pi GPIO Driver Interface work?&lt;/h1&gt;
&lt;p&gt;It’s the bcm2835gpio Debug Interface.
It says See interface/raspberrypi-native.cfg for a sample config and pinout.&lt;br /&gt;
Let’s take a look.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface bcm2835gpio

# Transition delay calculation: SPEED_COEFF/khz - SPEED_OFFSET
# These depend on system clock, calibrated for stock 700MHz
# bcm2835gpio_speed SPEED_COEFF SPEED_OFFSET
bcm2835gpio_speed_coeffs 113714 28

# Each of the JTAG lines need a gpio number set: tck tms tdi tdo
# Header pin numbers: 23 22 19 21
bcm2835gpio_jtag_nums 11 25 10 9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Interesting, there’s another one.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
interface sysfsgpio

# Each of the JTAG lines need a gpio number set: tck tms tdi tdo
# Header pin numbers: 23 22 19 21
sysfsgpio_jtag_nums 11 25 10 9

# At least one of srst or trst needs to be specified
# Header pin numbers: TRST - 26, SRST - 18
sysfsgpio_trst_num 7
# sysfsgpio_srst_num 24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice the pin numbers for JTAG are the same.&lt;br /&gt;
OK, bcm2835 is more directly accessing the hardware.&lt;br /&gt;
But sysfsgpio sounds very interesting, like maybe I can port it to the Beaglebone?&lt;/p&gt;

&lt;h1 id=&quot;references-links&quot;&gt;References, Links&lt;/h1&gt;
&lt;p&gt;http://thehackerworkshop.com/?tag=openocd&lt;/p&gt;</content><author><name></name></author><summary type="html">How to actually write the flash? I’ve never used GDB. First start the OpenOCD server. This is what I see: Info : at91samd20j18.cpu: hardware has 4 breakpoints, 2 watchpoints Then connect to the server with gdb. Run the gdb command and then at the prompt type this: (gdb) target remote localhost:3333 I’m using arm-none-eabi-gdb. If I just run native gdb, I get this output Info : accepting 'gdb' connection from 3333 undefined debug reason 7 - target needs reset Error: CMSIS-DAP: Write Error (0x04) Error: CMSIS-DAP: Write Error (0x04) Error: CMSIS-DAP: Write Error (0x04) Error: CMSIS-DAP: Write Error (0x04) But if I run arm-none-eabi-gdb, I get this Info : accepting 'gdb' connection from 3333 undefined debug reason 7 - target needs reset Now that I’m connected let’s Read some memory addresses. (gdb) x 0x3FF00 0x3ff00: 0xdeadbeef (gdb) x 0x3FE00 0x3fe00: 0x11456708 Great! Seeing deadbeef is good; it had to come from the target’s flash. Interesting, if I supply a bogus address it handles nicely. This is the output of the OpenOCD server after doing a (gdb) x 90000000. Error: CMSIS-DAP: Write Error (0x04) Polling target at91samd20j18.cpu failed, GDB will be halted. Polling again in 100ms Polling target at91samd20j18.cpu succeeded again Let’s try to write something. Oh dang, doesn’t work. (gdb) x 0x3f100 0x3f100: 0xffffffff (gdb) set {int}0x3f100 = 0xdeadbeef Writing to flash memory forbidden in this context Now let’s go to the OpenOCD manual and look at their example. It says to run gdb with an .elf file. Let’s do that. Dang. Same error. But, OpenOCD manual shows using the load command. That worked! (gdb) set {int}0x3F100=0xdeadbeef Writing to flash memory forbidden in this context (gdb) load Loading section .text, size 0xfea0 lma 0x0 Loading section .debug_breadcrumbs, size 0x4 lma 0xfea0 Loading section .relocate, size 0x110 lma 0xfea4 Start address 0x74b8, load size 65460 Transfer rate: 1 KB/sec, 9351 bytes/write. Well atleast I can write to RAM. (gdb) set {int}0x20006000=0xdeadbeef (gdb) x 0x20006000 0x20006000: 0xdeadbeef OK, here’s another lead. (gdb) monitor flash probe 0 flash 'at91samd' found at 0x00000000 This shows that the flash bank 0 is found at address 0x0. This is correct. Another thing I can do is erase_check (gdb) monitor flash erase_check 0 successfully checked erase state # 0: 0x00000000 (0x4000 16kB) not erased # 1: 0x00004000 (0x4000 16kB) not erased # 2: 0x00008000 (0x4000 16kB) not erased # 3: 0x0000c000 (0x4000 16kB) not erased # 4: 0x00010000 (0x4000 16kB) erased # 5: 0x00014000 (0x4000 16kB) erased # 6: 0x00018000 (0x4000 16kB) erased # 7: 0x0001c000 (0x4000 16kB) erased # 8: 0x00020000 (0x4000 16kB) erased # 9: 0x00024000 (0x4000 16kB) erased # 10: 0x00028000 (0x4000 16kB) erased # 11: 0x0002c000 (0x4000 16kB) erased # 12: 0x00030000 (0x4000 16kB) erased # 13: 0x00034000 (0x4000 16kB) erased # 14: 0x00038000 (0x4000 16kB) erased # 15: 0x0003c000 (0x4000 16kB) not erased While this is correct, I already know that the page size is 64 bytes and the erase row size is 4 pages, 256 bytes. Definitely not 16kB. I learned here, that when I say (gdb) monitor flash erase_check 0 , what happens is, monitor tells gdb to pass flash erase_check 0 to OpenOCD. So flash erase_check is an OpenOCD command, documented in the manual. We can do flash erase_sector num first last flash erase_address [pad] [unlock] address length flash fillw address word length flash fillh address halfword length flash fillb address byte length flash write_bank num filename [offset] program filename [verify] [reset] [exit] [offset]</summary></entry><entry><title type="html">arduino-cmake first try</title><link href="/2018/01/16/arduino-cmake-first-try.html" rel="alternate" type="text/html" title="arduino-cmake first try" /><published>2018-01-16T00:00:00-08:00</published><updated>2018-01-16T00:00:00-08:00</updated><id>/2018/01/16/arduino-cmake-first-try</id><content type="html" xml:base="/2018/01/16/arduino-cmake-first-try.html">&lt;p&gt;I cloned the repo.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd example
mkdir build
cmake ..
CMake Error at CMakeLists.txt:11 (GENERATE_ARDUINO_LIBRARY_EXAMPLE):
  Unknown CMake command &quot;GENERATE_ARDUINO_LIBRARY_EXAMPLE&quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/queezythegreat/arduino-cmake/issues/38&lt;/code&gt; solves it.&lt;br /&gt;
mkdir build;cmake .. must happen in the top level CMakeLists.txt directory.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ mkdir build
steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ cd build
steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ cmake ..
CMake Error at cmake/ArduinoToolchain.cmake:93 (message):
  Could not find Arduino SDK (set ARDUINO_SDK_PATH)!
Call Stack (most recent call first):
  /usr/share/cmake-3.5/Modules/CMakeDetermineSystem.cmake:98 (include)
  CMakeLists.txt:15 (project)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK, it can’t find the toolchain.  It’s not installed.  What happened …&lt;br /&gt;
Line 15 of the top level CMakeLists.txt, was a project() call.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project(ArduinoExample C CXX ASM)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And then project() calls CMake core… line 98&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     include(&quot;${CMAKE_TOOLCHAIN_FILE}&quot; OPTIONAL RESULT_VARIABLE _INCLUDED_TOOLCHAIN_FILE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt; is set in the CMakeLists.txt:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#=============================================================================#
# Author: QueezyTheGreat                                                      #
# Date:   26.04.2011                                                          #
#                                                                             #
# Description: Arduino CMake example                                          #
#                                                                             #
#=============================================================================#
set(CMAKE_TOOLCHAIN_FILE cmake/ArduinoToolchain.cmake) # Arduino Toolchain


cmake_minimum_required(VERSION 2.8)
#====================================================================#
#  Setup Project                                                     #
#====================================================================#
project(ArduinoExample C CXX ASM)

print_board_list()
print_programmer_list()

add_subdirectory(example)   #add the example directory into build
~                                                                     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So we are reading the ArduinoToolchain.cmake. 
Some interesting things inside here, some I don’t understand.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(CMAKE_SYSTEM_NAME Arduino)

set(CMAKE_C_COMPILER avr-gcc)
set(CMAKE_ASM_COMPILER avr-gcc)
set(CMAKE_CXX_COMPILER avr-g++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we are identifying avr-gcc, that’s cool.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#=============================================================================#
#                         System Paths                                        #
#=============================================================================#
if (UNIX)
    include(Platform/UnixPaths)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;include() is like #include in C, so let’s see it.  Huh.. it’s not there.  Let’s see later then…&lt;/p&gt;

&lt;p&gt;Then there’s a part later to detect the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARDUINO_SDK_PATH&lt;/code&gt; using hints, which are directories likely to have the install.&lt;br /&gt;
Let’s just install the SDK now.  To do that just download it and run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo install.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let’s run &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake ..&lt;/code&gt; again.  Still the same error, let’s check the path hints.&lt;br /&gt;
Hmm for some reason the install.sh  doesn’t actually install anything in /usr or /bin or whatever.
Let’s move it manually then into one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hints&lt;/code&gt; , /usr/local/share/ .&lt;br /&gt;
&lt;strong&gt;Awesome!&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ cmake ..-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- The ASM compiler identification is GNU
-- Found assembler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-gcc
-- Arduino SDK version 1.8.5-2017.01.09: /usr/local/share/arduino-1.8.5
-- Check for working C compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-gcc
-- Check for working C compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-g++
-- Check for working CXX compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- ARDUINO Boards:
--                   menu: 
--                    yun: Arduino Y
--                    uno: Arduino/Genuino Uno
--              diecimila: Arduino Duemilanove or Diecimila
--                   nano: Arduino Nano
--                   mega: Arduino/Genuino Mega or Mega 2560
--                megaADK: Arduino Mega ADK
--               leonardo: Arduino Leonardo
--            leonardoeth: Arduino Leonardo ETH
--                  micro: Arduino/Genuino Micro
--                esplora: Arduino Esplora
--                   mini: Arduino Mini
--               ethernet: Arduino Ethernet
--                    fio: Arduino Fio
--                     bt: Arduino BT
--             LilyPadUSB: LilyPad Arduino USB
--                lilypad: LilyPad Arduino
--                    pro: Arduino Pro or Pro Mini
--               atmegang: Arduino NG or older
--           robotControl: Arduino Robot Control
--             robotMotor: Arduino Robot Motor
--                  gemma: Arduino Gemma
--     circuitplay32u4cat: Adafruit Circuit Playground
--                yunmini: Arduino Y
--                chiwawa: Arduino Industrial 101
--                    one: Linino One
--                unowifi: Arduino Uno WiFi
-- 
-- ARDUINO Programmers:
--            avrisp: AVR ISP
--        avrispmkii: AVRISP mkII
--        usbtinyisp: USBtinyISP
--        arduinoisp: ArduinoISP
--     arduinoisporg: ArduinoISP.org
--            usbasp: USBasp
--          parallel: Parallel Programmer
--      arduinoasisp: Arduino as ISP
--          usbGemma: Arduino Gemma
--         buspirate: BusPirate as ISP
--            stk500: Atmel STK500 development board
--          jtag3isp: Atmel JTAGICE3 (ISP mode)
--             jtag3: Atmel JTAGICE3 (JTAG mode)
--         atmel_ice: Atmel-ICE (AVR)
-- 
-- Generating wire_example
-- avr library found: Wire
-- Generating blink_example
-- Generating blink_original
-- Generating blink_file_original
-- Generating blink_bundled
-- Generating blink_lib
-- Generating blink
-- Generating serial_lib
-- avr library found: SoftwareSerial
-- Configuring done
-- Generating done
-- Build files have been written to: /home/steve/prog/scratch/arduino-cmake/build
steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s that stuff about boards and programmers?
How does that last part work, &lt;code class=&quot;highlighter-rouge&quot;&gt;Generating blink_example&lt;/code&gt; ?&lt;br /&gt;
Somehow, CMakeLists.txt at the top level was able to find all of those things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt; , that’s in the top CMakeLists.txt:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#====================================================================#
#  Setup Project                                                     #
#====================================================================#
project(ArduinoExample C CXX ASM)

print_board_list()
print_programmer_list()

add_subdirectory(example)   #add the example directory into build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So literally it prints the board lists and programmer list, and recurses into the example directory.&lt;/p&gt;

&lt;p&gt;So, the examples/CMakeLists.txt.&lt;br /&gt;
All that happens is this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(ARDUINO_DEFAULT_BOARD uno) # Default Board ID, when not specified
set(ARDUINO_DEFAULT_PORT /dev/ttyUSB0) # Default Port, when not specified
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#====================================================================#
# Advanced firwmare example
#====================================================================#
generate_arduino_firmware(blink
        SRCS blink.cpp
        LIBS blink_lib
        BOARD nano
        BOARD_CPU atmega328
        PORT com4
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Wow that’s not too bad , I’d like to give it a try!&lt;/p&gt;

&lt;p&gt;It looks like it should be easy to support the ARM chips, and use this to create new Arduino Libraries.&lt;/p&gt;</content><author><name></name></author><summary type="html">I cloned the repo. cd example mkdir build cmake .. CMake Error at CMakeLists.txt:11 (GENERATE_ARDUINO_LIBRARY_EXAMPLE): Unknown CMake command &quot;GENERATE_ARDUINO_LIBRARY_EXAMPLE&quot;. OK https://github.com/queezythegreat/arduino-cmake/issues/38 solves it. mkdir build;cmake .. must happen in the top level CMakeLists.txt directory. steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ mkdir build steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ cd build steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ cmake .. CMake Error at cmake/ArduinoToolchain.cmake:93 (message): Could not find Arduino SDK (set ARDUINO_SDK_PATH)! Call Stack (most recent call first): /usr/share/cmake-3.5/Modules/CMakeDetermineSystem.cmake:98 (include) CMakeLists.txt:15 (project) OK, it can’t find the toolchain. It’s not installed. What happened … Line 15 of the top level CMakeLists.txt, was a project() call. project(ArduinoExample C CXX ASM) And then project() calls CMake core… line 98 include(&quot;${CMAKE_TOOLCHAIN_FILE}&quot; OPTIONAL RESULT_VARIABLE _INCLUDED_TOOLCHAIN_FILE) CMAKE_TOOLCHAIN_FILE is set in the CMakeLists.txt: ``` #=============================================================================# Author: QueezyTheGreat Date: 26.04.2011 # # Description: Arduino CMake example # # #=============================================================================# set(CMAKE_TOOLCHAIN_FILE cmake/ArduinoToolchain.cmake) # Arduino Toolchain</summary></entry></feed>