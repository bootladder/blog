<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-03-25T22:09:34-07:00</updated><id>/</id><title type="html">Bootladder News</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Create React App, Take 2</title><link href="/2018/03/25/create-react-app-take-2.html" rel="alternate" type="text/html" title="Create React App, Take 2" /><published>2018-03-25T00:00:00-07:00</published><updated>2018-03-25T00:00:00-07:00</updated><id>/2018/03/25/create-react-app-take-2</id><content type="html" xml:base="/2018/03/25/create-react-app-take-2.html">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;
&lt;p&gt;I got a react practice app going a month ago.  Tic-tac-toe demo.  Used create-react-app.&lt;br /&gt;
It was running on the development server for a bit.  Then I shut it down, now I wanted to bring it back up.&lt;br /&gt;
I just tried to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt; whatever it is, and it totally crashed my VPS.&lt;br /&gt;
All of my open ssh sessions were getting these printed…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Message from syslogd@caseyjones at Mar 26 04:56:10 ...
 kernel:[445167.403797] BUG: soft lockup - CPU#0 stuck for 25s! [node:363]

Message from syslogd@caseyjones at Mar 26 04:56:36 ...
 kernel:[445193.778113] BUG: soft lockup - CPU#0 stuck for 25s! [postgres:414]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Woah.  Maybe I ran out of RAM?  That’s a likely cause.  If not, that’s crazy.&lt;/p&gt;

&lt;h1 id=&quot;anyway-ill-reboot-with-the-admin-console-and-do-a-fresh-create-react-app&quot;&gt;Anyway, I’ll reboot with the admin console and do a fresh create-react-app&lt;/h1&gt;
&lt;h1 id=&quot;why-is-it-taking-so-long-i-dont-remember-it-taking-so-long&quot;&gt;Why is it taking so long… I don’t remember it taking so long&lt;/h1&gt;
&lt;h1 id=&quot;wow-i-didnt-realize-it-was-200mb-fresh-install--its-all-in-node_modules&quot;&gt;Wow I didn’t realize it was 200MB, fresh install.  It’s all in node_modules&lt;/h1&gt;

&lt;p&gt;OK, now the dev server is up.&lt;br /&gt;
My goal is to take some built JS and put it in my existing project.&lt;br /&gt;
Let’s just get straight to that.  run a &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-did-npm-run-build-do-&quot;&gt;What did npm run build do ?&lt;/h1&gt;
&lt;p&gt;First, &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.  It took the source index.html, &lt;code class=&quot;highlighter-rouge&quot;&gt;public/index.html&lt;/code&gt; , removed all the comments and white space, replaced the template &lt;code class=&quot;highlighter-rouge&quot;&gt;%PUBLIC_URL%&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;.  Ahh here’s the cool part, at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; , the following was inserted:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/static/js/main.ee7b2412.js&quot;&amp;gt;&lt;/code&gt;.&lt;br /&gt;
And of course, our .js is in there.&lt;br /&gt;
Cool, let’s see if I can just pop that main.ee7b2412.js into my static site, and stick a couple HTML tags to load it up.&lt;br /&gt;
So, in the HTML I need the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;br /&gt;
And at the end of the body I need this: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;react-app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;cool-that-works&quot;&gt;Cool, that works.&lt;/h1&gt;
&lt;p&gt;But, can’t use this for development, because it takes way too long to build the production site.  I’ll have to go back to the development server and just start over there.&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface I got a react practice app going a month ago. Tic-tac-toe demo. Used create-react-app. It was running on the development server for a bit. Then I shut it down, now I wanted to bring it back up. I just tried to run npm start or npm run start whatever it is, and it totally crashed my VPS. All of my open ssh sessions were getting these printed… ``` Message from syslogd@caseyjones at Mar 26 04:56:10 … kernel:[445167.403797] BUG: soft lockup - CPU#0 stuck for 25s! [node:363]</summary></entry><entry><title type="html">MongoDB Golang JSON (Mongo Alternatives?)</title><link href="/2018/03/17/mongodb-golang-json.html" rel="alternate" type="text/html" title="MongoDB Golang JSON (Mongo Alternatives?)" /><published>2018-03-17T00:00:00-07:00</published><updated>2018-03-17T00:00:00-07:00</updated><id>/2018/03/17/mongodb-golang-json</id><content type="html" xml:base="/2018/03/17/mongodb-golang-json.html">&lt;p&gt;I need a database, since working with a JSON file in the filesystem was not going far enough.  Need to query objects, delete objects, sort, etc.&lt;br /&gt;
Also I like the idea of using Golang to deal with JSON at the client-server interface, since it’s really easy in Golang.  Then Golang can talk to the database.&lt;br /&gt;
Initial googling suggested either postgres or Mongo, and I’m trying Mongo because I haven’t yet.&lt;/p&gt;

&lt;p&gt;These instructions worked: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Nice tutorial here.  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://medium.com/@maumribeiro/a-fullstack-epic-part-i-a-rest-api-in-go-accessing-mongo-db-608b46e969cd&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;main-concepts&quot;&gt;Main Concepts&lt;/h1&gt;
&lt;p&gt;Basically what happens is there’s a POST request, and the body contains JSON.  The JSON is unmarshalled into a golang struct.  The struct is passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;c.Repository.AddAlbum&lt;/code&gt;.&lt;br /&gt;
Repository is an empty struct with methods, eg. GetAlbums() , AddAlbum().  There are constants in the author’s code but I imagine you could put the constants eg. SERVER,DBNAME,DOCNAME in the Repository struct, so there could be 1 Repository per user.&lt;br /&gt;
The methods (eg. GetAlbums) will use the golang Mongo driver, mgo.  The database connection object has methods so we can do crazy syntax like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    c := session.DB(DBNAME).C(DOCNAME)
    results := Albums{}
    if err := c.Find(nil).All(&amp;amp;results); err != nil {
        fmt.Println(&quot;Failed to write results:&quot;, err)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s look at AddAlbum:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (r Repository) AddAlbum(album Album) bool {
    session, err := mgo.Dial(SERVER)
    defer session.Close()
    
    album.ID = bson.NewObjectId()
    session.DB(DBNAME).C(DOCNAME).Insert(album)

    if err != nil {
        log.Fatal(err)
        return false
    }
    return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;An Album is passed to AddAlbum.  The ID field is generated here and set.  Then, the Album is Inserted into the database.  Cool!&lt;br /&gt;
UpdateAlbum works similarly except one line is different:&lt;br /&gt;
`    session.DB(DBNAME).C(DOCNAME).UpdateId(album.ID, album)` .  It finds the album with the ID, then replaces it.&lt;br /&gt;
I see now, basically what the database is doing is attaching an ID to each JSON object.  This is a critical missing piece, when handling JSON naively.&lt;/p&gt;

&lt;h1 id=&quot;ok-lets-install-it-on-the-server&quot;&gt;OK let’s install it on the server&lt;/h1&gt;
&lt;p&gt;Well just for fun let’s do it with a docker container.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker run -d -p 27017:27017 -v ~/data:/data/db mongo&lt;/code&gt; easy.&lt;br /&gt;
Crap, 366MB image.  Another 100MB to install the client tools.  Maybe I can get away with only using the golang libraries?&lt;br /&gt;
Cool, this minimal snippet worked!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
  fmt.Println(&quot;Hello1&quot;)
  session, err := mgo.Dial(&quot;localhost&quot;)
  if err != nil {
    fmt.Println(&quot;Hello2&quot;)
    panic(err)
  }
  defer session.Close()
  fmt.Println(&quot;Hello3&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;now-the-internet-says-check-security&quot;&gt;Now, the Internet says check security&lt;/h1&gt;
&lt;p&gt;And yes, the MongoDB server is accessible from the public.&lt;br /&gt;
Let’s use a docker-compose.yml to put in our own .conf.&lt;br /&gt;
Oh, weird, turns out the original installation had already set bindaddress to 127.0.0.1.  So… even though the Mongo server only accepts connections from 127.0.0.1, because it’s in a Docker container, it is still reachable from the outside world?  Does Docker change the source IP in the port forward?  Does that mean this same issue will happen for any server inside a container?&lt;/p&gt;

&lt;p&gt;OK my solution now is to try &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 127.0.0.1:27017:27017&lt;/code&gt; .  Yes!! That is the solution.  Now I am unable to access from outside.  And I am still able to access from the simple golang snippet above.&lt;/p&gt;

&lt;h1 id=&quot;hmm-weirdness-getting-a-flask-container-to-talk-to-a-mongo-container&quot;&gt;Hmm, weirdness getting a Flask container to talk to a Mongo container.&lt;/h1&gt;
&lt;p&gt;I’m using Flask as my API server.  It is in a container.  It receives requests and then executes shell scripts.  The shell scripts are located in a host directory that is volume mounted to the container.  I compiled the exact golang dummy program above and put it in that directory.  It executes fine on the host, but when executing in the container, the Mongo server cannot be found.&lt;br /&gt;
At first I thought, there is no port forwarding that gives the Flask container access to localhost:27017 on the host.  The Flask container did have 9002:5000, which makes the Flask default port 5000 accessible by the public at port 9002.  So I tried to do a 27017:27017 in the Flask container.  But no!  Docker could not bind to 27017, because Mongo was already bound to it.&lt;br /&gt;
So, I still don’t understand this but my solution was to change the Flask container to use Host Networking, ie. &lt;code class=&quot;highlighter-rouge&quot;&gt;network_mode:host&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;oh-no-that-ended-up-breaking-flask&quot;&gt;Oh no… that ended up breaking Flask!&lt;/h1&gt;
&lt;p&gt;Turns out, setting &lt;code class=&quot;highlighter-rouge&quot;&gt;network_mode:host&lt;/code&gt; overrides the port forward I had &lt;code class=&quot;highlighter-rouge&quot;&gt;9002:5000&lt;/code&gt;, since the Flask server stopped responding to 9002, and started responding to 5000!&lt;/p&gt;
&lt;h1 id=&quot;ok-i-will-just-configure-the-flask-port--using-network_modehost&quot;&gt;OK I will just configure the Flask port.  Using network_mode:host.&lt;/h1&gt;
&lt;p&gt;Ugh this sucks.  I couldn’t figure out how to block public access to Mongo.  So I actually put Mongo in the docker network, doing a port publish &lt;code class=&quot;highlighter-rouge&quot;&gt;22222:21017&lt;/code&gt;.  The Flask is using &lt;code class=&quot;highlighter-rouge&quot;&gt;network_mode:host&lt;/code&gt;.  I did verify Flask can access Mongo, and the public cannot.&lt;/p&gt;

&lt;h1 id=&quot;im-reading-stupid-hate-comments-about-mongodb-why&quot;&gt;I’m reading stupid hate comments about MongoDB… why?&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://getstream.io/blog/building-a-performant-api-using-go-and-cassandra/&lt;/code&gt;
I looked at cassandra in this article and wow… I have no desire to use it after looking at the code examples.&lt;/p&gt;</content><author><name></name></author><summary type="html">I need a database, since working with a JSON file in the filesystem was not going far enough. Need to query objects, delete objects, sort, etc. Also I like the idea of using Golang to deal with JSON at the client-server interface, since it’s really easy in Golang. Then Golang can talk to the database. Initial googling suggested either postgres or Mongo, and I’m trying Mongo because I haven’t yet. These instructions worked: https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04 Nice tutorial here. https://medium.com/@maumribeiro/a-fullstack-epic-part-i-a-rest-api-in-go-accessing-mongo-db-608b46e969cd Main Concepts Basically what happens is there’s a POST request, and the body contains JSON. The JSON is unmarshalled into a golang struct. The struct is passed to c.Repository.AddAlbum. Repository is an empty struct with methods, eg. GetAlbums() , AddAlbum(). There are constants in the author’s code but I imagine you could put the constants eg. SERVER,DBNAME,DOCNAME in the Repository struct, so there could be 1 Repository per user. The methods (eg. GetAlbums) will use the golang Mongo driver, mgo. The database connection object has methods so we can do crazy syntax like this: c := session.DB(DBNAME).C(DOCNAME) results := Albums{} if err := c.Find(nil).All(&amp;amp;results); err != nil { fmt.Println(&quot;Failed to write results:&quot;, err) } Let’s look at AddAlbum: ``` func (r Repository) AddAlbum(album Album) bool { session, err := mgo.Dial(SERVER) defer session.Close() album.ID = bson.NewObjectId() session.DB(DBNAME).C(DOCNAME).Insert(album)</summary></entry><entry><title type="html">Twilio, Tokbox, Vidyo: Demos</title><link href="/2018/03/12/twilio-tokbox-vidyo-demos.html" rel="alternate" type="text/html" title="Twilio, Tokbox, Vidyo:  Demos" /><published>2018-03-12T00:00:00-07:00</published><updated>2018-03-12T00:00:00-07:00</updated><id>/2018/03/12/twilio-tokbox-vidyo-demos</id><content type="html" xml:base="/2018/03/12/twilio-tokbox-vidyo-demos.html">&lt;h1 id=&quot;vidyo&quot;&gt;Vidyo&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Vidyo PaaS does not include the Media Server (Media Bridge) as part of the platform.  Vidyo does provide a Media Bridge docker image, which the application can use.  &lt;code class=&quot;highlighter-rouge&quot;&gt;To record or live-stream multiple Vidyo conferences simultaneously, you need to create and deploy a separate Docker container for each recording and live stream.&lt;/code&gt; .  Woah, weird use of Docker.  Using docker exec to control the media bridge.  Every recording needs to have a different config file, specifying the path and filename for the recording, plus other options.  What??&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yeah… no thanks.&lt;/p&gt;

&lt;h1 id=&quot;tokbox&quot;&gt;Tokbox&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Hmm, it markets the ability to record and playback.  Mostly takes about “archiving” , hardly mentions playback at all.  Something’s fishy about it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;twilio&quot;&gt;Twilio&lt;/h1&gt;

&lt;h1 id=&quot;sinch--red5&quot;&gt;Sinch?  Red5?&lt;/h1&gt;

&lt;h1 id=&quot;hmm-the-server-needs-to-be-able-to-be-a-peer-in-a-peer2peer-connection&quot;&gt;Hmm, the server needs to be able to be a peer in a peer2peer connection.&lt;/h1&gt;
&lt;p&gt;This is the only way the server can stream back the recording.
Otherwise, the only way a client can play the recording is to download it.
Sure this could happen automatically with a AJAX call.&lt;br /&gt;
Actually I just tried it, a HTML5 audio tag with the src pointing to a URL.  Works pretty good.&lt;/p&gt;</content><author><name></name></author><summary type="html">Vidyo Vidyo PaaS does not include the Media Server (Media Bridge) as part of the platform. Vidyo does provide a Media Bridge docker image, which the application can use. To record or live-stream multiple Vidyo conferences simultaneously, you need to create and deploy a separate Docker container for each recording and live stream. . Woah, weird use of Docker. Using docker exec to control the media bridge. Every recording needs to have a different config file, specifying the path and filename for the recording, plus other options. What?? Yeah… no thanks. Tokbox Hmm, it markets the ability to record and playback. Mostly takes about “archiving” , hardly mentions playback at all. Something’s fishy about it. Twilio Sinch? Red5? Hmm, the server needs to be able to be a peer in a peer2peer connection. This is the only way the server can stream back the recording. Otherwise, the only way a client can play the recording is to download it. Sure this could happen automatically with a AJAX call. Actually I just tried it, a HTML5 audio tag with the src pointing to a URL. Works pretty good.</summary></entry><entry><title type="html">Janus: Refactoring a Plugin</title><link href="/2018/03/11/janus-refactoring-a-plugin.html" rel="alternate" type="text/html" title="Janus: Refactoring a Plugin" /><published>2018-03-11T00:00:00-08:00</published><updated>2018-03-11T00:00:00-08:00</updated><id>/2018/03/11/janus-refactoring-a-plugin</id><content type="html" xml:base="/2018/03/11/janus-refactoring-a-plugin.html">&lt;p&gt;The sample Janus Plugins are written in C and they are very good.&lt;br /&gt;
But, it’s not very readable.  I’d like a higher level description of what the sample plugin app does.  Though the documentation is good, I still want a complete, high level description.  I’ll do this by refactoring, which will also allow me to take out reusable snippets.&lt;/p&gt;

&lt;p&gt;Particularly looking to refactor to improve:  separation of concerns  (single responsibility) .  Make it more obvious where the configuration file comes from.&lt;/p&gt;

&lt;h1 id=&quot;pre--notes&quot;&gt;Pre- Notes&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Because these plugins are .so shared modules, I should be able to build the plugin by itself, then test with a real Janus instance.  Janus’ build script builds the sample plugins with it, but that’s just for convenience.  As a product developer, what I would do is have a separate build environment, git repo, etc. for my new plugin, build it, then deploy it to the /path/to/janus/lib/janus/plugins/  (I believe that’s where you deploy them?)&lt;/li&gt;
  &lt;li&gt;Oh crap, it’s built with autotools, I forgot.  I have no idea, and no desire to learn autotools.  Hmm how do I build the plugin?&lt;/li&gt;
  &lt;li&gt;Ah yes, thank you https://github.com/mquander/janus-helloworld-plugin .  I will fork it!  Then copy over the recordplaytest demo!&lt;/li&gt;
  &lt;li&gt;Ah, it didn’t include any Janus headers, so those must come from the Janus installation on the server.  I don’t have Janus installed on my laptop. Let’s just make sure by attempting a build on my laptop.   Need jansson.  Ah yes, of course, plugins/plugin.h not found.  Let’s make sure that exists on the server installation.  Well it’s actually in /path/to/janus/include/janus/plugins .  Ah, checking the gcc -I flags, yes, it’s in there.  Good!  Eh, let’s build it on the cloud and then hook up a Jenkins later.&lt;/li&gt;
  &lt;li&gt;Cool, it builds on my server that has Janus.  Let’s… see if make install followed by restarting Janus will pick up the new plugin!
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JANUS AudioBridge plugin initialized!
Loading plugin 'libjanus_helloworld.so'...
JANUS hello world plugin initialized!
Loading plugin 'libjanus_recordplay.so'...
JANUS Record&amp;amp;Play plugin initialized!
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;yay&quot;&gt;Yay&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;Quick side note, to clean up the build I did a &lt;code class=&quot;highlighter-rouge&quot;&gt;git clean -f -d -x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now I can figure out how to change the name of the plugin and copy in the source from recordplaytest.  Well, doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -ir hello *&lt;/code&gt; , excluding janus_helloworld.c , only shows a few matches.  That’s cool, the name is not significant.  OK, it worked, but there are still “hello world” occurences in the source itself.&lt;/li&gt;
  &lt;li&gt;Before I copy paste the source from the recordplay plugin, let’s look at that &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -i hello *&lt;/code&gt; again.  Lots of matches, but which of those actually matter?  The #defines at the top, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;#define JANUS_HELLOWORLD_PACKAGE &quot;janus.plugin.helloworld&quot;&lt;/code&gt; don’t need to change, because they are simply returned by the getters.  In other words, I can copy paste the source from recordplay_plugin, the names won’t be HELLO anymore, they’ll be RECORDPLAY, and this is OK.
The interface implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_plugin&lt;/code&gt; is a struct of function pointers, so the names don’t matter, they’re just function pointers.  The symbol name of that implementation is &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_helloworld_plugin&lt;/code&gt; , ie. &lt;code class=&quot;highlighter-rouge&quot;&gt;static janus_plugin janus_helloworld_plugin&lt;/code&gt; .  A pointer to this struct is returned by the &lt;code class=&quot;highlighter-rouge&quot;&gt;*create()&lt;/code&gt; function.&lt;br /&gt;
So, my conclusion is, I will only have to change the name of &lt;code class=&quot;highlighter-rouge&quot;&gt;janus.plugin.recordplay&lt;/code&gt; or whatever it is, to something else, so the plugin namespace does not collide.&lt;/li&gt;
  &lt;li&gt;Now I can copy paste the source.  Ah crap.  There are headers in janus-gateway repo that have to be included in the build.  I don’t know how to do that in autotools.  Dang!   Oh, looking at Makefile.am , it appears I can specify a -I flag.  Oh, I don’t need to go to the source, the headers are exported in the Janus install.  Oh, the headers directory is already there!  Problem was the &lt;code class=&quot;highlighter-rouge&quot;&gt;../blah.h&lt;/code&gt; should be &lt;code class=&quot;highlighter-rouge&quot;&gt;blah.h&lt;/code&gt; .  Changing that…  OK, I built it again with &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, no need to do any more autotools stuff.  I get an error, plugin could not be initialized because no configuration file could be read.  Let’s copy one in there… &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/janus/etc/janus/&lt;/code&gt;  Yay, now it works!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;beginning-to-understand-the-plugin&quot;&gt;Beginning to understand the plugin&lt;/h1&gt;
&lt;p&gt;The first function definitions are the static helper functions, which is OK convention.  The first plugin implementation function is &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;.  This is called by Janus when Janus starts.  I saw this before, when Janus failed to start because a plugin couldn’t be initialized.  &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; first reads the configuration file, which is assumed to have &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;%s/%s.cfg&quot; format.  The path to the config files is an argument to &lt;/code&gt;init()&lt;code class=&quot;highlighter-rouge&quot;&gt; , which somehow must come from Janus.  The config file includes a path to where the recordings are stored.  That path is stored in a variable.  &lt;/code&gt;notify_events&lt;code class=&quot;highlighter-rouge&quot;&gt; is a static boolean, which is checked later before doing &lt;/code&gt;gateway-&amp;gt;notify_event` for sending an event.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;recordings = g_hast_table_new_full&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions = g_hst_table_new&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;messages = g_async_queue_new_full&lt;/code&gt; .&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handler_thread = g_thread_try_new&lt;/code&gt; starts a thread with function &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_handler&lt;/code&gt;  .  Oh god, that function is a monster, 421 lines, tons of if statements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;for-reference-here-is-the-plugin-interface-definition&quot;&gt;For reference, here is the plugin interface definition&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Plugin setup */
static janus_plugin janus_recordplay_plugin =
  JANUS_PLUGIN_INIT (
    .init = janus_recordplay_init,
    .destroy = janus_recordplay_destroy,

    .get_api_compatibility = janus_recordplay_get_api_compatibility,
    .get_version = janus_recordplay_get_version,
    .get_version_string = janus_recordplay_get_version_string,
    .get_description = janus_recordplay_get_description,
    .get_name = janus_recordplay_get_name,
    .get_author = janus_recordplay_get_author,
    .get_package = janus_recordplay_get_package,
    
    .create_session = janus_recordplay_create_session,
    .handle_message = janus_recordplay_handle_message,
    .setup_media = janus_recordplay_setup_media,
    .incoming_rtp = janus_recordplay_incoming_rtp,
    .incoming_rtcp = janus_recordplay_incoming_rtcp,
    .incoming_data = janus_recordplay_incoming_data,
    .slow_link = janus_recordplay_slow_link,
    .hangup_media = janus_recordplay_hangup_media,
    .destroy_session = janus_recordplay_destroy_session,
    .query_session = janus_recordplay_query_session,
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int janus_recordplay_init(janus_callbacks *callback, const char *onfig_path);
void janus_recordplay_destroy(void);
int janus_recordplay_get_api_compatibility(void);
int janus_recordplay_get_version(void);
const char *janus_recordplay_get_version_string(void);
const char *janus_recordplay_get_description(void);
const char *janus_recordplay_get_name(void);
const char *janus_recordplay_get_author(void);
const char *janus_recordplay_get_package(void);
void janus_recordplay_create_session(janus_plugin_session *handle, int *error);
struct janus_plugin_result *janus_recordplay_handle_message(janus_plugin_session *handle, char *transaction, json_t *message, json_t *jsep);
void janus_recordplay_setup_media(janus_plugin_session *handle);
void janus_recordplay_incoming_rtp(janus_plugin_session *handle, int video, char *buf, int len);
void janus_recordplay_incoming_rtcp(janus_plugin_session *handle, int video, char *buf, int len);
void janus_recordplay_incoming_data(janus_plugin_session *handle, char *buf, int len);
void janus_recordplay_slow_link(janus_plugin_session *handle, int uplink, int video);
void janus_recordplay_hangup_media(janus_plugin_session *handle);
void janus_recordplay_destroy_session(janus_plugin_session *handle, int *error);
json_t *janus_recordplay_query_session(janus_plugin_session *handle);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Ah very nice, these function declarations have the same order as the struct def.&lt;br /&gt;
Now I feel bad for saying it was unreadable.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Notice, the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; function takes a callback struct and a config path.  The other functions eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;incoming_rtp&lt;/code&gt; take a &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_plugin_session&lt;/code&gt;.  Let’s see what they are.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-is-janus_plugin_session-&quot;&gt;What is janus_plugin_session ?&lt;/h1&gt;
&lt;p&gt;Notice there is  &lt;code class=&quot;highlighter-rouge&quot;&gt;void janus_recordplay_create_session(janus_plugin_session *handle, int *error);&lt;/code&gt; .  This is called by Janus and implemented by the plugin.  What does it do in recordplay plugin?  Here it is&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void janus_recordplay_create_session(janus_plugin_session *handle, int *error) {
  if(g_atomic_int_get(&amp;amp;stopping) || !g_atomic_int_get(&amp;amp;initialized)) {
    *error = -1;
    return;
  } 
  janus_recordplay_session *session = g_malloc0(sizeof(janus_recordplay_session));
  session-&amp;gt;handle = handle;
... populate session fields
  janus_mutex_init(&amp;amp;session-&amp;gt;rec_mutex);
  session-&amp;gt;destroyed = 0;
  g_atomic_int_set(&amp;amp;session-&amp;gt;hangingup, 0);
... populate session fields
  handle-&amp;gt;plugin_handle = session;
  janus_mutex_lock(&amp;amp;sessions_mutex);
  g_hash_table_insert(sessions, handle, session);
  janus_mutex_unlock(&amp;amp;sessions_mutex);

  return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is convoluted, I don’t get it.  What’s happening here is, the recordplay plugin has a hash table called &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions&lt;/code&gt;.  A &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_session&lt;/code&gt; is malloc’d , populated, then stored in the hash table by reference.&lt;/p&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;janus_recordplay_incoming_rtp&lt;/code&gt; ,&lt;/p&gt;</content><author><name></name></author><summary type="html">The sample Janus Plugins are written in C and they are very good. But, it’s not very readable. I’d like a higher level description of what the sample plugin app does. Though the documentation is good, I still want a complete, high level description. I’ll do this by refactoring, which will also allow me to take out reusable snippets. Particularly looking to refactor to improve: separation of concerns (single responsibility) . Make it more obvious where the configuration file comes from. Pre- Notes Because these plugins are .so shared modules, I should be able to build the plugin by itself, then test with a real Janus instance. Janus’ build script builds the sample plugins with it, but that’s just for convenience. As a product developer, what I would do is have a separate build environment, git repo, etc. for my new plugin, build it, then deploy it to the /path/to/janus/lib/janus/plugins/ (I believe that’s where you deploy them?) Oh crap, it’s built with autotools, I forgot. I have no idea, and no desire to learn autotools. Hmm how do I build the plugin? Ah yes, thank you https://github.com/mquander/janus-helloworld-plugin . I will fork it! Then copy over the recordplaytest demo! Ah, it didn’t include any Janus headers, so those must come from the Janus installation on the server. I don’t have Janus installed on my laptop. Let’s just make sure by attempting a build on my laptop. Need jansson. Ah yes, of course, plugins/plugin.h not found. Let’s make sure that exists on the server installation. Well it’s actually in /path/to/janus/include/janus/plugins . Ah, checking the gcc -I flags, yes, it’s in there. Good! Eh, let’s build it on the cloud and then hook up a Jenkins later. Cool, it builds on my server that has Janus. Let’s… see if make install followed by restarting Janus will pick up the new plugin! JANUS AudioBridge plugin initialized! Loading plugin 'libjanus_helloworld.so'... JANUS hello world plugin initialized! Loading plugin 'libjanus_recordplay.so'... JANUS Record&amp;amp;Play plugin initialized! Yay Quick side note, to clean up the build I did a git clean -f -d -x Now I can figure out how to change the name of the plugin and copy in the source from recordplaytest. Well, doing a grep -ir hello * , excluding janus_helloworld.c , only shows a few matches. That’s cool, the name is not significant. OK, it worked, but there are still “hello world” occurences in the source itself. Before I copy paste the source from the recordplay plugin, let’s look at that grep -i hello * again. Lots of matches, but which of those actually matter? The #defines at the top, eg. #define JANUS_HELLOWORLD_PACKAGE &quot;janus.plugin.helloworld&quot; don’t need to change, because they are simply returned by the getters. In other words, I can copy paste the source from recordplay_plugin, the names won’t be HELLO anymore, they’ll be RECORDPLAY, and this is OK. The interface implementation, janus_plugin is a struct of function pointers, so the names don’t matter, they’re just function pointers. The symbol name of that implementation is janus_helloworld_plugin , ie. static janus_plugin janus_helloworld_plugin . A pointer to this struct is returned by the *create() function. So, my conclusion is, I will only have to change the name of janus.plugin.recordplay or whatever it is, to something else, so the plugin namespace does not collide. Now I can copy paste the source. Ah crap. There are headers in janus-gateway repo that have to be included in the build. I don’t know how to do that in autotools. Dang! Oh, looking at Makefile.am , it appears I can specify a -I flag. Oh, I don’t need to go to the source, the headers are exported in the Janus install. Oh, the headers directory is already there! Problem was the ../blah.h should be blah.h . Changing that… OK, I built it again with make, no need to do any more autotools stuff. I get an error, plugin could not be initialized because no configuration file could be read. Let’s copy one in there… /path/to/janus/etc/janus/ Yay, now it works! Beginning to understand the plugin The first function definitions are the static helper functions, which is OK convention. The first plugin implementation function is init. This is called by Janus when Janus starts. I saw this before, when Janus failed to start because a plugin couldn’t be initialized. init first reads the configuration file, which is assumed to have &quot;%s/%s.cfg&quot; format. The path to the config files is an argument to init() , which somehow must come from Janus. The config file includes a path to where the recordings are stored. That path is stored in a variable. notify_events is a static boolean, which is checked later before doing gateway-&amp;gt;notify_event` for sending an event. Now, recordings = g_hast_table_new_full , sessions = g_hst_table_new , messages = g_async_queue_new_full . handler_thread = g_thread_try_new starts a thread with function janus_recordplay_handler . Oh god, that function is a monster, 421 lines, tons of if statements.</summary></entry><entry><title type="html">Janus Notes</title><link href="/2018/03/09/janus-notes.html" rel="alternate" type="text/html" title="Janus Notes" /><published>2018-03-09T00:00:00-08:00</published><updated>2018-03-09T00:00:00-08:00</updated><id>/2018/03/09/janus-notes</id><content type="html" xml:base="/2018/03/09/janus-notes.html">&lt;p&gt;It appears that Janus is what I want.  I may have to apply browser-side recording, but first I’ll see how far Janus goes with server side.&lt;br /&gt;
Apparently, browsers can connect peer to peer to a Janus server.&lt;/p&gt;

&lt;p&gt;Obviously with all the acquisitions happening in this space, I’d like my app to be independent of Janus, source-wise and functionality-wise.&lt;/p&gt;

&lt;p&gt;Well I guess the first thing to do is install it on a server.&lt;br /&gt;
Let’s compile it for fun.&lt;/p&gt;

&lt;h1 id=&quot;compiling-janus-from-the-readme&quot;&gt;Compiling Janus (from the README)&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/meetecho/janus-gateway.git
cd janus-gateway
sh autogen.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;My debian 8 VPS didn’t have autoreconf.  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install autoconf&lt;/code&gt;&lt;br /&gt;
Then got this error &lt;code class=&quot;highlighter-rouge&quot;&gt;configure.ac:5: error: possibly undefined macro: AC_ENABLE_SHARED&lt;/code&gt;  , &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libtool&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install gettext&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install pkg-config&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure --prefix=/opt/janus --disable-websockets --disable-data-channels --disable-rabbitmq --disable-mqtt&lt;/code&gt;&lt;br /&gt;
Now tells me the packages I’m missing.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No package 'glib-2.0' found
No package 'nice' found
No package 'jansson' found
No package 'libssl' found
No package 'libcrypto' found
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hmm, didn’t know about jansson, that’s cool, a JSON library in C.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install glib-2.0
sudo apt install libjansson-dev
sudo apt install libnice-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Oh, somehow I missed this, I’ll just run the one liner from the README&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	aptitude install libmicrohttpd-dev libjansson-dev libnice-dev \
		libssl-dev libsrtp-dev libsofia-sip-ua-dev libglib2.0-dev \
		libopus-dev libogg-dev libcurl4-openssl-dev pkg-config gengetopt \
		libtool automake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As mentioned in README, apt install libsrtp didn’t work.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	wget https://github.com/cisco/libsrtp/archive/v1.5.4.tar.gz
	tar xfv v1.5.4.tar.gz
	cd libsrtp-1.5.4
	./configure --prefix=/usr --enable-openssl
	make shared_library &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Nice, here’s my configure output&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libsrtp version:           1.5.x
SSL/crypto library:        OpenSSL
DTLS set-timeout:          not available
DataChannels support:      no
Recordings post-processor: no
TURN REST API client:      yes
Doxygen documentation:     no
Transports:
    REST (HTTP/HTTPS):     yes
    WebSockets:            no
    RabbitMQ:              no
    MQTT:                  no
    Unix Sockets:          yes
Plugins:
    Echo Test:             yes
    Streaming:             yes
    Video Call:            yes
    SIP Gateway (Sofia):   yes
    SIP Gateway (libre):   no
    NoSIP (RTP Bridge):    yes
    Audio Bridge:          yes
    Video Room:            yes
    Voice Mail:            yes
    Record&amp;amp;Play:           yes
    Text Room:             yes
Event handlers:
    Sample event handler:  yes
    RabbitMQ event handler:no
JavaScript modules:        no
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Alright, a make, sudo make install, sudo make configs all worked!&lt;/p&gt;

&lt;p&gt;OK, now how do I connect to Janus?&lt;/p&gt;

&lt;h1 id=&quot;connecting-to-janus&quot;&gt;Connecting to Janus&lt;/h1&gt;

&lt;p&gt;I’m running the audiobridge demo.  The audiobridge.js has a hard coded URL for the Janus server.  I’m using this locally, ie. file:// , which I know only works on Firefox right now.  But this code won’t work…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var server = null;
if(window.location.protocol === 'http:')
  server = &quot;http://&quot; + window.location.hostname + &quot;:8088/janus&quot;;
else
  server = &quot;https://&quot; + window.location.hostname + &quot;:8089/janus&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So I will change this to set server = http://myexplicitURL:8088 ?&lt;/p&gt;

&lt;p&gt;Oh, first I have to run Janus.  It says &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP webserver started (port 8088, /janus path listener)...&lt;/code&gt;
Oh nice, some debugging help.  I point my browser to mydomain:8088 and it says Invalid URL.  Then I try mydomain:8088/janus and I get Invalid session.  That looks good!  Let’s change the audiobridge.js to that.&lt;/p&gt;

&lt;p&gt;Oh snap!  Getting some good logs in the console.&lt;br /&gt;
Dang, I can’t connect another peer because I loaded this locally.  Instead of bothering to copy the files to another machine, I should just serve them.&lt;/p&gt;

&lt;h1 id=&quot;connecting-to-janus-with-2-peers&quot;&gt;Connecting to Janus with 2 peers&lt;/h1&gt;
&lt;p&gt;So, not surpisingly, I’m getting issues with HTTPS.  Somehow I have to get it right, Janus over HTTPS, webserver over HTTPS, HTTPS proxy to a Janus over HTTP, whatever.  Well, I figured out how to get Beego framework to serve static pages over HTTPS, so that’ll do.  Don’t know what to do with Janus.  Let’s just put the static page in a running Beego server and see what happens.&lt;/p&gt;</content><author><name></name></author><summary type="html">It appears that Janus is what I want. I may have to apply browser-side recording, but first I’ll see how far Janus goes with server side. Apparently, browsers can connect peer to peer to a Janus server. Obviously with all the acquisitions happening in this space, I’d like my app to be independent of Janus, source-wise and functionality-wise.</summary></entry><entry><title type="html">Javascript Notes: The Relearning</title><link href="/2018/03/07/javascript-notes-the-relearning.html" rel="alternate" type="text/html" title="Javascript Notes: The Relearning" /><published>2018-03-07T00:00:00-08:00</published><updated>2018-03-07T00:00:00-08:00</updated><id>/2018/03/07/javascript-notes-the-relearning</id><content type="html" xml:base="/2018/03/07/javascript-notes-the-relearning.html">&lt;p&gt;Learning to use this demo: https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/audio-recording.html&lt;br /&gt;
Starting from the top… What is this?  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;&amp;gt;&lt;/code&gt;  ah of course, it’s for mobile devices.  https://stackoverflow.com/questions/14775195/is-the-viewport-meta-tag-really-necessary&lt;/p&gt;

&lt;p&gt;What is this?  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;audio controls autoplay&amp;gt;&amp;lt;/audio&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;  It’s the audio widget, which I did not know was an HTML tag.  &lt;code class=&quot;highlighter-rouge&quot;&gt;controls&lt;/code&gt; shows the play, seek, volume controls, &lt;code class=&quot;highlighter-rouge&quot;&gt;autoplay&lt;/code&gt; plays without pressing play.&lt;/p&gt;

&lt;p&gt;What is this?  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;   Oh… we need to use this adapter for cross browser compatibility, insulating us from name changes.&lt;/p&gt;

&lt;p&gt;Why does the demo code declare vars all over the place… Let’s move them to the top.  Demo still works.&lt;/p&gt;

&lt;p&gt;So.. the control flow here is convoluted, impossible to read top to bottom.  Let’s start from pressing the “Start Recording” button.  Using the inspector I see the button has a click event.  I see where this is set, and I’ll move it to the top.  Ah finally some sense; all the click handlers are set in a block.  So I’ll just move all the click handlers to the top.&lt;/p&gt;

&lt;p&gt;Alright, the btnStartRecording.onclick.  This smells bad, I’m pretty sure?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;btnStartRecording.onclick = function() {
    this.disabled = true;
    this.style.border = '';
    this.style.fontSize = '';

    if (!microphone) {
        captureMicrophone(function(mic) {
            microphone = mic;

// Different behavior for Safari?  Changes button style, does an alert?
            if(isSafari) {
                replaceAudio();

                audio.muted = true;
                setSrcObject(microphone, audio);
                audio.play();

                btnStartRecording.disabled = false;
                btnStartRecording.style.border = '1px solid red';
                btnStartRecording.style.fontSize = '150%';

                alert('Please click startRecording button again. First time we tried to access your microphone. Now we will record it.');
                return;
//Return from calling function inside callback?  What?
            }

//Calling this function again, using a helper named click which,
//instead of calling the function, sends another click event?
//Hmm, maybe because we want the call to happen asynchronous to this
//function call we're currently in, as opposed to recursive?
            click(btnStartRecording);
        });
        return;
    }
console.log(&quot;\ndid we get here?\n&quot;);
    replaceAudio();

    audio.muted = true;
    setSrcObject(microphone, audio);
    audio.play();

    var options = {
        type: 'audio',
        numberOfAudioChannels: isEdge ? 1 : 2,
        checkForInactiveTracks: true,
        bufferSize: 16384
    };

    if(navigator.platform &amp;amp;&amp;amp; navigator.platform.toString().toLowerCase().indexOf('win') === -1) {
        options.sampleRate = 48000; // or 44100 or remove this line for default
    }

    if(recorder) {
        recorder.destroy();
        recorder = null;
    }

    recorder = RecordRTC(microphone, options);

    recorder.startRecording();

    btnStopRecording.disabled = false;
    btnDownloadRecording.disabled = true;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What happens when I Do Not Allow access to the microphone?  The console.log does not get logged.&lt;/p&gt;

&lt;p&gt;First I refresh the page. Then click the button.  The microphone is null so captureMicrophone() is called.  captureMicrophone() sets the Release Button (a global variable) to not disabled.  captureMicrophone() then checks that same microphone global, which is still null at this time.  Then tries to getUserMedia(), and since I Do Not Allow, we get the alert.  Ah.. at this point the function returns, but Does Not call the Callback!  So, the Start Recording click handler returns, and that’s the end of the story.&lt;/p&gt;

&lt;p&gt;Now, what happens when I Allow Access to the microphone?&lt;br /&gt;
Here we see the real magic, navigator.mediaDevices.getUserMedia() , which appears to take some configuration object?  On success the callback is called, with the mic being passed in from getUserMedia?  Then in the callback, if it’s safari the user is required to press the button again, but otherwise the click() helper function generates another click event.  This time, the global variable microphone is not-null, so we go on to the end of the function where the recording actually happens.&lt;/p&gt;

&lt;p&gt;replaceAudio() , don’t know why this is necessary, it replaces the &lt;audio&gt; tag with a new one, with optional src to be specified.  Why not just use the existing one without replacing it?&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;setSrcObject() is a RecordRTC function, does it attach the microphone to the &lt;audio&gt; widget?  and then audio.play() moves the seeker and changes the play button to a pause button.  audio.muted=true is there, to stop playback during record, which would cause feedback.&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;Then, if there’s a recorder it is destroyed, and then we create the RecordRTC object and start recording.&lt;/p&gt;

&lt;h1 id=&quot;note-what-is-navigator&quot;&gt;note, what is navigator?&lt;/h1&gt;
&lt;p&gt;The navigator object contains information about the browser.&lt;br /&gt;
In this demo we see&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;navigator.platform        == 'win'
navigator.mediaDevices
navigator.mediaDevices.getUserMedia
navigator.userAgent       == 'Safari'
navigator.msSaveOrOpenBlob
navigator.msSaveBlob
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Stop Recording Button click handler calls recorder.stopRecording, which will then call the stopRecordingCallback() which calls replaceAudio() and then audio.play()&lt;/p&gt;

&lt;h1 id=&quot;random-notes&quot;&gt;Random notes&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getUserMedia&lt;/code&gt; is a promise, either calling a callback or an error.  Apparently, if the callback itself fails execution, then the error is caught.  Also, if this happens, the UserMedia is not released.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.youtube.com/watch?v=4ba0G8FQt5M&lt;/code&gt;  This talk is good.
#Blobs&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;FileReader can read content from a blob.  readAsText() , readAsArrayBuffer().&lt;/li&gt;
  &lt;li&gt;A File is a Blob.&lt;/li&gt;
  &lt;li&gt;FileReader can readAsText(myFile);&lt;/li&gt;
  &lt;li&gt;ArrayBuffer is like a Blob, but the bytes are on disk.&lt;/li&gt;
  &lt;li&gt;var bytes = new Uint8Array(buffer); //creates a typed array from an array buffer.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Learning to use this demo: https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/audio-recording.html Starting from the top… What is this? &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;&amp;gt; ah of course, it’s for mobile devices. https://stackoverflow.com/questions/14775195/is-the-viewport-meta-tag-really-necessary What is this? &amp;lt;div&amp;gt;&amp;lt;audio controls autoplay&amp;gt;&amp;lt;/audio&amp;gt;&amp;lt;/div&amp;gt; It’s the audio widget, which I did not know was an HTML tag. controls shows the play, seek, volume controls, autoplay plays without pressing play. What is this? &amp;lt;script src=&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Oh… we need to use this adapter for cross browser compatibility, insulating us from name changes. Why does the demo code declare vars all over the place… Let’s move them to the top. Demo still works. So.. the control flow here is convoluted, impossible to read top to bottom. Let’s start from pressing the “Start Recording” button. Using the inspector I see the button has a click event. I see where this is set, and I’ll move it to the top. Ah finally some sense; all the click handlers are set in a block. So I’ll just move all the click handlers to the top. Alright, the btnStartRecording.onclick. This smells bad, I’m pretty sure? ``` btnStartRecording.onclick = function() { this.disabled = true; this.style.border = ‘’; this.style.fontSize = ‘’;</summary></entry><entry><title type="html">Remove Secret Data from Old git Commits not yet pushed</title><link href="/2018/02/09/remove-secret-data-from-old-git-commits-not-yet-pushed.html" rel="alternate" type="text/html" title="Remove Secret Data from Old git Commits not yet pushed" /><published>2018-02-09T00:00:00-08:00</published><updated>2018-02-09T00:00:00-08:00</updated><id>/2018/02/09/remove-secret-data-from-old-git-commits-not-yet-pushed</id><content type="html" xml:base="/2018/02/09/remove-secret-data-from-old-git-commits-not-yet-pushed.html">&lt;p&gt;I didn’t push to the remote yet. The very initial commit of my repo has an API token in it.&lt;br /&gt;
My current verison still has that API token in it.&lt;br /&gt;
I want to replace the token at the initial commit, then I want to rebase all the other commits after that.&lt;br /&gt;
To do this, I’ll make a dummy branch at master so I don’t lose that branch.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch dummybranch&lt;/code&gt;&lt;br /&gt;
Then I’ll &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout init_commit_sha1&lt;/code&gt;&lt;br /&gt;
Then make a branch to name it, &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch initcommit&lt;/code&gt;.&lt;br /&gt;
Then I will modify code here, removing the secret data.&lt;br /&gt;
Oops!  I’m stupid.  I need to remove the initial commit from the history.&lt;/p&gt;

&lt;p&gt;So, now my plan is to create a new repository, starting with the working copy of the initial commit, but with no commits in this new repository yet.&lt;br /&gt;
Then I will add my bad repo as a remote, fetch all the commits, and 
hopefully see a way to rebase the commits.&lt;/p&gt;

&lt;p&gt;Crap !  Turns out I have commits in the middle of the history that
has another occurrence of the secret data, then a commit where gofmt
indented the line with the secret data.&lt;br /&gt;
You know what, I’ll go with the Internet’s advice.  I’ll squash all the commits
into 1 commit, totally wasting all my history but whatever.&lt;br /&gt;
What I’ll do is add a new commit after master that removes all occurrences
of the secret data.  Then I’ll squash everything, so the secret data is not in that squashed commit.&lt;/p&gt;

&lt;p&gt;Crap !  The squashed commit contains a deletion of an occurrence of the secret data!&lt;br /&gt;
Well dang, I don’t know what to do.  I’ll just give up, start a new repo history from where I’m at now, after removing all occurrences of the secret data.&lt;/p&gt;</content><author><name></name></author><summary type="html">I didn’t push to the remote yet. The very initial commit of my repo has an API token in it. My current verison still has that API token in it. I want to replace the token at the initial commit, then I want to rebase all the other commits after that. To do this, I’ll make a dummy branch at master so I don’t lose that branch. git branch dummybranch Then I’ll git checkout init_commit_sha1 Then make a branch to name it, git branch initcommit. Then I will modify code here, removing the secret data. Oops! I’m stupid. I need to remove the initial commit from the history. So, now my plan is to create a new repository, starting with the working copy of the initial commit, but with no commits in this new repository yet. Then I will add my bad repo as a remote, fetch all the commits, and hopefully see a way to rebase the commits. Crap ! Turns out I have commits in the middle of the history that has another occurrence of the secret data, then a commit where gofmt indented the line with the secret data. You know what, I’ll go with the Internet’s advice. I’ll squash all the commits into 1 commit, totally wasting all my history but whatever. What I’ll do is add a new commit after master that removes all occurrences of the secret data. Then I’ll squash everything, so the secret data is not in that squashed commit. Crap ! The squashed commit contains a deletion of an occurrence of the secret data! Well dang, I don’t know what to do. I’ll just give up, start a new repo history from where I’m at now, after removing all occurrences of the secret data.</summary></entry><entry><title type="html">React and AngularJS Notes</title><link href="/2018/02/06/react-and-angularjs-notes.html" rel="alternate" type="text/html" title="React and AngularJS Notes" /><published>2018-02-06T00:00:00-08:00</published><updated>2018-02-06T00:00:00-08:00</updated><id>/2018/02/06/react-and-angularjs-notes</id><content type="html" xml:base="/2018/02/06/react-and-angularjs-notes.html">&lt;h1 id=&quot;react&quot;&gt;React&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;A component is a self-contained module that renders some output
** For example, a button.  A component might include one or more other components in its output.  eg. a Form.&lt;/li&gt;
  &lt;li&gt;Wow, this caching thing on index.html is pretty terrible for a new user.&lt;/li&gt;
  &lt;li&gt;All components have a &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function that SPECIFIES what the HTML output of the COMPONENT is.&lt;/li&gt;
  &lt;li&gt;JSX: JS Extension, allows writing JS that LOOKS LIKE HTML
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class HelloWorld extends React.Component {
  render() {  //The component has a RENDER Function
 return (  //The render function RETURNS HTML
   &amp;lt;h1 className='large'&amp;gt;Hello World&amp;lt;/h1&amp;gt;  //THIS IS NOT ACTUALLY HTML
 );
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;h1 className GETS CONVERTED TO class.  This is because CLASS IS A RESERVED JS KEYWORD.&lt;/li&gt;
  &lt;li&gt;JSX is very convenient notation for writing nested HTML snippets&lt;/li&gt;
  &lt;li&gt;In order to load React from &lt;script&gt;&lt;/script&gt; , ie. client side, the following is needeed:&lt;/li&gt;
  &lt;li&gt;react.min.js , react-dom.min.js, babel-core@x.x.x/browser.min.js&lt;/li&gt;
  &lt;li&gt;Babel is a library for transpiling ES6 to ES5.&lt;/li&gt;
  &lt;li&gt;Inside the body we have the following:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/babel&quot;&amp;gt;
var app = &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
var mountComponent = document.querySelector('#app');
ReactDOM.render(app, mountComponent);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This tells Bable to convert the above ES6 into ES5&lt;/li&gt;
  &lt;li&gt;render() :  &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render(&amp;lt;what&amp;gt;, &amp;lt;where&amp;gt;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Interesting, in this case the WHERE is #app.  In other tutorials it was document root.&lt;/li&gt;
  &lt;li&gt;In the above snippet, app is a HTML snippet, directly passed into render().&lt;/li&gt;
  &lt;li&gt;Another way to do it is this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render(&amp;lt;App /&amp;gt;, mount);&lt;/code&gt; Where App is a class like class HelloWorld&lt;/li&gt;
  &lt;li&gt;Ah, this makes sense why I struggled with the meta tags.  They go inside head.  In
 these examples, the rendering goes to document root or a #hash section.&lt;/li&gt;
  &lt;li&gt;As a test, I should be able to call render() twice in a row and get 2 components to render.
** Cool.  After doing that I saw that, if render() is called twice in a row on the same DOM mount (what’s it called?)
This is intuitive, the DOM mount gets overwritten.  Using 2 div tags with different classes, render() can be called on each of them.&lt;/li&gt;
  &lt;li&gt;A “Wrapper” component combines multiple components.  The Wrapper will have divs with classnames.&lt;br /&gt;
The Wrapper will nest other divs inside those divs, with classnames.  Those child components 
can be used in the Parent by tag notation.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class App extends React.Component {
render() {
  return (
    &amp;lt;div className=&quot;notificationsFrame&quot;&amp;gt;
      &amp;lt;div className=&quot;panel&quot;&amp;gt;
        &amp;lt;Header /&amp;gt;
        &amp;lt;Content /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;to-add-data-ie-props-to-a-component&quot;&gt;To add data ie. props to a component&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;Write something like this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Header title=&quot;My Header&quot;&amp;gt;&lt;/code&gt; It is picked up by the Component liek this:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span className=&quot;title&quot;&amp;gt;
{this.props.title}
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h1 id=&quot;httpsreactjsorgtutorialtutorialhtml-was-informative&quot;&gt;https://reactjs.org/tutorial/tutorial.html was informative&lt;/h1&gt;
    &lt;h1 id=&quot;httpsreactjsorgdocsstate-and-lifecyclehtml&quot;&gt;https://reactjs.org/docs/state-and-lifecycle.html&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;I need to learn how setting state works.&lt;/li&gt;
  &lt;li&gt;Do I need a constructor to have this.state?&lt;/li&gt;
  &lt;li&gt;Is this.setState() the only way to set state? (except initializing state in constructor?)&lt;/li&gt;
  &lt;li&gt;This is what I’m doing:
** In render() I am using {this.state.mystatevar}
** In componentDidMount() I am using this.setState{mystatevar:myval};
** But the console says error: cannot read property mystatevar of null.
** It appears the answer is Yes, you have to declare the different state variables in the constructor&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;uggh-i-dont-know-how-to-separate-the-js-into-different-js-files&quot;&gt;Uggh, I don’t know how to separate the JS into different .js files.&lt;/h1&gt;
&lt;h1 id=&quot;all-i-want-is-a-indexhtml-and-a-indexjs&quot;&gt;All I want is a index.html and a index.js&lt;/h1&gt;

&lt;h1 id=&quot;angularjs&quot;&gt;AngularJS&lt;/h1&gt;
&lt;p&gt;First you have this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoApp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;
And eventually this:  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div ng-controller=&quot;TodoListController as todoList&quot;&amp;gt;&lt;/code&gt;
Then in the .js you have:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module('todoApp', [])
  .controller('TodoListController', function() {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The names have to match.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoApp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;  Does not have to be at the top, or in a html tag.&lt;br /&gt;
In order to use $http requests, the controller is passed $http.  As in this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module('myapp', [])
  .controller('myController', function($http) {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;$http will give &lt;code class=&quot;highlighter-rouge&quot;&gt;No 'Access-Control-Allow-Origin' header is present on the requested resource.'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meh, I don’t like it.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;As soon as I found out how much has changed over the versions I immediately quit.  I’m not going to bother learning the history when I already think it sucks&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">React A component is a self-contained module that renders some output ** For example, a button. A component might include one or more other components in its output. eg. a Form. Wow, this caching thing on index.html is pretty terrible for a new user. All components have a render function that SPECIFIES what the HTML output of the COMPONENT is. JSX: JS Extension, allows writing JS that LOOKS LIKE HTML class HelloWorld extends React.Component { render() { //The component has a RENDER Function return ( //The render function RETURNS HTML &amp;lt;h1 className='large'&amp;gt;Hello World&amp;lt;/h1&amp;gt; //THIS IS NOT ACTUALLY HTML ); } } h1 className GETS CONVERTED TO class. This is because CLASS IS A RESERVED JS KEYWORD. JSX is very convenient notation for writing nested HTML snippets In order to load React from , ie. client side, the following is needeed: react.min.js , react-dom.min.js, babel-core@x.x.x/browser.min.js Babel is a library for transpiling ES6 to ES5. Inside the body we have the following: &amp;lt;script type=&quot;text/babel&quot;&amp;gt; var app = &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt; var mountComponent = document.querySelector('#app'); ReactDOM.render(app, mountComponent); &amp;lt;/script&amp;gt; This tells Bable to convert the above ES6 into ES5 render() : ReactDOM.render(&amp;lt;what&amp;gt;, &amp;lt;where&amp;gt;) Interesting, in this case the WHERE is #app. In other tutorials it was document root. In the above snippet, app is a HTML snippet, directly passed into render(). Another way to do it is this: ReactDOM.render(&amp;lt;App /&amp;gt;, mount); Where App is a class like class HelloWorld Ah, this makes sense why I struggled with the meta tags. They go inside head. In these examples, the rendering goes to document root or a #hash section. As a test, I should be able to call render() twice in a row and get 2 components to render. ** Cool. After doing that I saw that, if render() is called twice in a row on the same DOM mount (what’s it called?) This is intuitive, the DOM mount gets overwritten. Using 2 div tags with different classes, render() can be called on each of them. A “Wrapper” component combines multiple components. The Wrapper will have divs with classnames. The Wrapper will nest other divs inside those divs, with classnames. Those child components can be used in the Parent by tag notation. class App extends React.Component { render() { return ( &amp;lt;div className=&quot;notificationsFrame&quot;&amp;gt; &amp;lt;div className=&quot;panel&quot;&amp;gt; &amp;lt;Header /&amp;gt; &amp;lt;Content /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) } } To add data ie. props to a component Write something like this: &amp;lt;Header title=&quot;My Header&quot;&amp;gt; It is picked up by the Component liek this: &amp;lt;span className=&quot;title&quot;&amp;gt; {this.props.title} &amp;lt;/span&amp;gt; https://reactjs.org/tutorial/tutorial.html was informative https://reactjs.org/docs/state-and-lifecycle.html I need to learn how setting state works. Do I need a constructor to have this.state? Is this.setState() the only way to set state? (except initializing state in constructor?) This is what I’m doing: ** In render() I am using {this.state.mystatevar} ** In componentDidMount() I am using this.setState{mystatevar:myval}; ** But the console says error: cannot read property mystatevar of null. ** It appears the answer is Yes, you have to declare the different state variables in the constructor</summary></entry><entry><title type="html">CMake: Building an App for Multiple Targets</title><link href="/2018/01/22/cmake-building-an-app-for-multiple-targets.html" rel="alternate" type="text/html" title="CMake: Building an App for Multiple Targets" /><published>2018-01-22T00:00:00-08:00</published><updated>2018-01-22T00:00:00-08:00</updated><id>/2018/01/22/cmake-building-an-app-for-multiple-targets</id><content type="html" xml:base="/2018/01/22/cmake-building-an-app-for-multiple-targets.html">&lt;p&gt;I have an application, it’s a sniffer.&lt;br /&gt;
I want it to run on bare metal, on an OS, and on multiple CPU targets.&lt;br /&gt;
Basically anything with a SPI port and the radio should be able to run this.&lt;br /&gt;
OK, looks like it worked.  Here’s what I learned:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steve@steve-ThinkPad-T420:~/prog/debos/debos_sniffer$ tree
.
├── build.sh
├── CMakeLists.txt
├── Makefile
├── platform
│   ├── CMakeLists.txt
│   ├── samd20_baremetal
│   └── samd20_debos
│       ├── atsamd20j18.ld
│       ├── CMakeLists.txt
│       └── halStartup.c
├── README.md
├── src
│   ├── app.c
│   ├── my_memcpy.c
│   ├── my_memcpy.h
│   └── System.h
└── tool
    ├── sniffer_parser_lwmesh.py
    └── sniffer_reader.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#### The Top Level CMakeLists.txt
cmake_minimum_required(VERSION 3.5)

add_subdirectory(platform)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#### The platform/ CMakeLists.txt
add_subdirectory(samd20_debos)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, here’s where all the original stuff went.  platform/samd20_debos CMakeLists.txt.  I made a few modifications to it.&lt;/p&gt;

&lt;p&gt;First notice in the tree, that I have halStartup.c inside of platform/, not src/.  This is because halStartup.c is platform specific; it defines the vector table, startup code, etc.  In the case of the bootloaded (debos) version, the startup code is actually dummy, and it is just there to help the linker create the binary image correctly.  But for the bare metal version, the startup code needs to be correct and actually call the main()  while(1)&lt;/p&gt;

&lt;p&gt;src/ only has app.c , which currently does depend on a SAMD20 specific library.  We’ll take care of that later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
#set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I commented those out, I need to figure out whether I’m supposed to set them myself, or use the preset values.  I did notice that setting CMAKE_BINARY_DIR causes the built binaries to show up there, which is what I want.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; add_custom_command(TARGET debos_sniffer POST_BUILD
-    COMMAND size bin/debos_sniffer
+    COMMAND size debos_sniffer
 )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here’s another interesting one.  Before when CMAKE_BINARY_DIR was set to ${CMAKE_SOURCE_DIR}/bin, the custom command worked by specifying bin/debos_sniffer.  This is bin/ at the top level, where .git/ is.  But now, the compiled binary shows up in build/platform/samd20_debos/ , and somehow it is found by just specifying debos_sniffer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+#file(GLOB SOURCES
+#    &quot;*.h&quot;
+#    &quot;*.c&quot;
+#    &quot;hal/*.c&quot;
+#    &quot;hal/*.h&quot;
+#)
+
+set(SOURCES   ${CMAKE_SOURCE_DIR}/src/app.c  
+							${CMAKE_SOURCE_DIR}/src/my_memcpy.c 
+	 ) 
+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here you see I replaced file(GLOB SOURCES …) with set(SOURCES …),
as recommended by people.  Notice I’m specifying more exactly where the source is; the previous file(GLOB SOURCES …) worked when CMakeLists.txt was inside the directory with the source.&lt;/p&gt;

&lt;h1 id=&quot;ok-now-that-i-have-the-original-target-built-and-working-i-can-add-another-target&quot;&gt;OK now that I have the original target built and working, I can add another target.&lt;/h1&gt;
&lt;p&gt;This is the bare metal target.  It’s basically the same thing except:&lt;br /&gt;
App vector table has to be correct; these are Reset Vector and ISRs.  This app doesn’t use any ISRs so it can’t go too horribly wrong.&lt;/p&gt;

&lt;p&gt;To check that the bare metal app is built correct, I will do the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Check that Reset Vector points to startup code.&lt;/li&gt;
  &lt;li&gt;Check that startup code points to and calls main().&lt;/li&gt;
  &lt;li&gt;Check that main() points to and calls app().&lt;/li&gt;
  &lt;li&gt;Check that the calls to Checkpoint() are stubbed out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-add_subdirectory-in-cmakeliststxt-inside-platform&quot;&gt;1. add_subdirectory() in CMakeLists.txt inside platform/&lt;/h1&gt;
&lt;h1 id=&quot;2-copy-halstartupc-linkerscriptld-cmakeliststxt-from-the-working-target&quot;&gt;2. copy halStartup.c, linkerscript.ld, CMakeLists.txt from the working target&lt;/h1&gt;
&lt;p&gt;Now let’s see what the build says.  Dang it’s a tricky one!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMake Error at /usr/share/cmake-3.5/Modules/ExternalProject.cmake:2405 (add_custom_target):
  add_custom_target cannot create target &quot;samd20_headers&quot; because another
  target with the same name already exists.  The existing target is a custom
  target created in source directory
  &quot;/home/steve/prog/debos/debos_sniffer/platform/samd20_debos&quot;.  See
  documentation for policy CMP0002 for more details.
Call Stack (most recent call first):
  platform/samd20_baremetal/CMakeLists.txt:69 (ExternalProject_Add)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So, both CMakeLists.txt are identical, so I didn’t expect it to work anyway.  We see here it was because of ExternalProject_Add.&lt;br /&gt;
The target “samd20_headers” already exists.&lt;br /&gt;
Well, since the 2 projects use exactly the same library, let’s try to move the ExternalProject_Add up a level.  So remove the duplicated calls to ExternalProject_Add and stick it in the CMakeLists.txt 1 level up.&lt;/p&gt;

&lt;p&gt;Cool, I did that and the I got an error that I was actually expecting.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMake Error at platform/samd20_baremetal/CMakeLists.txt:117 (add_executable):
  add_executable cannot create target &quot;debos_sniffer&quot; because another target
  with the same name already exists.  The existing target is an executable
  created in source directory
  &quot;/home/steve/prog/debos/debos_sniffer/platform/samd20_debos&quot;.  See
  documentation for policy CMP0002 for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is obviously the re-use of the executable’s name, debos_sniffer.  That has to change.&lt;br /&gt;
Woah cool looks like they both built!&lt;/p&gt;

&lt;h1 id=&quot;lets-open-up-hopper-and-see-what-it-looks-like&quot;&gt;Let’s open up Hopper and see what it looks like&lt;/h1&gt;

&lt;p&gt;For an ARM Cortex M0+ the Reset Vector is located at address 0x4.&lt;br /&gt;
I got a 0xd9220000, and changing from bad-endian to good-endian, I get the address 0x22d9.  What is that…? &lt;code class=&quot;highlighter-rouge&quot;&gt;HAL_IrqHandlerReset&lt;/code&gt; Yes!  That’s my startup code.  Now, does it call main?  Hopper says it does.  Now, does main call app() in an infinite loop?  Yes!&lt;/p&gt;

&lt;p&gt;OK now for the tricky part.  The Bootloaded version used a function called Checkpoint() which would take a string and some flags, and use the Bootloader’s UART interface to output the bytes, turn on LED, halt the CPU or whatever.&lt;br /&gt;
The app itself doesn’t configure any serial out.  Also, the Checkpoint() function doesn’t exist so calling it would be bad.&lt;br /&gt;
So, this is not going to be very eventful, since a sniffer literally just outputs serial and nothing else.&lt;/p&gt;

&lt;h1 id=&quot;well-just-for-fun-lets-add-a-led-toggle-at-the-app-level&quot;&gt;Well just for fun, let’s add a LED toggle at the App level.&lt;/h1&gt;
&lt;p&gt;To do this, I will bring in some app code that turns on a LED of a different color.  There are 3 LEDs with different colors on the board that I have.  The Bootloader has control of 1 of them.  So let’s have the app turn on the other one, that tells us the app is in control.&lt;/p&gt;

&lt;p&gt;OK that compiled, but now I’m back to my Jenkins issue.  When I push the repo, Jenkins will build it, which will create 2 sets of compiler outputs, one for bootloaded one for bare metal.&lt;/p&gt;

&lt;p&gt;I want to be able to grab either binary without typing out a long ass pathname.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have an application, it’s a sniffer. I want it to run on bare metal, on an OS, and on multiple CPU targets. Basically anything with a SPI port and the radio should be able to run this. OK, looks like it worked. Here’s what I learned: steve@steve-ThinkPad-T420:~/prog/debos/debos_sniffer$ tree . ├── build.sh ├── CMakeLists.txt ├── Makefile ├── platform │   ├── CMakeLists.txt │   ├── samd20_baremetal │   └── samd20_debos │   ├── atsamd20j18.ld │   ├── CMakeLists.txt │   └── halStartup.c ├── README.md ├── src │   ├── app.c │   ├── my_memcpy.c │   ├── my_memcpy.h │   └── System.h └── tool ├── sniffer_parser_lwmesh.py └── sniffer_reader.py ``` The Top Level CMakeLists.txt cmake_minimum_required(VERSION 3.5)</summary></entry><entry><title type="html">Jenkins Job Migration (ie. Jenkins uses too much RAM)</title><link href="/2018/01/21/jenkins-uses-too-much-ram.html" rel="alternate" type="text/html" title="Jenkins Job Migration (ie. Jenkins uses too much RAM)" /><published>2018-01-21T00:00:00-08:00</published><updated>2018-01-21T00:00:00-08:00</updated><id>/2018/01/21/jenkins-uses-too-much-ram</id><content type="html" xml:base="/2018/01/21/jenkins-uses-too-much-ram.html">&lt;p&gt;Dang, I finally figured out why my Docker containers were failing shortly after starting.&lt;br /&gt;
That Error Code 137, Out of Memory.&lt;br /&gt;
Really it’s my stupid Redmine container that’s taking up 30% of my 1GB RAM.  But I can’t do anything about that.&lt;br /&gt;
Jenkins I can consolidate the 3 instances into 1.&lt;br /&gt;
Previously I had 1 Jenkins per toolchain, ie. 1 for arm-linux , 1 for arm-none, 1 for golang, etc.  I liked this because it keeps the toolchain installs independent.&lt;br /&gt;
Now I have to use 1 Jenkins container with all the toolchains inside of it.&lt;/p&gt;

&lt;p&gt;First I’ll have to port all the Jobs into the 1 Jenkins instance.  Then I’ll see them in the Jenkins UI, so I can run builds which will fail due to no toolchain installed.  Then I can install the toolchains.&lt;/p&gt;

&lt;p&gt;Great, copy pasting the jobs/ directories worked, I now see the jobs in the Jenkins homepage.  And of course, running the build fails due to non-existing toolchain.&lt;br /&gt;
So let’s open the Dockerfile and install some toolchains.&lt;/p&gt;

&lt;p&gt;Well it works, pretty obvious.&lt;/p&gt;

&lt;p&gt;Just remember folks, 1GB RAM is easily plenty and easily nothing.  Pay attention to how much your stupid high level frameworks and languages use.&lt;/p&gt;</content><author><name></name></author><summary type="html">Dang, I finally figured out why my Docker containers were failing shortly after starting. That Error Code 137, Out of Memory. Really it’s my stupid Redmine container that’s taking up 30% of my 1GB RAM. But I can’t do anything about that. Jenkins I can consolidate the 3 instances into 1. Previously I had 1 Jenkins per toolchain, ie. 1 for arm-linux , 1 for arm-none, 1 for golang, etc. I liked this because it keeps the toolchain installs independent. Now I have to use 1 Jenkins container with all the toolchains inside of it. First I’ll have to port all the Jobs into the 1 Jenkins instance. Then I’ll see them in the Jenkins UI, so I can run builds which will fail due to no toolchain installed. Then I can install the toolchains. Great, copy pasting the jobs/ directories worked, I now see the jobs in the Jenkins homepage. And of course, running the build fails due to non-existing toolchain. So let’s open the Dockerfile and install some toolchains. Well it works, pretty obvious. Just remember folks, 1GB RAM is easily plenty and easily nothing. Pay attention to how much your stupid high level frameworks and languages use.</summary></entry></feed>