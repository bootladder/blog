<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-01-19T13:43:01-08:00</updated><id>/</id><title type="html">Bootladder News</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">arduino-cmake first try</title><link href="/2018/01/16/arduino-cmake-first-try.html" rel="alternate" type="text/html" title="arduino-cmake first try" /><published>2018-01-16T00:00:00-08:00</published><updated>2018-01-16T00:00:00-08:00</updated><id>/2018/01/16/arduino-cmake-first-try</id><content type="html" xml:base="/2018/01/16/arduino-cmake-first-try.html">&lt;p&gt;I cloned the repo.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd example
mkdir build
cmake ..
CMake Error at CMakeLists.txt:11 (GENERATE_ARDUINO_LIBRARY_EXAMPLE):
  Unknown CMake command &quot;GENERATE_ARDUINO_LIBRARY_EXAMPLE&quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/queezythegreat/arduino-cmake/issues/38&lt;/code&gt; solves it.&lt;br /&gt;
mkdir build;cmake .. must happen in the top level CMakeLists.txt directory.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ mkdir build
steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ cd build
steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ cmake ..
CMake Error at cmake/ArduinoToolchain.cmake:93 (message):
  Could not find Arduino SDK (set ARDUINO_SDK_PATH)!
Call Stack (most recent call first):
  /usr/share/cmake-3.5/Modules/CMakeDetermineSystem.cmake:98 (include)
  CMakeLists.txt:15 (project)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK, it can’t find the toolchain.  It’s not installed.  What happened …&lt;br /&gt;
Line 15 of the top level CMakeLists.txt, was a project() call.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project(ArduinoExample C CXX ASM)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And then project() calls CMake core… line 98&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     include(&quot;${CMAKE_TOOLCHAIN_FILE}&quot; OPTIONAL RESULT_VARIABLE _INCLUDED_TOOLCHAIN_FILE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMAKE_TOOLCHAIN_FILE&lt;/code&gt; is set in the CMakeLists.txt:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#=============================================================================#
# Author: QueezyTheGreat                                                      #
# Date:   26.04.2011                                                          #
#                                                                             #
# Description: Arduino CMake example                                          #
#                                                                             #
#=============================================================================#
set(CMAKE_TOOLCHAIN_FILE cmake/ArduinoToolchain.cmake) # Arduino Toolchain


cmake_minimum_required(VERSION 2.8)
#====================================================================#
#  Setup Project                                                     #
#====================================================================#
project(ArduinoExample C CXX ASM)

print_board_list()
print_programmer_list()

add_subdirectory(example)   #add the example directory into build
~                                                                     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So we are reading the ArduinoToolchain.cmake. 
Some interesting things inside here, some I don’t understand.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(CMAKE_SYSTEM_NAME Arduino)

set(CMAKE_C_COMPILER avr-gcc)
set(CMAKE_ASM_COMPILER avr-gcc)
set(CMAKE_CXX_COMPILER avr-g++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we are identifying avr-gcc, that’s cool.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#=============================================================================#
#                         System Paths                                        #
#=============================================================================#
if (UNIX)
    include(Platform/UnixPaths)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;include() is like #include in C, so let’s see it.  Huh.. it’s not there.  Let’s see later then…&lt;/p&gt;

&lt;p&gt;Then there’s a part later to detect the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARDUINO_SDK_PATH&lt;/code&gt; using hints, which are directories likely to have the install.&lt;br /&gt;
Let’s just install the SDK now.  To do that just download it and run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo install.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let’s run &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake ..&lt;/code&gt; again.  Still the same error, let’s check the path hints.&lt;br /&gt;
Hmm for some reason the install.sh  doesn’t actually install anything in /usr or /bin or whatever.
Let’s move it manually then into one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hints&lt;/code&gt; , /usr/local/share/ .&lt;br /&gt;
&lt;strong&gt;Awesome!&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ cmake ..-- The C compiler identification is GNU 4.9.2
-- The CXX compiler identification is GNU 4.9.2
-- The ASM compiler identification is GNU
-- Found assembler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-gcc
-- Arduino SDK version 1.8.5-2017.01.09: /usr/local/share/arduino-1.8.5
-- Check for working C compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-gcc
-- Check for working C compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-g++
-- Check for working CXX compiler: /usr/local/share/arduino-1.8.5/hardware/tools/avr/bin/avr-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- ARDUINO Boards:
--                   menu: 
--                    yun: Arduino Y
--                    uno: Arduino/Genuino Uno
--              diecimila: Arduino Duemilanove or Diecimila
--                   nano: Arduino Nano
--                   mega: Arduino/Genuino Mega or Mega 2560
--                megaADK: Arduino Mega ADK
--               leonardo: Arduino Leonardo
--            leonardoeth: Arduino Leonardo ETH
--                  micro: Arduino/Genuino Micro
--                esplora: Arduino Esplora
--                   mini: Arduino Mini
--               ethernet: Arduino Ethernet
--                    fio: Arduino Fio
--                     bt: Arduino BT
--             LilyPadUSB: LilyPad Arduino USB
--                lilypad: LilyPad Arduino
--                    pro: Arduino Pro or Pro Mini
--               atmegang: Arduino NG or older
--           robotControl: Arduino Robot Control
--             robotMotor: Arduino Robot Motor
--                  gemma: Arduino Gemma
--     circuitplay32u4cat: Adafruit Circuit Playground
--                yunmini: Arduino Y
--                chiwawa: Arduino Industrial 101
--                    one: Linino One
--                unowifi: Arduino Uno WiFi
-- 
-- ARDUINO Programmers:
--            avrisp: AVR ISP
--        avrispmkii: AVRISP mkII
--        usbtinyisp: USBtinyISP
--        arduinoisp: ArduinoISP
--     arduinoisporg: ArduinoISP.org
--            usbasp: USBasp
--          parallel: Parallel Programmer
--      arduinoasisp: Arduino as ISP
--          usbGemma: Arduino Gemma
--         buspirate: BusPirate as ISP
--            stk500: Atmel STK500 development board
--          jtag3isp: Atmel JTAGICE3 (ISP mode)
--             jtag3: Atmel JTAGICE3 (JTAG mode)
--         atmel_ice: Atmel-ICE (AVR)
-- 
-- Generating wire_example
-- avr library found: Wire
-- Generating blink_example
-- Generating blink_original
-- Generating blink_file_original
-- Generating blink_bundled
-- Generating blink_lib
-- Generating blink
-- Generating serial_lib
-- avr library found: SoftwareSerial
-- Configuring done
-- Generating done
-- Build files have been written to: /home/steve/prog/scratch/arduino-cmake/build
steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s that stuff about boards and programmers?
How does that last part work, &lt;code class=&quot;highlighter-rouge&quot;&gt;Generating blink_example&lt;/code&gt; ?&lt;br /&gt;
Somehow, CMakeLists.txt at the top level was able to find all of those things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy&lt;/strong&gt; , that’s in the top CMakeLists.txt:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#====================================================================#
#  Setup Project                                                     #
#====================================================================#
project(ArduinoExample C CXX ASM)

print_board_list()
print_programmer_list()

add_subdirectory(example)   #add the example directory into build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So literally it prints the board lists and programmer list, and recurses into the example directory.&lt;/p&gt;

&lt;p&gt;So, the examples/CMakeLists.txt.&lt;br /&gt;
All that happens is this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(ARDUINO_DEFAULT_BOARD uno) # Default Board ID, when not specified
set(ARDUINO_DEFAULT_PORT /dev/ttyUSB0) # Default Port, when not specified
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#====================================================================#
# Advanced firwmare example
#====================================================================#
generate_arduino_firmware(blink
        SRCS blink.cpp
        LIBS blink_lib
        BOARD nano
        BOARD_CPU atmega328
        PORT com4
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Wow that’s not too bad , I’d like to give it a try!&lt;/p&gt;

&lt;p&gt;It looks like it should be easy to support the ARM chips, and use this to create new Arduino Libraries.&lt;/p&gt;</content><author><name></name></author><summary type="html">I cloned the repo. cd example mkdir build cmake .. CMake Error at CMakeLists.txt:11 (GENERATE_ARDUINO_LIBRARY_EXAMPLE): Unknown CMake command &quot;GENERATE_ARDUINO_LIBRARY_EXAMPLE&quot;. OK https://github.com/queezythegreat/arduino-cmake/issues/38 solves it. mkdir build;cmake .. must happen in the top level CMakeLists.txt directory. steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ mkdir build steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake$ cd build steve@steve-ThinkPad-T420:~/prog/scratch/arduino-cmake/build$ cmake .. CMake Error at cmake/ArduinoToolchain.cmake:93 (message): Could not find Arduino SDK (set ARDUINO_SDK_PATH)! Call Stack (most recent call first): /usr/share/cmake-3.5/Modules/CMakeDetermineSystem.cmake:98 (include) CMakeLists.txt:15 (project) OK, it can’t find the toolchain. It’s not installed. What happened … Line 15 of the top level CMakeLists.txt, was a project() call. project(ArduinoExample C CXX ASM) And then project() calls CMake core… line 98 include(&quot;${CMAKE_TOOLCHAIN_FILE}&quot; OPTIONAL RESULT_VARIABLE _INCLUDED_TOOLCHAIN_FILE) CMAKE_TOOLCHAIN_FILE is set in the CMakeLists.txt: ``` #=============================================================================# Author: QueezyTheGreat Date: 26.04.2011 # # Description: Arduino CMake example # # #=============================================================================# set(CMAKE_TOOLCHAIN_FILE cmake/ArduinoToolchain.cmake) # Arduino Toolchain</summary></entry><entry><title type="html">Bring up New Ubuntu System</title><link href="/2018/01/14/bring-up-new-ubuntu-system.html" rel="alternate" type="text/html" title="Bring up New Ubuntu System" /><published>2018-01-14T00:00:00-08:00</published><updated>2018-01-14T00:00:00-08:00</updated><id>/2018/01/14/bring-up-new-ubuntu-system</id><content type="html" xml:base="/2018/01/14/bring-up-new-ubuntu-system.html">&lt;p&gt;Ubuntu on my laptop was crashing regularly and taking way too long to boot from the SSD.&lt;/p&gt;

&lt;h1 id=&quot;editing-this-blog&quot;&gt;Editing this Blog&lt;/h1&gt;
&lt;p&gt;Need: Clone git repo, apt-get install ruby ruby-dev, gem install bundler, bundle install&lt;br /&gt;
Need: Production repo URL, so it can be pushed to.&lt;br /&gt;
The prod remote is a bare git repo on the production server.&lt;br /&gt;
Put in the url to it?  Behind web root?  &lt;em&gt;A:  use the whole SSH URL&lt;/em&gt;&lt;br /&gt;
Use ~/.ssh/config to specify the key to be used.&lt;br /&gt;
&lt;em&gt;New&lt;/em&gt;:  The built _site had been stored in the git repo, so it
could be directly copied into the bare remote, and then copied to the deploy.
I thought of course, to &lt;code class=&quot;highlighter-rouge&quot;&gt;git rm&lt;/code&gt; the _site and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;
inside /deploy, but of course jekyll was not installed.&lt;br /&gt;
So for now I put the built _site back in the repo.&lt;/p&gt;

&lt;h1 id=&quot;atom-ide&quot;&gt;Atom IDE&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo add-apt-repository ppa:webupd8team/atom&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt update; sudo apt install atom&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Source: http://tipsonubuntu.com/2016/08/05/install-atom-text-editor-ubuntu-16-04/&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;aliases&quot;&gt;Aliases&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Steve Aliases
alias l='ls -ltrh --color=auto'
alias gs='git status'
alias gl='git log'
alias gd='git diff'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;vim&quot;&gt;VIM&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install vim&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.vimrc
set noexpandtab
set tabstop=2
set shiftwidth=2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;golang&quot;&gt;Golang&lt;/h1&gt;

&lt;p&gt;Copy pasted from instructions: https://golang.org/doc/install?download=go1.9.2.linux-amd64.tar.gz&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux, Mac OS X, and FreeBSD tarballs

Download the archive and extract it into /usr/local, creating a Go tree in /usr/local/go. For example:

tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz

(Typically these commands must be run as root or through sudo.)

Add /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile:

export PATH=$PATH:/usr/local/go/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go get -t -u ./...&lt;/code&gt; -u installs from the net, -t installs for tests.&lt;br /&gt;
&lt;strong&gt;-t is not in man go get ???&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/sstephenson/bats.git
cd bats
./install.sh /usr/local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;thunderbird&quot;&gt;Thunderbird&lt;/h1&gt;
&lt;p&gt;Don’t download all emails from IMAP server, only last 30 days
&lt;code class=&quot;highlighter-rouge&quot;&gt;Source: https://support.mozilla.org/en-US/questions/1066286&lt;/code&gt;&lt;br /&gt;
Why doesn’t this work, it downloaded all my emails.  Maybe because there weren’t that many of them?&lt;/p&gt;

&lt;h1 id=&quot;servers&quot;&gt;Servers&lt;/h1&gt;
&lt;p&gt;Need SSH Keys, Hostnames, Root Passwords, IP Addresses&lt;br /&gt;
&lt;em&gt;Gnome Keyring&lt;/em&gt; turns out it reads the keys stored in ~/.ssh.  Confirmed, easy, just copy the keys into there.  Continue using ~/.ssh/config to specify which key per host&lt;/p&gt;

&lt;h1 id=&quot;ubuntu-crap&quot;&gt;Ubuntu Crap&lt;/h1&gt;
&lt;p&gt;Disable Caps-Lock:  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install gnome-tweak-tool&lt;/code&gt;  , go to “Typing”&lt;br /&gt;
Eable Workspaces:  &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings--&amp;gt;Appearance--&amp;gt;Behavior--&amp;gt;Enable Workspaces&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;arm-none-eabi-gcc&quot;&gt;arm-none-eabi-gcc&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install gcc-arm-none-eabi&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;irc&quot;&gt;IRC&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install xchat-gnome&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/msg nickserv register&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;synergy&quot;&gt;Synergy&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/symless/synergy-core/wiki/Compiling&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/symless/synergy-core.git
 cd synergy-core
 mkdir build
 cd build
 cmake ..
 make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;An Ubuntu 16 laptop didn’t have libcurl so,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install libcurl4-openssl-dev&lt;/code&gt;&lt;br /&gt;
Also it didn’t have XKBlib.h
&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install libx11-dev&lt;/code&gt;&lt;br /&gt;
As other people have noticed you have to edit CMakeLists.txt to change path to find XKBLib.h&lt;br /&gt;
Change it to /usr/include.&lt;br /&gt;
Weird, CMake still can’t find it, but if i do a rm -rf build and repeat the build again it works.&lt;br /&gt;
Then it can’t find libxtst. &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install libxtst-dev&lt;/code&gt;&lt;br /&gt;
That worked well, now make a config file like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;section: screens
        steve-T420:
        steve-T420-ZoZ:
        bob-pc:
end
section: links
        steve-T420:
                down = steve-T420-ZoZ
                left = bob-pc
        steve-T420-ZoZ:
                up = steve-T420
        bob-pc:
                right = steve-T420
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then run it with this&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;./synergys -f -c /etc/synergy.conf&lt;/code&gt;&lt;br /&gt;
Run the client like this&lt;br /&gt;
` synergyc -f 10.0.1.23`&lt;/p&gt;</content><author><name></name></author><summary type="html">Ubuntu on my laptop was crashing regularly and taking way too long to boot from the SSD. Editing this Blog Need: Clone git repo, apt-get install ruby ruby-dev, gem install bundler, bundle install Need: Production repo URL, so it can be pushed to. The prod remote is a bare git repo on the production server. Put in the url to it? Behind web root? A: use the whole SSH URL Use ~/.ssh/config to specify the key to be used. New: The built _site had been stored in the git repo, so it could be directly copied into the bare remote, and then copied to the deploy. I thought of course, to git rm the _site and then run jekyll build inside /deploy, but of course jekyll was not installed. So for now I put the built _site back in the repo.</summary></entry><entry><title type="html">Name Versioning and Publishing Latest Release</title><link href="/2017/11/09/semantic-versioning-and-publishing-latest-release.html" rel="alternate" type="text/html" title="Name Versioning and Publishing Latest Release" /><published>2017-11-09T00:00:00-08:00</published><updated>2017-11-09T00:00:00-08:00</updated><id>/2017/11/09/semantic-versioning-and-publishing-latest-release</id><content type="html" xml:base="/2017/11/09/semantic-versioning-and-publishing-latest-release.html">&lt;p&gt;After I got Jenkins building my code, there was no semantic versioning so this is what happened:&lt;br /&gt;
The built executable would have the same name every build so got overwritten.&lt;br /&gt;
I had a version number but more at a higher level, like a release number.&lt;br /&gt;
Now I need something to identify each build, ie. each commit.&lt;/p&gt;

&lt;p&gt;So I did this in CMake:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
set(THIS_BUILD_VERSION 0x2B30)
...
add_executable(myexename ${SOURCES} ${SOURCES_RECURSE} )

EXEC_PROGRAM(
&quot;echo $(git rev-parse --abbrev-ref HEAD)_$(git rev-parse --short HEAD)&quot; 
OUTPUT_VARIABLE gitrepoinfo
)

set(output_exe_filename MY_EXE_PREFIX_${THIS_BUILD_VERSION}_${gitrepoinfo})
set_target_properties(myexename PROPERTIES OUTPUT_NAME ${output_exe_filename})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;EXEC_PROGRAM is what worked for me , not the other execute_process or whatever.&lt;br /&gt;
I echo 2 git commands to get the branch name and short commit ID.&lt;/p&gt;

&lt;p&gt;Then I set the variable for the executable’s filename, and tell the target to be named by it.&lt;/p&gt;

&lt;p&gt;This worked, so now every time I git push I get a new build identifying that commit.&lt;br /&gt;
Now the problem is, the filenames are too long to type by hand so I need something 
like “latest-version.out” as an easy reference.&lt;br /&gt;
I tried to use symlinks, that didn’t work.&lt;/p&gt;

&lt;p&gt;Simple solution for now is to have Jenkins zip up the build, name it latest.zip ,
and publish that along with the non-zipped originals.&lt;br /&gt;
That way the zip is always overwritten with the latest.zip, and the originals are still
piling up for backup.&lt;/p&gt;</content><author><name></name></author><summary type="html">After I got Jenkins building my code, there was no semantic versioning so this is what happened: The built executable would have the same name every build so got overwritten. I had a version number but more at a higher level, like a release number. Now I need something to identify each build, ie. each commit. So I did this in CMake: ``` … set(THIS_BUILD_VERSION 0x2B30) … add_executable(myexename ${SOURCES} ${SOURCES_RECURSE} )</summary></entry><entry><title type="html">CMake redo</title><link href="/2017/11/08/cmake-redo.html" rel="alternate" type="text/html" title="CMake redo" /><published>2017-11-08T00:00:00-08:00</published><updated>2017-11-08T00:00:00-08:00</updated><id>/2017/11/08/cmake-redo</id><content type="html" xml:base="/2017/11/08/cmake-redo.html">&lt;p&gt;Running into so many little issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;External Libraries, git repos&lt;br /&gt;
I have 2 libraries that are shared by multiple projects.
I’ve experimented with linking to a prebuilt binary that is shared by multiple projects,
or having each individual project compile the library source.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linking to prebuilt worked before when I wasn’t automating my build.&lt;br /&gt;
I just installed the libraries and used hard coded paths to connect everything up in my handwritten Makefile.&lt;br /&gt;
Now I can’t do that, I want this on Jenkins and quick deploy.&lt;/p&gt;

&lt;p&gt;So I am trying to build the source.&lt;br /&gt;
I took the libraries out of the /src tree&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExternalProject_Add(XYZ_COMMON_SOURCE
    GIT_REPOSITORY &quot;https://steve@bitbucket.org/xyz/xyz_common_source.git&quot;
    BUILD_COMMAND &quot;&quot;
    UPDATE_COMMAND &quot;&quot;
    CONFIGURE_COMMAND &quot;&quot;
    INSTALL_COMMAND &quot;&quot;
    PREFIX &quot;/tmp/lib/&quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;`/tmp/lib is under the filesystem root, not a cmake root’&lt;/p&gt;

&lt;p&gt;This allowed me to do this&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file(GLOB_RECURSE SOURCES_RECURSE
    &quot;/tmp/lib/src/XYZ_COMMON_SOURCE/*.c&quot;
    &quot;/tmp/lib/src/XYZ_COMMON_SOURCE/*.h&quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;but-my-next-problem-is-some-of-these-source-files-have-header-dependencies--interface-header&quot;&gt;But my next problem is, some of these source files have header dependencies.  Interface header.&lt;/h1&gt;

&lt;p&gt;One of the files in COMMON_SOURCE has a header, “IHAL_MYSERIAL.h”
A hardware interface.&lt;br /&gt;
The project I’m trying to build now doesn’t have that interface or use that source file.&lt;br /&gt;
But CMake wants to build all the source files, and IHAL_MYSERIAL.h isn’t there.
Eh, thinking again, the header should be in there.  I put it in.&lt;/p&gt;

&lt;p&gt;OK got somewhere, just had to take out some files from the Primary project that
were multiply defined with the common source.&lt;br /&gt;
Previously I had avoided this by individually selecting each source file to be built.&lt;br /&gt;
But now I’m building everything so there are conflicts due to that.&lt;/p&gt;

&lt;h1 id=&quot;small-note&quot;&gt;Small Note,&lt;/h1&gt;
&lt;p&gt;If the build fails I guess the artifacts are deleted?&lt;br /&gt;
I had a GNU size command running after the linker step, but it failed due to the wrong path.&lt;br /&gt;
When that happened there was no binary in the bin directory.&lt;br /&gt;
But removing the size command entirely, the binary was there.  Also when fixing the wrong path,
the binary was there.&lt;/p&gt;</content><author><name></name></author><summary type="html">Running into so many little issues.</summary></entry><entry><title type="html">Bitbucket Access Keys inside a Jenkins Container</title><link href="/2017/11/08/bitbucket-access-keys-inside-a-jenkins-container.html" rel="alternate" type="text/html" title="Bitbucket Access Keys inside a Jenkins Container" /><published>2017-11-08T00:00:00-08:00</published><updated>2017-11-08T00:00:00-08:00</updated><id>/2017/11/08/bitbucket-access-keys-inside-a-jenkins-container</id><content type="html" xml:base="/2017/11/08/bitbucket-access-keys-inside-a-jenkins-container.html">&lt;p&gt;Bit of extra work to get a container to talk to Bitbucket.&lt;br /&gt;
This is necessary because Jenkins needs to pull private repos autmatically,
so must use keys.&lt;br /&gt;
The key could be baked in the image but then I can’t share it.&lt;br /&gt;
So what I did was put in a global /etc/ssh/ssh_config that points to a key
inside the shared data volume.  I simply stick the key in there.&lt;/p&gt;

&lt;p&gt;First generate the key, then copy/paste it into bitbucket repo settings access key.
Then copy the key to an accessible server.
Then copy the key into the Docker host and then docker container.&lt;/p&gt;

&lt;p&gt;ssh -i bitbucket_access_key git@bitbucket.org&lt;/p&gt;

&lt;p&gt;to make sure the key works.&lt;/p&gt;

&lt;p&gt;Then configure SSH to use the keys there.&lt;/p&gt;

&lt;p&gt;Problem, the only shared volume is /var/jenkins_home in the container.  /etc is not persistent.
We’ll have to bake it into the image?&lt;/p&gt;

&lt;p&gt;Add this to the Dockerfile and add this file&lt;/p&gt;

&lt;p&gt;Host bitbucket.org
    HostName bitbucket.org
    User steveODI
    IdentityFile /var/jenkins_home/bitbucket_access_key&lt;/p&gt;

&lt;p&gt;Dockerfile:
COPY ssh_config /home/jenkins/.ssh/ssh_config&lt;/p&gt;

&lt;p&gt;no,
COPY ssh_config /etc/ssh/ssh_config&lt;/p&gt;</content><author><name></name></author><summary type="html">Bit of extra work to get a container to talk to Bitbucket. This is necessary because Jenkins needs to pull private repos autmatically, so must use keys. The key could be baked in the image but then I can’t share it. So what I did was put in a global /etc/ssh/ssh_config that points to a key inside the shared data volume. I simply stick the key in there.</summary></entry><entry><title type="html">jenkins and build inside a docker container</title><link href="/2017/10/27/jenkins-and-build-inside-a-docker-container.html" rel="alternate" type="text/html" title="jenkins and build inside a docker container" /><published>2017-10-27T00:00:00-07:00</published><updated>2017-10-27T00:00:00-07:00</updated><id>/2017/10/27/jenkins-and-build-inside-a-docker-container</id><content type="html" xml:base="/2017/10/27/jenkins-and-build-inside-a-docker-container.html">&lt;p&gt;Jenkins will be available through some URL.
The build toolchain will be installed in the Dockerfile,
on top of the jenkins image.&lt;/p&gt;

&lt;p&gt;Toolchain is static but the code isn’t so the code building
is done inside the container.  pulling the code, dependencies,
building it, etc is a script run inside the container.&lt;/p&gt;

&lt;p&gt;Installed docker on the fresh VM with the get docker script.&lt;br /&gt;
Installed docker-compose also from docker.io hosted script.&lt;/p&gt;</content><author><name></name></author><summary type="html">Jenkins will be available through some URL. The build toolchain will be installed in the Dockerfile, on top of the jenkins image. Toolchain is static but the code isn’t so the code building is done inside the container. pulling the code, dependencies, building it, etc is a script run inside the container. Installed docker on the fresh VM with the get docker script. Installed docker-compose also from docker.io hosted script.</summary></entry><entry><title type="html">OpenVPN on Docker</title><link href="/2017/10/17/openvpn-on-docker.html" rel="alternate" type="text/html" title="OpenVPN on Docker" /><published>2017-10-17T00:00:00-07:00</published><updated>2017-10-17T00:00:00-07:00</updated><id>/2017/10/17/openvpn-on-docker</id><content type="html" xml:base="/2017/10/17/openvpn-on-docker.html">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo curl -sSL https://get.docker.com/ | sudo sh
sudo usermod -aG docker ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;httpsgithubcomkylemannadocker-openvpn&quot;&gt;https://github.com/kylemanna/docker-openvpn&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OVPN_DATA=&quot;ovpn-data-example&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The volume stores data generated by the following.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume create --name $OVPN_DATA
  docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COM
sudo ls /var/lib/docker/volumes/ovpn-data-example/_data/
ccd  down.sh  openvpn.conf  ovpn_env.sh  up.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
ubuntu@ubuntu:~$ sudo ls /var/lib/docker/volumes/ovpn-data-example/_data/
ccd  down.sh  openvpn.conf  ovpn_env.sh  pki  up.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
  docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass
  docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &amp;gt; CLIENTNAME.ovpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ubuntu@ubuntu:~$ ls
CLIENTNAME.ovpn 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">sudo curl -sSL https://get.docker.com/ | sudo sh sudo usermod -aG docker ubuntu https://github.com/kylemanna/docker-openvpn OVPN_DATA=&quot;ovpn-data-example&quot; The volume stores data generated by the following. docker volume create --name $OVPN_DATA docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COM sudo ls /var/lib/docker/volumes/ovpn-data-example/_data/ ccd down.sh openvpn.conf ovpn_env.sh up.sh docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki ubuntu@ubuntu:~$ sudo ls /var/lib/docker/volumes/ovpn-data-example/_data/ ccd down.sh openvpn.conf ovpn_env.sh pki up.sh docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &amp;gt; CLIENTNAME.ovpn ubuntu@ubuntu:~$ ls CLIENTNAME.ovpn</summary></entry><entry><title type="html">Docker Swarm Beaglebone</title><link href="/2017/10/17/docker-swarm-beaglebone.html" rel="alternate" type="text/html" title="Docker Swarm Beaglebone" /><published>2017-10-17T00:00:00-07:00</published><updated>2017-10-17T00:00:00-07:00</updated><id>/2017/10/17/docker-swarm-beaglebone</id><content type="html" xml:base="/2017/10/17/docker-swarm-beaglebone.html">&lt;h1 id=&quot;first-the-swarm-manager&quot;&gt;First the Swarm Manager&lt;/h1&gt;
&lt;p&gt;Physical access to the Beaglebone allowed a startup script to be installed,
which would set up a reverse SSH tunnel to an Internet host.&lt;br /&gt;
Then, install and configure the Docker Swarm.&lt;/p&gt;

&lt;p&gt;The Swarm Manager needs to have a static IP on the LAN,
so the Swarm Nodes can hard code that static IP.&lt;/p&gt;

&lt;h1 id=&quot;the-swarm-nodes-will-all-use-the-same-sd-card-image&quot;&gt;The Swarm Nodes will all use the same SD card image&lt;/h1&gt;
&lt;p&gt;The filesystem in that SD card image can have a startup script with that
Manager Static IP hard coded in.&lt;/p&gt;</content><author><name></name></author><summary type="html">First the Swarm Manager Physical access to the Beaglebone allowed a startup script to be installed, which would set up a reverse SSH tunnel to an Internet host. Then, install and configure the Docker Swarm. The Swarm Manager needs to have a static IP on the LAN, so the Swarm Nodes can hard code that static IP. The Swarm Nodes will all use the same SD card image The filesystem in that SD card image can have a startup script with that Manager Static IP hard coded in.</summary></entry><entry><title type="html">cpputest on docker</title><link href="/2017/10/10/cpputest-on-docker.html" rel="alternate" type="text/html" title="cpputest on docker" /><published>2017-10-10T00:00:00-07:00</published><updated>2017-10-10T00:00:00-07:00</updated><id>/2017/10/10/cpputest-on-docker</id><content type="html" xml:base="/2017/10/10/cpputest-on-docker.html">&lt;p&gt;I’m going to build debos_firmware with a docker container.&lt;br /&gt;
I’ll start with apline linux, get a toolchain.&lt;br /&gt;
Then have it clone the debos_firmware repo and build it.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m going to build debos_firmware with a docker container. I’ll start with apline linux, get a toolchain. Then have it clone the debos_firmware repo and build it.</summary></entry><entry><title type="html">CMake and Gradle for ARM C/C++</title><link href="/2017/10/09/cmake-and-gradle-for-arm-c-c.html" rel="alternate" type="text/html" title="CMake and Gradle for ARM C/C++" /><published>2017-10-09T00:00:00-07:00</published><updated>2017-10-09T00:00:00-07:00</updated><id>/2017/10/09/cmake-and-gradle-for-arm-c-c</id><content type="html" xml:base="/2017/10/09/cmake-and-gradle-for-arm-c-c.html">&lt;p&gt;I’m trying to build my codebase in CMake or Gradle.&lt;br /&gt;
Tried Gradle first.  At first glance there are way too many DSL keywords,
I have no idea what they do and connecting the dots is insane.&lt;br /&gt;
It’s the same frustration I get with python.  Never knowing what type anything is
and always having to look up documentation before writing a single line.&lt;/p&gt;

&lt;p&gt;Now trying CMake…&lt;/p&gt;

&lt;p&gt;http://derekmolloy.ie/hello-world-introductions-to-cmake/&lt;/p&gt;

&lt;p&gt;I started with this CMakeLists.txt&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake_minimum_required(VERSION 2.8)
project(hello)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
include_directories(&quot;${PROJECT_SOURCE_DIR}&quot;)
add_executable(hello ${PROJECT_SOURCE_DIR}/src/main.c)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To build,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake .
make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wow it actually tried to compile something.  No include directories were supplied.  Let’s add one.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include_directories(myincludedir)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Works.  Now there’s another header that’s not inside the repo.&lt;br /&gt;
Let’s add those.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include_directories(&quot;../samd20_cmsis_headers&quot;)
include_directories(&quot;../arm_cmsis_headers&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next error, Error: no such instruction: `cpsie i’.&lt;br /&gt;
I must not be compling with the arm gcc compiler.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(CMAKE_C_COMPILER arm-none-eabi-gcc)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arm-none-eabi-gcc: error: unrecognized command line option '-rdynamic'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I get this error.  Found a solution from here.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/digitalbitbox/mcu/blob/master/arm.cmake
# Avoid known bug in linux giving: 
#    arm-none-eabi-gcc: error: unrecognized command line option '-rdynamic'
set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For the CFLAGS I used this syntax.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(CMAKE_C_FLAGS &quot;-std=c99                      &quot;)
string(APPEND CMAKE_C_FLAGS &quot;-Wall                         &quot;)
string(APPEND CMAKE_C_FLAGS &quot;-Wextra                       &quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I used this to add directories containing source files to be compiled.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file(GLOB SOURCES
    &quot;src/*.h&quot;
    &quot;src/*.c&quot;
    &quot;src/hal/*.c&quot;
    &quot;src/hal/*.h&quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And I changed the executable to be built from those sources:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_executable(myname ${SOURCES})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I noticed the output of the GNU size command shows different sizes for the
ELF output from the CMake build and the original Makefile build.
  I realized I never specified the linker script.  Let’s do that.&lt;/p&gt;

&lt;p&gt;Turns out I just stick it in the CMAKE_C_FLAGS , no need for a separate linker flags.&lt;/p&gt;

&lt;p&gt;Added that and I get the desired output.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   text    data     bss     dec     hex filename     
  3352      68    2584    6004    1774 bin/debos_firmware  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Seeing that exact same output on either build is… extremely releiving.&lt;/p&gt;

&lt;h1 id=&quot;uh-now-im-trying-to-build-my-unit-test-executable&quot;&gt;Uh, now I’m trying to build my unit test executable.&lt;/h1&gt;

&lt;p&gt;I got this far …&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file(GLOB TEST_SOURCES
    &quot;test/*.h&quot;
    &quot;test/*.c&quot;
    &quot;test/test_runners/*.c&quot;
    &quot;test/test_runners/*.h&quot;
    &quot;mock/*.c&quot;
    &quot;../Unity/src/*.c&quot;
    &quot;src/*.c&quot;
    &quot;src/hal/*.c&quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First issue I have to deal with:&lt;br /&gt;
Multiple Definition error from the linker.&lt;br /&gt;
As you see, I included the test/ directory and src/.
Inside test there are some mocked objects.  The names collide with the ones from source.&lt;/p&gt;

&lt;p&gt;A solution I’ve learned from various books is to compile the source into a library.
When linking the test executable, the library will only be searched when the
symbol is not found in the test objects.&lt;br /&gt;
This hackish technique creates a priority of sorts, for names.  Test names first, production names second.&lt;/p&gt;

&lt;p&gt;Now how do I do this with CMake?  Reimplement that above logic?&lt;br /&gt;
My guess is Yes, because CMake just wraps make and it is make and gcc that are complaining
about not finding the symbols.&lt;/p&gt;

&lt;h1 id=&quot;create-a-static-library-of-the-application-code-and-link-it-to-the-test-exe&quot;&gt;Create a static library of the application code and link it to the test exe&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_library(applib_debos_firmware STATIC ${SOURCES})
add_executable(test_debos_firmware ${TEST_SOURCES})
target_link_libraries(test_debos_firmware applib_debos_firmware )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First, the above CMakeLists.txt is inside the test/ directory.&lt;br /&gt;
So I have CMakeLists.txt inside both src/ and test/.&lt;br /&gt;
To build, I go inside a directory and run cmake, and the Makefile is generated in the directory.&lt;br /&gt;
Since the Makefile is now autogenerated, I now have it in .gitignore.&lt;/p&gt;

&lt;p&gt;The ${SOURCES} is a collection of source inside src/ , but does not include HAL.&lt;br /&gt;
HAL code is generally not compilable on host.&lt;br /&gt;
If there is a high level HAL like a UART driver then I’ll put that in src/ not hal/.&lt;/p&gt;

&lt;h1 id=&quot;so-far-this-is-good--next-i-want-the-dependencies-pulled-in-automatically&quot;&gt;So far this is good.  Next I want the dependencies pulled in automatically.&lt;/h1&gt;

&lt;p&gt;This particular project needs libraries:  unit test library, 
target specific headers repositories.&lt;/p&gt;

&lt;p&gt;Unit Test library is public URL, target specific headers are public git URL.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExternalProject_Add(samd20_headers
    GIT_REPOSITORY &quot;https://bitbucket.org/bootladder/samd20_cmsis_headers&quot;
    BUILD_COMMAND &quot;&quot;
    UPDATE_COMMAND &quot;&quot;
    CONFIGURE_COMMAND &quot;&quot;
    INSTALL_COMMAND &quot;&quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This worked to get the repo downloaded.  The following showed up in my ls:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;drwxr-xr-x 4 steve supervisorusers 4.0K Oct 10 15:50 samd20_headers-prefix/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What is this prefix business…  let’s put in a prefix.&lt;/p&gt;

&lt;p&gt;If I put in a&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PREFIX &quot;hello&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then the repo is cloned, named hello.  what??&lt;br /&gt;
Apparently it’s supposed to be this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PREFIX &quot;samd20_headers&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Why do I have to explicitly type the same name…&lt;/p&gt;

&lt;h1 id=&quot;anyway-next-problem-is-the-include-path-is-no-longer-the-same&quot;&gt;Anyway, next problem is, the include path is no longer the same.&lt;/h1&gt;

&lt;p&gt;I need to tell CMake to add include directories to the compiler command.&lt;/p&gt;

&lt;h1 id=&quot;oh-prefix-is-for-where-the-external-project-is-installed--doesnt-have-to-be-inside-this-project&quot;&gt;Oh, prefix is for where the external project is installed.  Doesn’t have to be inside this project&lt;/h1&gt;

&lt;h1 id=&quot;moving-on-to-the-test-build-auto-downloading-the-unity-test-framework&quot;&gt;Moving on to the test build, auto downloading the Unity test framework&lt;/h1&gt;

&lt;p&gt;This one was tricky because it doesn’t provide a build script.
It is intended for the library consumer to build the source.&lt;br /&gt;
Also, the source is not in the top directory of the repo.&lt;/p&gt;

&lt;p&gt;I solved it with a kludge, don’t like it:&lt;/p&gt;

&lt;p&gt;First, this is how I added compiler include directories.&lt;br /&gt;
Using install_dir as a global variable here…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExternalProject_Get_Property(samd20_headers install_dir)
include_directories(${install_dir}/src/samd20_headers/)
ExternalProject_Get_Property(arm_cmsis_headers install_dir)
include_directories(${install_dir}/src/arm_cmsis_headers/)
ExternalProject_Get_Property(unity install_dir)
include_directories(${install_dir}/src/unity/src/)
include_directories(${install_dir}/src/unity/extras/fixture/src/)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice at the end, for unity, there are 2 calls to include_directories().
I guess it’s ok, it’s explicit and still relative to the ${install_dir}.&lt;/p&gt;

&lt;p&gt;Later, in my list of source files, there’s another kludge.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file(GLOB TEST_SOURCES
    &quot;*.h&quot;
    &quot;*.c&quot;
    &quot;hal/*.c&quot;
    &quot;test_runners/*.c&quot;
    &quot;test_runners/*.h&quot;
    &quot;../../Unity/extras/fixture/src/*.c&quot;
    &quot;../mock/*.c&quot;
    &quot;../../Unity/src/*.c&quot;
    &quot;${install_dir}/src/unity/src/*&quot;
    &quot;${install_dir}/src/unity/extras/fixture/src/*&quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But same, I guess it’s OK, because the list is explicit and also relative to ${install_dir}.&lt;br /&gt;
So every time this project is cloned and built it’ll work.&lt;br /&gt;
One issue is the name install_dir is only valid when install_dir was just written to with the correct contents.&lt;/p&gt;

&lt;h1 id=&quot;uhhh-a-similar-issue-build-doesnt-work-first-time-works-second-time&quot;&gt;Uhhh, a similar issue… Build doesn’t work first time, works second time?&lt;/h1&gt;

&lt;p&gt;What’s happening here…&lt;/p&gt;

&lt;p&gt;Same thing as before.  The Unity git repo was cloned, and then
Make is supposed to compile the source as part of the build.&lt;br /&gt;
But Make can’t find them.&lt;br /&gt;
In this case, Make did not include those sources in the list of source files to be compiled.&lt;br /&gt;
Make said “Scanning dependencies of…” and then compiled the sources, but the Unity sources weren’t.&lt;br /&gt;
All I have to do to get the build to succeed next time is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch CMakeLists.txt
make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And it works; this time, it scans the dependencies, finds the Unity sources and builds them.&lt;/p&gt;

&lt;h1 id=&quot;i-guess-im-not-supposed-to-try-to-do-this&quot;&gt;I guess I’m not supposed to try to do this?&lt;/h1&gt;

&lt;p&gt;Why should I build the source ?  That means I have to know how to build it.&lt;br /&gt;
Any changes to that repo will break my build and everyone else who does it this way.&lt;/p&gt;

&lt;p&gt;What’s the alternative?  They can’t precompile unless they only supported a couple targets.&lt;br /&gt;
They could include a Makefile or CMakeLists.txt.  CMake would work I guess but not Make.&lt;/p&gt;

&lt;h1 id=&quot;lets-follow-this-one--httpwwwthrowtheswitchorgbuildcmake&quot;&gt;Let’s follow this one:  http://www.throwtheswitch.org/build/cmake&lt;/h1&gt;

&lt;p&gt;Since it is literally what I’m trying to do.&lt;/p&gt;

&lt;h1 id=&quot;eh-lets-get-ceedling-working-first&quot;&gt;Eh, let’s get Ceedling working first.&lt;/h1&gt;

&lt;p&gt;Currently I had handwritten Unity tests.&lt;br /&gt;
Ceedling does it a bit different.&lt;br /&gt;
Each test.c file is linked into a test app and executed.&lt;br /&gt;
It uses its own build system so anything that was in Make or CMake before
is invalid.&lt;br /&gt;
This means the linker and header dependencies on the production source.&lt;/p&gt;

&lt;p&gt;To get the ceedling tests to work you have to put #include statements
in the tests, which makes Ceedling pull in source files.&lt;br /&gt;
Other than that seems OK.&lt;/p&gt;

&lt;h1 id=&quot;problem-is-you-need-a-ruby-and-ceedling-installation&quot;&gt;Problem is you need a ruby and ceedling installation.&lt;/h1&gt;</content><author><name></name></author><summary type="html">I’m trying to build my codebase in CMake or Gradle. Tried Gradle first. At first glance there are way too many DSL keywords, I have no idea what they do and connecting the dots is insane. It’s the same frustration I get with python. Never knowing what type anything is and always having to look up documentation before writing a single line. Now trying CMake… http://derekmolloy.ie/hello-world-introductions-to-cmake/ I started with this CMakeLists.txt cmake_minimum_required(VERSION 2.8) project(hello) set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin) set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}) set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}) include_directories(&quot;${PROJECT_SOURCE_DIR}&quot;) add_executable(hello ${PROJECT_SOURCE_DIR}/src/main.c) To build, cmake . make Wow it actually tried to compile something. No include directories were supplied. Let’s add one. include_directories(myincludedir) Works. Now there’s another header that’s not inside the repo. Let’s add those. include_directories(&quot;../samd20_cmsis_headers&quot;) include_directories(&quot;../arm_cmsis_headers&quot;)</summary></entry></feed>